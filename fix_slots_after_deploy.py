#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
"""
import logging
import sys
import os
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.config import settings
from src.database import get_db, User, OwnerAvailability, UserRole, init_db

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_and_fix_slots():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–ª–æ—Ç–∞–º–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤"""
    try:
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        with get_db() as db:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
            owners = db.query(User).filter(User.role == UserRole.OWNER).all()
            logger.info(f"üëë –ù–∞–π–¥–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤: {len(owners)}")
            
            for owner in owners:
                logger.info(f"   ‚Ä¢ {owner.first_name} {owner.last_name} (ID: {owner.id}, Telegram: {owner.telegram_id})")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ—Ç—ã
            all_slots = db.query(OwnerAvailability).all()
            logger.info(f"üìÖ –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤ –≤ –ë–î: {len(all_slots)}")
            
            # 3. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
            owner_slots = {}
            for slot in all_slots:
                if slot.owner_id not in owner_slots:
                    owner_slots[slot.owner_id] = []
                owner_slots[slot.owner_id].append(slot)
            
            # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–ª–æ—Ç—ã
            for owner in owners:
                slots = owner_slots.get(owner.id, [])
                logger.info(f"   {owner.first_name}: {len(slots)} —Å–ª–æ—Ç–æ–≤")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
                days_slots = {}
                for slot in slots:
                    if slot.day_of_week not in days_slots:
                        days_slots[slot.day_of_week] = []
                    days_slots[slot.day_of_week].append(slot.time_slot)
                
                if days_slots:
                    from src.services.owner_service import WEEKDAYS
                    for day_idx, time_slots in days_slots.items():
                        day_name = WEEKDAYS[day_idx] if 0 <= day_idx < len(WEEKDAYS) else f"–î–µ–Ω—å {day_idx}"
                        logger.info(f"     - {day_name}: {', '.join(sorted(time_slots))}")
                else:
                    logger.warning(f"     ‚ö†Ô∏è –£ {owner.first_name} –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤!")
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º orphaned —Å–ª–æ—Ç—ã (—Å–ª–æ—Ç—ã –±–µ–∑ –≤–ª–∞–¥–µ–ª—å—Ü–∞)
            orphaned_slots = db.query(OwnerAvailability).filter(
                ~OwnerAvailability.owner_id.in_([owner.id for owner in owners])
            ).all()
            
            if orphaned_slots:
                logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(orphaned_slots)} —Å–ª–æ—Ç–æ–≤ –±–µ–∑ –≤–ª–∞–¥–µ–ª—å—Ü–∞")
                for slot in orphaned_slots:
                    logger.warning(f"   - –°–ª–æ—Ç ID {slot.id} –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ {slot.owner_id}")
                
                # –£–¥–∞–ª—è–µ–º orphaned —Å–ª–æ—Ç—ã
                for slot in orphaned_slots:
                    db.delete(slot)
                db.commit()
                logger.info("‚úÖ –£–¥–∞–ª–µ–Ω—ã —Å–ª–æ—Ç—ã –±–µ–∑ –≤–ª–∞–¥–µ–ª—å—Ü–∞")
            
            # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ—Ç—ã
            inactive_slots = db.query(OwnerAvailability).filter(
                OwnerAvailability.is_active == False
            ).all()
            
            if inactive_slots:
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(inactive_slots)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
                
                # –ú–æ–∂–Ω–æ –∏—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                # for slot in inactive_slots:
                #     slot.is_active = True
                # db.commit()
            
            # 7. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–ª–æ—Ç—ã –µ—Å–ª–∏ –∏—Ö —Å–æ–≤—Å–µ–º –Ω–µ—Ç
            if len(all_slots) == 0 and len(owners) > 0:
                logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤...")
                
                # –ë–∞–∑–æ–≤—ã–µ —Å–ª–æ—Ç—ã: –±—É–¥–Ω–∏–µ –¥–Ω–∏ —Å 14:00 –¥–æ 17:00
                base_slots = ["14:00", "15:00", "16:00", "17:00"]
                weekdays = [0, 1, 2, 3, 4]  # –ü–Ω-–ü—Ç
                
                for owner in owners:
                    logger.info(f"   –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –¥–ª—è {owner.first_name}...")
                    for day in weekdays:
                        for time_slot in base_slots:
                            slot = OwnerAvailability(
                                owner_id=owner.id,
                                day_of_week=day,
                                time_slot=time_slot,
                                is_active=True
                            )
                            db.add(slot)
                    
                db.commit()
                logger.info("‚úÖ –°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—Å–µ—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤")
        
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–æ—Ç–æ–≤: {e}")
        raise

def backup_slots():
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–∏—Ö —Å–ª–æ—Ç–æ–≤"""
    try:
        logger.info("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å–ª–æ—Ç–æ–≤...")
        
        with get_db() as db:
            slots = db.query(OwnerAvailability).all()
            
            backup_data = []
            for slot in slots:
                backup_data.append({
                    'owner_id': slot.owner_id,
                    'day_of_week': slot.day_of_week,
                    'time_slot': slot.time_slot,
                    'is_active': slot.is_active
                })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            import json
            with open('slots_backup.json', 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {len(backup_data)} —Å–ª–æ—Ç–æ–≤ –≤ slots_backup.json")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")

def restore_slots_from_backup():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª–æ—Ç—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    try:
        import json
        
        if not os.path.exists('slots_backup.json'):
            logger.error("‚ùå –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ slots_backup.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        logger.info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        
        with open('slots_backup.json', 'r', encoding='utf-8') as f:
            backup_data = json.load(f)
        
        with get_db() as db:
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ—Ç—ã
            db.query(OwnerAvailability).delete()
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –∫–æ–ø–∏–∏
            restored = 0
            for slot_data in backup_data:
                slot = OwnerAvailability(
                    owner_id=slot_data['owner_id'],
                    day_of_week=slot_data['day_of_week'],
                    time_slot=slot_data['time_slot'],
                    is_active=slot_data['is_active']
                )
                db.add(slot)
                restored += 1
            
            db.commit()
            logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored} —Å–ª–æ—Ç–æ–≤ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser(description='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤')
    parser.add_argument('--check', action='store_true', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–æ—Ç–æ–≤')
    parser.add_argument('--backup', action='store_true', help='–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é')
    parser.add_argument('--restore', action='store_true', help='–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏')
    
    args = parser.parse_args()
    
    if args.backup:
        backup_slots()
    elif args.restore:
        restore_slots_from_backup()
    elif args.check:
        check_and_fix_slots()
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—Ä–æ–≤–µ—Ä–∫–∞
        check_and_fix_slots()