#!/usr/bin/env python3
"""
üõ°Ô∏è SIMPLIFIED CALENDAR DIAGNOSTIC SYSTEM v4.0
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –±–µ–∑ ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (numpy, sklearn)
"""
import logging
import sys
from pathlib import Path
from datetime import datetime
import traceback
import json
import re
import hashlib
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('calendar_diagnosis.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class SimpleHistoryPersistence:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.history_root = self.project_root / ".diagnostic_history"
        self.history_root.mkdir(exist_ok=True)
        self.db_path = self.history_root / "simple_history.db"
        self._init_database()
        
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π –ë–î"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS diagnosis_sessions (
                session_id TEXT PRIMARY KEY,
                timestamp TEXT,
                problem_description TEXT,
                results TEXT
            )
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS detected_issues (
                issue_id TEXT PRIMARY KEY,
                session_id TEXT,
                issue_type TEXT,
                severity TEXT,
                description TEXT,
                fix_suggestion TEXT,
                FOREIGN KEY (session_id) REFERENCES diagnosis_sessions(session_id)
            )
        """)
        
        conn.commit()
        conn.close()
        
    def save_session(self, session_data):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            INSERT OR REPLACE INTO diagnosis_sessions 
            (session_id, timestamp, problem_description, results)
            VALUES (?, ?, ?, ?)
        """, (
            session_data['session_id'],
            session_data['timestamp'],
            session_data['problem_description'],
            json.dumps(session_data.get('results', {}))
        ))
        
        conn.commit()
        conn.close()
        
    def save_issue(self, issue_data):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        issue_id = f"issue_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{hash(issue_data['description']) % 10000}"
        
        cursor.execute("""
            INSERT INTO detected_issues 
            (issue_id, session_id, issue_type, severity, description, fix_suggestion)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (
            issue_id,
            issue_data['session_id'],
            issue_data['issue_type'],
            issue_data['severity'],
            issue_data['description'],
            issue_data.get('fix_suggestion', '')
        ))
        
        conn.commit()
        conn.close()
        
        return issue_id

class SimpleCalendarDiagnostic:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
    
    def __init__(self, project_path: str):
        self.project_path = Path(project_path)
        self.history = SimpleHistoryPersistence(project_path)
        self.session_id = f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        self.known_issues = {
            'conference_type_error': {
                'patterns': ['eventHangout', 'Invalid conference type value'],
                'severity': 'high',
                'fix': 'Change eventHangout to hangoutsMeet'
            },
            'service_account_attendee_error': {
                'patterns': ['Service accounts cannot invite attendees'],
                'severity': 'high', 
                'fix': 'Remove attendee invitations for Service Account calls'
            },
            'oauth_detection_issue': {
                'patterns': ['_is_oauth_calendar', 'oauth_credentials', 'refresh_token'],
                'severity': 'medium',
                'fix': 'Improve OAuth vs Service Account detection'
            },
            'webhook_timeout': {
                'patterns': ['Connection timed out', 'webhook'],
                'severity': 'critical',
                'fix': 'Fix webhook configuration and connectivity'
            },
            'dual_calendar_sync': {
                'patterns': ['events not created', 'manager_event_id', 'owner_event_id'],
                'severity': 'high',
                'fix': 'Fix dual calendar synchronization logic'
            }
        }
        
    def run_diagnosis(self, problem_description: str) -> dict:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"""
        
        logger.info("üöÄ Starting SIMPLIFIED CALENDAR DIAGNOSTIC SYSTEM v4.0")
        
        session_data = {
            'session_id': self.session_id,
            'timestamp': datetime.now().isoformat(),
            'problem_description': problem_description
        }
        
        try:
            results = {}
            
            # 1. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
            logger.info("üîç Phase 1: Code Analysis")
            code_issues = self._analyze_code()
            results['code_issues'] = code_issues
            
            # 2. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
            logger.info("üîç Phase 2: Problem Analysis") 
            problem_analysis = self._analyze_problem_description(problem_description)
            results['problem_analysis'] = problem_analysis
            
            # 3. –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º
            logger.info("üìä Phase 3: Issue Prioritization")
            prioritized_issues = self._prioritize_issues(code_issues + problem_analysis)
            results['prioritized_issues'] = prioritized_issues
            
            # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            logger.info("üîß Phase 4: Fix Generation")
            fixes = self._generate_specific_fixes(prioritized_issues)
            results['suggested_fixes'] = fixes
            
            # 5. –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
            logger.info("üìã Phase 5: Action Plan")
            action_plan = self._create_action_plan(prioritized_issues, fixes)
            results['action_plan'] = action_plan
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            session_data['results'] = results
            self.history.save_session(session_data)
            
            return results
            
        except Exception as e:
            logger.error(f"‚ùå Diagnostic failed: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise
    
    def _analyze_code(self) -> list:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        
        issues = []
        
        calendar_files = [
            'src/services/google_calendar_dual.py',
            'src/services/google_calendar.py',
            'src/services/meeting_service.py'
        ]
        
        for file_path in calendar_files:
            full_path = self.project_path / file_path
            if full_path.exists():
                logger.info(f"üìÑ Analyzing {file_path}")
                
                with open(full_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                file_issues = self._scan_file_for_issues(content, file_path)
                issues.extend(file_issues)
        
        return issues
    
    def _scan_file_for_issues(self, content: str, file_path: str) -> list:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"""
        
        issues = []
        
        for issue_type, issue_config in self.known_issues.items():
            for pattern in issue_config['patterns']:
                if pattern in content:
                    issue = {
                        'type': issue_type,
                        'severity': issue_config['severity'],
                        'file': file_path,
                        'pattern_found': pattern,
                        'description': f"Found {pattern} in {file_path}",
                        'suggested_fix': issue_config['fix']
                    }
                    issues.append(issue)
                    
                    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
                    self.history.save_issue({
                        'session_id': self.session_id,
                        'issue_type': issue_type,
                        'severity': issue_config['severity'],
                        'description': issue['description'],
                        'fix_suggestion': issue_config['fix']
                    })
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è eventHangout
        if 'eventHangout' in content and file_path.endswith('google_calendar_dual.py'):
            issues.append({
                'type': 'conference_type_error',
                'severity': 'high',
                'file': file_path,
                'line_estimate': self._find_line_number(content, 'eventHangout'),
                'description': 'Using deprecated eventHangout instead of hangoutsMeet',
                'suggested_fix': "Change 'eventHangout' to 'hangoutsMeet' in conference type",
                'confidence': 0.95
            })
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ OAuth detection
        if '_is_oauth_calendar' in content:
            # –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –ª–æ–≥–∏–∫–∏
            if 'refresh_token' not in content:
                issues.append({
                    'type': 'oauth_detection_incomplete',
                    'severity': 'medium',
                    'file': file_path,
                    'description': 'OAuth detection may be incomplete - missing refresh_token check',
                    'suggested_fix': 'Add proper refresh_token validation in OAuth detection'
                })
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        try_count = content.count('try:')
        except_count = content.count('except')
        if try_count > 0 and except_count / try_count < 0.8:
            issues.append({
                'type': 'insufficient_error_handling',
                'severity': 'medium',
                'file': file_path,
                'description': f'Insufficient error handling: {try_count} try blocks, {except_count} except blocks',
                'suggested_fix': 'Add comprehensive error handling for all try blocks'
            })
        
        return issues
    
    def _find_line_number(self, content: str, pattern: str) -> int:
        """–ù–∞–π—Ç–∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º"""
        lines = content.split('\n')
        for i, line in enumerate(lines, 1):
            if pattern in line:
                return i
        return 0
    
    def _analyze_problem_description(self, description: str) -> list:
        """–ê–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
        
        issues = []
        
        # –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        problem_indicators = {
            'Invalid conference type value': {
                'type': 'conference_type_error',
                'severity': 'high',
                'fix': 'Change eventHangout to hangoutsMeet'
            },
            'Service accounts cannot invite attendees': {
                'type': 'service_account_attendee_error', 
                'severity': 'high',
                'fix': 'Remove attendee invitations for Service Account'
            },
            'events not created': {
                'type': 'event_creation_failure',
                'severity': 'critical',
                'fix': 'Fix calendar event creation logic'
            },
            'Google Meet —Å—Å—ã–ª–∫–∏ –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è': {
                'type': 'meet_link_failure',
                'severity': 'high',
                'fix': 'Fix Google Meet conference creation'
            },
            'OAuth vs Service Account': {
                'type': 'oauth_detection_issue',
                'severity': 'medium',
                'fix': 'Improve calendar type detection'
            }
        }
        
        for indicator, issue_config in problem_indicators.items():
            if indicator.lower() in description.lower():
                issue = {
                    'type': issue_config['type'],
                    'severity': issue_config['severity'],
                    'source': 'problem_description',
                    'description': f"Problem reported: {indicator}",
                    'suggested_fix': issue_config['fix']
                }
                issues.append(issue)
        
        return issues
    
    def _prioritize_issues(self, all_issues: list) -> list:
        """–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã"""
        
        severity_order = {'critical': 4, 'high': 3, 'medium': 2, 'low': 1}
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
        prioritized = sorted(all_issues, 
                           key=lambda x: severity_order.get(x['severity'], 1), 
                           reverse=True)
        
        # –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        for i, issue in enumerate(prioritized, 1):
            issue['priority'] = i
            
        return prioritized
    
    def _generate_specific_fixes(self, issues: list) -> dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        
        fixes = {}
        
        for issue in issues:
            issue_type = issue['type']
            
            if issue_type == 'conference_type_error':
                fixes['fix_conference_type'] = {
                    'priority': 1,
                    'file': 'src/services/google_calendar_dual.py',
                    'action': 'replace_text',
                    'search': "'type': 'eventHangout'",
                    'replace': "'type': 'hangoutsMeet'",
                    'description': 'Fix conference type from eventHangout to hangoutsMeet',
                    'risk': 'low',
                    'estimated_time': '5 minutes'
                }
            
            elif issue_type == 'service_account_attendee_error':
                fixes['fix_service_account_attendees'] = {
                    'priority': 2,
                    'file': 'src/services/google_calendar_dual.py',
                    'action': 'conditional_logic',
                    'description': 'Add condition to skip attendees for Service Account calendars',
                    'risk': 'medium',
                    'estimated_time': '15 minutes'
                }
            
            elif issue_type == 'oauth_detection_issue':
                fixes['improve_oauth_detection'] = {
                    'priority': 3,
                    'file': 'src/services/google_calendar_dual.py',
                    'action': 'enhance_logic',
                    'description': 'Improve OAuth detection with refresh_token validation',
                    'risk': 'medium',
                    'estimated_time': '20 minutes'
                }
        
        return fixes
    
    def _create_action_plan(self, issues: list, fixes: dict) -> dict:
        """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π"""
        
        critical_issues = [i for i in issues if i['severity'] == 'critical']
        high_issues = [i for i in issues if i['severity'] == 'high']
        
        plan = {
            'total_issues': len(issues),
            'critical_issues': len(critical_issues),
            'high_issues': len(high_issues),
            'estimated_total_time': '1-2 hours',
            'steps': []
        }
        
        step_num = 1
        
        # –®–∞–≥ 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if 'fix_conference_type' in fixes:
            plan['steps'].append({
                'step': step_num,
                'title': 'Fix Conference Type',
                'description': fixes['fix_conference_type']['description'],
                'action': 'Apply conference type fix',
                'files': [fixes['fix_conference_type']['file']],
                'risk': 'low',
                'time': '5 minutes'
            })
            step_num += 1
        
        # –®–∞–≥ 2: Service Account –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if 'fix_service_account_attendees' in fixes:
            plan['steps'].append({
                'step': step_num,
                'title': 'Fix Service Account Attendees',
                'description': fixes['fix_service_account_attendees']['description'],
                'action': 'Modify attendee logic for Service Accounts',
                'files': [fixes['fix_service_account_attendees']['file']],
                'risk': 'medium',
                'time': '15 minutes'
            })
            step_num += 1
        
        # –®–∞–≥ 3: OAuth —É–ª—É—á—à–µ–Ω–∏—è
        if 'improve_oauth_detection' in fixes:
            plan['steps'].append({
                'step': step_num,
                'title': 'Improve OAuth Detection',
                'description': fixes['improve_oauth_detection']['description'],
                'action': 'Enhance OAuth vs Service Account detection',
                'files': [fixes['improve_oauth_detection']['file']],
                'risk': 'medium',
                'time': '20 minutes'
            })
            step_num += 1
        
        # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        plan['steps'].append({
            'step': step_num,
            'title': 'Test and Deploy',
            'description': 'Test changes and deploy to production',
            'action': 'Deploy and test calendar functionality',
            'risk': 'low',
            'time': '30 minutes'
        })
        
        return plan


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    project_path = "/Users/evgenii/meeting-scheduler-bot"
    
    problem_description = """
    Telegram –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π:
    1. –°–æ–±—ã—Ç–∏—è –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö Google
    2. –û—à–∏–±–∫–∏ "Invalid conference type value" 
    3. –û—à–∏–±–∫–∏ "Service accounts cannot invite attendees"
    4. Google Meet —Å—Å—ã–ª–∫–∏ –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è
    5. –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º OAuth vs Service Account –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
    
    –õ–æ–≥–∏ Render –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —ç—Ç–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π.
    """
    
    try:
        # –°–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É
        diagnostic = SimpleCalendarDiagnostic(project_path)
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        results = diagnostic.run_diagnosis(problem_description)
        
        # –í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*80)
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–ü–†–û–©–ï–ù–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("="*80)
        
        print(f"\nüìã –°–µ—Å—Å–∏—è: {diagnostic.session_id}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        issues = results.get('prioritized_issues', [])
        print(f"\nüîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}")
        
        for issue in issues[:5]:  # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-5 –ø—Ä–æ–±–ª–µ–º
            print(f"\n   üêõ {issue.get('type', 'unknown')}")
            print(f"      –í–∞–∂–Ω–æ—Å—Ç—å: {issue.get('severity', 'unknown')}")
            print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {issue.get('description', 'no description')}")
            print(f"      –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {issue.get('suggested_fix', 'no fix suggested')}")
        
        # –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
        action_plan = results.get('action_plan', {})
        if action_plan.get('steps'):
            print(f"\nüìã –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:")
            print(f"   –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {action_plan.get('total_issues', 0)}")
            print(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {action_plan.get('critical_issues', 0)}")
            print(f"   –í—ã—Å–æ–∫–æ–π –≤–∞–∂–Ω–æ—Å—Ç–∏: {action_plan.get('high_issues', 0)}")
            print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {action_plan.get('estimated_total_time', 'unknown')}")
            
            for step in action_plan['steps']:
                print(f"\n   –®–∞–≥ {step['step']}: {step['title']}")
                print(f"      {step['description']}")
                print(f"      –í—Ä–µ–º—è: {step.get('time', 'unknown')}")
                print(f"      –†–∏—Å–∫: {step.get('risk', 'unknown')}")
        
        # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        fixes = results.get('suggested_fixes', {})
        if fixes:
            print(f"\nüîß –ö–û–ù–ö–†–ï–¢–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
            for fix_name, fix_details in fixes.items():
                print(f"\n   {fix_name}:")
                print(f"      –§–∞–π–ª: {fix_details.get('file', 'unknown')}")
                print(f"      –î–µ–π—Å—Ç–≤–∏–µ: {fix_details.get('description', 'unknown')}")
                if 'search' in fix_details and 'replace' in fix_details:
                    print(f"      –ó–∞–º–µ–Ω–∏—Ç—å: '{fix_details['search']}'")
                    print(f"      –ù–∞: '{fix_details['replace']}'")
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report_file = Path(project_path) / "simple_diagnostic_report.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        print("\n‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        return results
        
    except Exception as e:
        logger.error(f"‚ùå Diagnostic system failed: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise


if __name__ == "__main__":
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    results = main()