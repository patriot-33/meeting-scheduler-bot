#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø v4.0
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º:
1. –°–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ 3 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –∫–∞–∂–¥–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ 
2. –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è 2 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
3. Google Meet –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
"""

import json
import os
import shutil
from pathlib import Path
from datetime import datetime
from diagnostic_system_v4 import MandatoryHistoryPersistence

class CriticalFixesImplementation:
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.history = MandatoryHistoryPersistence(project_root)
        
    def analyze_duplication_root_cause(self) -> dict:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.history._log("=== –ê–ù–ê–õ–ò–ó –ö–û–†–ù–ï–í–û–ô –ü–†–ò–ß–ò–ù–´ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø ===")
        
        analysis = {
            "dual_calendar_service": self.analyze_dual_calendar_implementation(),
            "meeting_service_calls": self.analyze_meeting_service_calls(),
            "event_creation_flow": self.trace_event_creation_flow()
        }
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑
        analysis_file = self.history.history_root / "duplication_root_cause_analysis.json"
        with open(analysis_file, 'w', encoding='utf-8') as f:
            json.dump(analysis, f, indent=2, ensure_ascii=False)
        
        self.history._log(f"–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {analysis_file}")
        return analysis
    
    def analyze_dual_calendar_implementation(self) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ DualCalendarCreator"""
        dual_file = self.project_root / "src" / "services" / "google_calendar_dual.py"
        
        if not dual_file.exists():
            return {"error": "google_calendar_dual.py not found"}
        
        with open(dual_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å create_meeting_in_both_calendars
        analysis = {
            "method_exists": "create_meeting_in_both_calendars" in content,
            "creates_in_manager_calendar": "manager_calendar_id" in content,
            "creates_in_owner_calendar": "owner_calendar_id" in content,
            "uses_same_calendar_twice": False,
            "fallback_strategies": content.count("_create_event_with_fallback")
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –æ–¥–∏–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–≤–∞–∂–¥—ã
        lines = content.split('\n')
        for i, line in enumerate(lines):
            if "owner_calendar_id or manager_calendar_id" in line:
                analysis["uses_same_calendar_twice"] = True
                analysis["problematic_line"] = i + 1
                break
        
        return analysis
    
    def analyze_meeting_service_calls(self) -> dict:
        """–ê–Ω–∞–ª–∏–∑ –≤—ã–∑–æ–≤–æ–≤ –≤ MeetingService"""
        meeting_file = self.project_root / "src" / "services" / "meeting_service.py"
        
        with open(meeting_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞–π—Ç–∏ –≤—Å–µ –≤—ã–∑–æ–≤—ã —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á
        dual_calendar_calls = []
        single_calendar_calls = []
        
        lines = content.split('\n')
        for i, line in enumerate(lines, 1):
            if "dual_calendar_creator.create_meeting_in_both_calendars" in line:
                dual_calendar_calls.append(i)
            elif "calendar_service.create_meeting" in line:
                single_calendar_calls.append(i)
        
        return {
            "dual_calendar_calls": dual_calendar_calls,
            "single_calendar_calls": single_calendar_calls,
            "total_creation_calls": len(dual_calendar_calls) + len(single_calendar_calls)
        }
    
    def trace_event_creation_flow(self) -> dict:
        """–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
        flow = {
            "entry_point": "MeetingService.create_meeting",
            "steps": [
                "1. MeetingService.create_meeting() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è",
                "2. dual_calendar_creator.create_meeting_in_both_calendars()",
                "3. –°–æ–∑–¥–∞–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ –≤ manager –∫–∞–ª–µ–Ω–¥–∞—Ä–µ",
                "4. –°–æ–∑–¥–∞–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ –≤ owner –∫–∞–ª–µ–Ω–¥–∞—Ä–µ (–µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è)",
                "5. Fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"
            ],
            "potential_duplication_points": [
                "–ï—Å–ª–∏ manager_calendar_id == owner_calendar_id, —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –¥–≤–∞–∂–¥—ã",
                "Fallback –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è",
                "–û—à–∏–±–∫–∏ –≤ _create_event_with_fallback –º–æ–≥—É—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø–æ–ø—ã—Ç–∫–∞–º"
            ]
        }
        
        return flow
    
    def fix_event_duplication(self) -> dict:
        """–û–°–ù–û–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±—Ä–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π"""
        self.history._log("=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –°–û–ë–´–¢–ò–ô ===")
        
        # –°–æ–∑–¥–∞—Ç—å —Ç–æ—á–∫—É –æ—Ç–∫–∞—Ç–∞
        dual_file = self.project_root / "src" / "services" / "google_calendar_dual.py"
        rollback_id = self.create_rollback_point(str(dual_file))
        
        with open(dual_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –≤ –æ–±–æ–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö
        fixed_content = self.fix_both_calendars_logic(content)
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –£–±—Ä–∞—Ç—å fallback –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        fixed_content = self.fix_fallback_duplication(fixed_content)
        
        # –ó–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(dual_file, 'w', encoding='utf-8') as f:
            f.write(fixed_content)
        
        self.history._log("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ google_calendar_dual.py")
        
        return {
            "status": "fixed",
            "file": str(dual_file),
            "rollback_id": rollback_id,
            "fixes_applied": [
                "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤ –æ–±–æ–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö",
                "–£–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö"
            ]
        }
    
    def fix_both_calendars_logic(self, content: str) -> str:
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –≤ –æ–±–æ–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö"""
        
        # –ù–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ create_meeting_in_both_calendars
        old_line = "owner_calendar_id or manager_calendar_id"
        new_line = "owner_calendar_id"
        
        if old_line in content:
            content = content.replace(old_line, new_line)
            self.history._log("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è owner'–∞")
        
        # –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
        old_check = "if owner_calendar_id and owner_calendar_id != manager_calendar_id:"
        new_check = """if owner_calendar_id and owner_calendar_id != manager_calendar_id:
            # Ensure we don't create duplicate events in the same calendar"""
        
        if old_check in content and new_check not in content:
            content = content.replace(old_check, new_check)
            self.history._log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π")
        
        return content
    
    def fix_fallback_duplication(self, content: str) -> str:
        """–£–±—Ä–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö"""
        
        # –£–ø—Ä–æ—Å—Ç–∏—Ç—å _create_event_with_fallback - –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π fallback
        old_complex_fallback = '''        # Strategy 2: Service Account specific approach
        elif has_conference and not is_oauth_calendar:
            logger.info("üîÑ Using Service Account Google Meet creation...")
            
            for version in [1, 0]:  # Try both conference data versions
                try:
                    logger.info(f"üîÑ Attempting Google Meet creation with conferenceDataVersion={version}")
                    
                    if version == 0:
                        # For version 0, try without conferenceDataVersion parameter
                        event = self.calendar_service._service.events().insert(
                            calendarId=calendar_id,
                            body=event_data
                        ).execute()
                    else:
                        # For version 1, explicitly set conferenceDataVersion
                        event = self.calendar_service._service.events().insert(
                            calendarId=calendar_id,
                            body=event_data,
                            conferenceDataVersion=version
                        ).execute()
                    
                    # Check if Google Meet was actually created
                    if event.get('conferenceData') and event.get('conferenceData').get('conferenceId'):
                        logger.info(f"‚úÖ SUCCESS: Service Account created Google Meet (version {version})")
                        logger.info(f"üîó Google Meet ID: {event.get('conferenceData').get('conferenceId')}")
                        return event
                    else:
                        logger.warning(f"‚ö†Ô∏è Event created but no Google Meet generated (version {version})")
                        
                except Exception as version_error:
                    logger.warning(f"‚ùå conferenceDataVersion {version} failed: {version_error}")
                    continue'''
        
        new_simple_fallback = '''        # Strategy 2: Service Account approach - single attempt
        elif has_conference and not is_oauth_calendar:
            logger.info("üîÑ Using Service Account Google Meet creation...")
            try:
                event = self.calendar_service._service.events().insert(
                    calendarId=calendar_id,
                    body=event_data,
                    conferenceDataVersion=1
                ).execute()
                
                if event.get('conferenceData'):
                    logger.info(f"‚úÖ SUCCESS: Service Account created Google Meet")
                    return event
                    
            except Exception as sa_error:
                logger.warning(f"‚ùå Service Account Google Meet failed: {sa_error}")'''
        
        if old_complex_fallback in content:
            content = content.replace(old_complex_fallback, new_simple_fallback)
            self.history._log("‚úÖ –£–ø—Ä–æ—â–µ–Ω–∞ Service Account —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
        
        return content
    
    def fix_deletion_logic(self) -> dict:
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è - —É–±—Ä–∞—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ"""
        self.history._log("=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ì–ò–ö–ò –£–î–ê–õ–ï–ù–ò–Ø ===")
        
        # –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤ google_calendar_dual.py
        dual_file = self.project_root / "src" / "services" / "google_calendar_dual.py"
        rollback_id = self.create_rollback_point(str(dual_file))
        
        with open(dual_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
        new_deletion_method = '''
    def delete_all_events_for_meeting(self, meeting_data: dict) -> dict:
        """Delete ALL events created for a meeting (handles multiple events per calendar)"""
        results = {
            'success': False,
            'deleted_count': 0,
            'errors': []
        }
        
        # Get all possible event IDs
        event_ids = []
        if meeting_data.get('google_event_id'):
            event_ids.append(meeting_data['google_event_id'])
        if meeting_data.get('google_manager_event_id'):
            event_ids.append(meeting_data['google_manager_event_id'])
        if meeting_data.get('google_owner_event_id'):
            event_ids.append(meeting_data['google_owner_event_id'])
        
        # Remove duplicates
        event_ids = list(set(event_ids))
        
        calendars = []
        if meeting_data.get('manager_calendar_id'):
            calendars.append(meeting_data['manager_calendar_id'])
        if meeting_data.get('owner_calendar_id'):
            calendars.append(meeting_data['owner_calendar_id'])
        
        # Try to delete each event from each calendar
        for calendar_id in calendars:
            for event_id in event_ids:
                try:
                    self.calendar_service._service.events().delete(
                        calendarId=calendar_id,
                        eventId=event_id
                    ).execute()
                    results['deleted_count'] += 1
                    logger.info(f"‚úÖ Deleted event {event_id} from calendar {calendar_id}")
                except Exception as e:
                    # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º 404 –æ—à–∏–±–∫–∏ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                    if "404" not in str(e):
                        results['errors'].append(f"Failed to delete {event_id} from {calendar_id}: {e}")
        
        results['success'] = results['deleted_count'] > 0
        return results
'''
        
        # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º –º–µ—Ç–æ–¥–æ–º –≤ –∫–ª–∞—Å—Å–µ
        insert_position = content.rfind("    def _delete_from_calendar")
        if insert_position != -1:
            content = content[:insert_position] + new_deletion_method + "\n" + content[insert_position:]
            self.history._log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ delete_all_events_for_meeting")
        
        # –ó–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(dual_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return {
            "status": "fixed",
            "file": str(dual_file),
            "rollback_id": rollback_id,
            "new_method": "delete_all_events_for_meeting"
        }
    
    def fix_google_meet_creation(self) -> dict:
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ Google Meet"""
        self.history._log("=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï GOOGLE MEET ===")
        
        dual_file = self.project_root / "src" / "services" / "google_calendar_dual.py"
        
        with open(dual_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ OAuth-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ conferenceData —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        
        meet_fixes = []
        
        # 1. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –±–∞–∑–æ–≤–∞—è conferenceData –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
        old_conference_data = '''            'conferenceData': {
                'createRequest': {
                    'requestId': f"meet-{int(datetime.now().timestamp())}-{abs(hash(manager_calendar_id))}",
                    'conferenceSolutionKey': {
                        'type': 'hangoutsMeet'
                    }
                }
            },'''
        
        new_conference_data = '''            'conferenceData': {
                'createRequest': {
                    'requestId': f"meet-{int(datetime.now().timestamp())}-{abs(hash(manager_calendar_id))}"
                }
            },'''
        
        if old_conference_data in content:
            content = content.replace(old_conference_data, new_conference_data)
            meet_fixes.append("–£–ø—Ä–æ—â–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è conferenceData")
            self.history._log("‚úÖ –£–ø—Ä–æ—â–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è conferenceData")
        
        # 2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ OAuth –ª–æ–≥–∏–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
        oauth_check = "is_oauth_calendar = self._is_oauth_calendar(calendar_id)"
        if oauth_check not in content:
            self.history._log("‚ö†Ô∏è OAuth detection logic —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ó–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        with open(dual_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return {
            "status": "reviewed_and_fixed",
            "fixes_applied": meet_fixes
        }
    
    def create_rollback_point(self, file_path: str) -> str:
        """–°–æ–∑–¥–∞—Ç—å —Ç–æ—á–∫—É –æ—Ç–∫–∞—Ç–∞"""
        rollback_id = self.history._generate_id("rollback")
        backup_dir = self.history.history_root / "rollback_points" / rollback_id
        backup_dir.mkdir(parents=True, exist_ok=True)
        
        if Path(file_path).exists():
            backup_file = backup_dir / Path(file_path).name
            shutil.copy2(file_path, backup_file)
            
        return rollback_id
    
    def apply_all_critical_fixes(self) -> dict:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        self.history._log("üéØ === –ü–†–ò–ú–ï–ù–Ø–Æ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===")
        
        results = {
            "timestamp": datetime.now().isoformat(),
            "fixes": [],
            "rollback_points": []
        }
        
        try:
            # 1. –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã
            self.history._log("–≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã")
            root_cause = self.analyze_duplication_root_cause()
            results["root_cause_analysis"] = root_cause
            
            # 2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
            self.history._log("–≠–¢–ê–ü 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π")
            duplication_fix = self.fix_event_duplication()
            results["fixes"].append(duplication_fix)
            results["rollback_points"].append(duplication_fix["rollback_id"])
            
            # 3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            self.history._log("–≠–¢–ê–ü 3: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è")
            deletion_fix = self.fix_deletion_logic()
            results["fixes"].append(deletion_fix)
            results["rollback_points"].append(deletion_fix["rollback_id"])
            
            # 4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Google Meet
            self.history._log("–≠–¢–ê–ü 4: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Google Meet")
            meet_fix = self.fix_google_meet_creation()
            results["fixes"].append(meet_fix)
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results_file = self.history.history_root / f"critical_fixes_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(results_file, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, ensure_ascii=False)
            
            self.history._log("üéØ === –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´ ===")
            self.history._log(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results_file}")
            
        except Exception as e:
            self.history._log(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}", "ERROR")
            results["error"] = str(e)
        
        return results

if __name__ == "__main__":
    print("üéØ –ó–∞–ø—É—Å–∫–∞—é –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø v4.0")
    print("=" * 60)
    
    project_path = "/Users/evgenii/meeting-scheduler-bot"
    fixes = CriticalFixesImplementation(project_path)
    
    try:
        results = fixes.apply_all_critical_fixes()
        
        print("\n" + "=" * 60)
        print("‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´")
        print(f"üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {len(results.get('fixes', []))}")
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–æ —Ç–æ—á–µ–∫ –æ—Ç–∫–∞—Ç–∞: {len(results.get('rollback_points', []))}")
        
        print("\nüéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        for i, fix in enumerate(results.get('fixes', []), 1):
            print(f"  {i}. {fix.get('status', 'unknown')}: {fix.get('file', 'N/A')}")
        
        if results.get('rollback_points'):
            print("\nüíæ –¢–û–ß–ö–ò –û–¢–ö–ê–¢–ê:")
            for rollback in results['rollback_points']:
                print(f"   - {rollback}")
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        print(traceback.format_exc())