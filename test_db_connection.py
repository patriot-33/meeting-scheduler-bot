#!/usr/bin/env python3
"""
üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –°–ö–†–ò–ü–¢: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
"""

import logging
import sys
import psycopg2
from sqlalchemy import create_engine, text
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render.com
DATABASE_URL = "postgresql://meeting_bot:1ZbNJ4bHtcL3Ji8i8pmfGchOVxx5v94r@dpg-d24ersali9vc73cnfsu0-a.frankfurt-postgres.render.com/meeting_scheduler"

def test_psycopg2_connection():
    """–¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ psycopg2"""
    logger.info("üß™ –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ psycopg2")
    try:
        # –ü–∞—Ä—Å–∏–º URL –¥–ª—è psycopg2
        import urllib.parse
        url = urllib.parse.urlparse(DATABASE_URL)
        
        conn = psycopg2.connect(
            host=url.hostname,
            port=url.port or 5432,
            database=url.path[1:],  # –£–±–∏—Ä–∞–µ–º —Å–ª–µ—à
            user=url.username,
            password=url.password,
            connect_timeout=10
        )
        
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        version = cursor.fetchone()
        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! PostgreSQL –≤–µ—Ä—Å–∏—è: {version[0]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name;
        """)
        tables = cursor.fetchall()
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            logger.info(f"   - {table[0]}")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ psycopg2: {type(e).__name__}: {e}")
        return False

def test_sqlalchemy_connection():
    """–¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SQLAlchemy"""
    logger.info("\nüß™ –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ SQLAlchemy")
    try:
        engine = create_engine(DATABASE_URL, echo=False, pool_pre_ping=True)
        
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1"))
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SQLAlchemy —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
            result = conn.execute(text("""
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns
                WHERE table_name = 'users'
                ORDER BY ordinal_position;
            """))
            
            columns = result.fetchall()
            if columns:
                logger.info("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã 'users':")
                for col in columns:
                    logger.info(f"   - {col[0]}: {col[1]} (nullable: {col[2]})")
            else:
                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ 'users' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            result = conn.execute(text("SELECT COUNT(*) FROM users"))
            count = result.scalar()
            logger.info(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")
            
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ SQLAlchemy: {type(e).__name__}: {e}")
        return False

def test_database_health():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("\nüß™ –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    try:
        engine = create_engine(DATABASE_URL, echo=False)
        
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∏—Ö —Ä–∞–∑–º–µ—Ä—ã
            result = conn.execute(text("""
                SELECT 
                    schemaname,
                    tablename,
                    pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size
                FROM pg_tables
                WHERE schemaname = 'public'
                ORDER BY tablename;
            """))
            
            tables = result.fetchall()
            logger.info("üìä –†–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü:")
            for schema, table, size in tables:
                logger.info(f"   - {table}: {size}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            result = conn.execute(text("""
                SELECT count(*) 
                FROM pg_stat_activity 
                WHERE datname = current_database();
            """))
            connections = result.scalar()
            logger.info(f"üîå –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {connections}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
            result = conn.execute(text("""
                SELECT COUNT(*) as total,
                       COUNT(CASE WHEN status = 'scheduled' THEN 1 END) as scheduled,
                       COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed,
                       COUNT(CASE WHEN status = 'cancelled' THEN 1 END) as cancelled
                FROM meetings;
            """))
            
            stats = result.fetchone()
            logger.info(f"üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—Ç—Ä–µ—á:")
            logger.info(f"   - –í—Å–µ–≥–æ: {stats[0]}")
            logger.info(f"   - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats[1]}")
            logger.info(f"   - –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats[2]}")
            logger.info(f"   - –û—Ç–º–µ–Ω–µ–Ω–æ: {stats[3]}")
            
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ë–î: {type(e).__name__}: {e}")
        return False

def main():
    logger.info("üöÄ –ù–ê–ß–ê–õ–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    logger.info(f"üìç URL: {DATABASE_URL.replace(DATABASE_URL.split('@')[0].split('://')[1], '***:***')}")
    logger.info(f"üïê –í—Ä–µ–º—è: {datetime.now()}")
    
    results = []
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    results.append(("psycopg2", test_psycopg2_connection()))
    results.append(("SQLAlchemy", test_sqlalchemy_connection()))
    results.append(("Health Check", test_database_health()))
    
    # –ò—Ç–æ–≥–∏
    logger.info("\nüìä –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    success_count = sum(1 for _, success in results if success)
    
    for test_name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        logger.info(f"   {test_name}: {status}")
    
    logger.info(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if success_count == len(results):
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return 0
    else:
        logger.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!")
        return 1

if __name__ == "__main__":
    sys.exit(main())