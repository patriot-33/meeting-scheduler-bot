#!/usr/bin/env python3
"""
üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –°–ö–†–ò–ü–¢: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
"""

import os
import sys
import logging
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(filename)s:%(lineno)d - %(message)s',
    handlers=[
        logging.FileHandler('diagnostic_run.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

def log_system_state():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("="*60)
    logger.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö MEETING SCHEDULER BOT")
    logger.info("="*60)
    logger.info(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
    logger.info(f"üìç –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    logger.info(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    logger.info(f"üìÅ –ü—É—Ç—å Python: {sys.executable}")
    
def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    logger.info("\nüìã –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    
    # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    critical_vars = {
        'TELEGRAM_BOT_TOKEN': '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞',
        'DATABASE_URL': 'URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        'ADMIN_TELEGRAM_IDS': 'ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'
    }
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    optional_vars = {
        'GOOGLE_CALENDAR_ID_1': 'Google Calendar ID 1',
        'GOOGLE_CALENDAR_ID_2': 'Google Calendar ID 2', 
        'GOOGLE_SERVICE_ACCOUNT_JSON': 'Google Service Account JSON',
        'GOOGLE_SERVICE_ACCOUNT_FILE': 'Google Service Account File',
        'TIMEZONE': '–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å',
        'LOG_LEVEL': '–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
        'ENVIRONMENT': '–û–∫—Ä—É–∂–µ–Ω–∏–µ'
    }
    
    missing_critical = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ
    for var, desc in critical_vars.items():
        value = os.getenv(var)
        if value:
            # –ú–∞—Å–∫–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if 'TOKEN' in var or 'URL' in var:
                masked = value[:10] + '***' + value[-5:] if len(value) > 15 else '***'
                logger.info(f"   ‚úÖ {var}: {masked} ({desc})")
            else:
                logger.info(f"   ‚úÖ {var}: {value} ({desc})")
        else:
            logger.error(f"   ‚ùå {var}: –ù–ï –ó–ê–î–ê–ù–ê! ({desc})")
            missing_critical.append(var)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ
    logger.info("\nüìã –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï:")
    for var, desc in optional_vars.items():
        value = os.getenv(var)
        if value:
            if 'JSON' in var:
                logger.info(f"   ‚úÖ {var}: [JSON –¥–∞–Ω–Ω—ã–µ] ({desc})")
            else:
                logger.info(f"   ‚úÖ {var}: {value} ({desc})")
        else:
            logger.info(f"   ‚ö™ {var}: –Ω–µ –∑–∞–¥–∞–Ω–∞ ({desc})")
    
    return len(missing_critical) == 0, missing_critical

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π"""
    logger.info("\nüì¶ –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–ê –ú–û–î–£–õ–ï–ô:")
    
    modules_to_test = [
        ('config', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'),
        ('database', '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'),
        ('main', '–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å'),
        ('handlers.common', '–û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏'),
        ('handlers.registration', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'),
        ('handlers.manager', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞'),
        ('handlers.owner', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞'),
        ('services.meeting_service', '–°–µ—Ä–≤–∏—Å –≤—Å—Ç—Ä–µ—á'),
        ('services.google_calendar', 'Google Calendar'),
        ('utils.scheduler', '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫')
    ]
    
    import_errors = []
    
    for module_name, desc in modules_to_test:
        try:
            __import__(module_name)
            logger.info(f"   ‚úÖ {module_name}: {desc}")
        except Exception as e:
            logger.error(f"   ‚ùå {module_name}: {type(e).__name__}: {e}")
            import_errors.append((module_name, str(e)))
    
    return len(import_errors) == 0, import_errors

def test_config():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    logger.info("\n‚öôÔ∏è –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
    
    try:
        from config import settings
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        logger.info(f"   üì± Telegram Token: {'‚úÖ –ó–∞–¥–∞–Ω' if settings.telegram_bot_token else '‚ùå –ù–ï –ó–ê–î–ê–ù'}")
        logger.info(f"   üóÑÔ∏è Database URL: {'‚úÖ –ó–∞–¥–∞–Ω' if settings.database_url else '‚ùå –ù–ï –ó–ê–î–ê–ù'}")
        logger.info(f"   üë§ Admin IDs: {settings.admin_ids_list}")
        logger.info(f"   üåç Timezone: {settings.timezone}")
        logger.info(f"   üìä Log Level: {settings.log_level}")
        logger.info(f"   üè≠ Environment: {settings.environment}")
        logger.info(f"   üóìÔ∏è Google Calendar Enabled: {settings.google_calendar_enabled}")
        logger.info(f"   üîÑ Fallback Mode: {settings.fallback_mode}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        errors = []
        if not settings.telegram_bot_token:
            errors.append("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
        if not settings.admin_ids_list:
            errors.append("ADMIN_TELEGRAM_IDS –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
            
        if errors:
            for error in errors:
                logger.error(f"   ‚ùå {error}")
            return False, errors
        else:
            logger.info("   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
            return True, []
            
    except Exception as e:
        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {type(e).__name__}: {e}")
        return False, [str(e)]

def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    logger.info("\nüóÑÔ∏è –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•:")
    
    try:
        from database import engine, get_db, Base
        from sqlalchemy import text
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1"))
            logger.info("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            result = conn.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """))
            tables = [row[0] for row in result]
            logger.info(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            for table in tables:
                logger.info(f"      - {table}")
                
        return True, []
        
    except Exception as e:
        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {type(e).__name__}: {e}")
        return False, [str(e)]

async def test_bot_startup():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê:")
    
    try:
        from telegram import Bot
        from config import settings
        
        if not settings.telegram_bot_token:
            logger.error("   ‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω!")
            return False, ["–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω"]
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = Bot(token=settings.telegram_bot_token)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        logger.info(f"   ‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
        logger.info(f"      - ID: {bot_info.id}")
        logger.info(f"      - –ò–º—è: {bot_info.first_name}")
        logger.info(f"      - Can join groups: {bot_info.can_join_groups}")
        logger.info(f"      - Can read all messages: {bot_info.can_read_all_group_messages}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url:
            logger.info(f"   üîó Webhook: {webhook_info.url}")
        else:
            logger.info("   üîó Webhook: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (polling mode)")
            
        await bot.close()
        return True, []
        
    except Exception as e:
        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {type(e).__name__}: {e}")
        return False, [str(e)]

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    log_system_state()
    
    results = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    success, missing = check_environment()
    results.append(("Environment Variables", success, missing))
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    success, errors = test_imports()
    results.append(("Module Imports", success, errors))
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    success, errors = test_config()
    results.append(("Configuration", success, errors))
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    success, errors = test_database_connection()
    results.append(("Database Connection", success, errors))
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞
    success, errors = await test_bot_startup()
    results.append(("Bot Startup", success, errors))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "="*60)
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    logger.info("="*60)
    
    total_success = sum(1 for _, success, _ in results if success)
    
    for test_name, success, errors in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        logger.info(f"{test_name}: {status}")
        if errors and not success:
            for error in errors:
                logger.info(f"   - {error}")
    
    logger.info(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {total_success}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if total_success == len(results):
        logger.info("\n‚úÖ –ë–û–¢ –ì–û–¢–û–í –ö –ó–ê–ü–£–°–ö–£!")
        logger.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π: python src/main.py")
    else:
        logger.error("\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        logger.error("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        logger.info("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        env_test = next((r for r in results if r[0] == "Environment Variables"), None)
        if env_test and not env_test[1]:
            logger.info("1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example:")
            logger.info("   cp .env.example .env")
            logger.info("2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env —Ñ–∞–π–ª–µ")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        bot_test = next((r for r in results if r[0] == "Bot Startup"), None)
        if bot_test and not bot_test[1]:
            logger.info("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å TELEGRAM_BOT_TOKEN")
            logger.info("4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ @BotFather")
    
    logger.info("\nüìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: diagnostic_run.log")
    
    return total_success == len(results)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    success = asyncio.run(main())
    sys.exit(0 if success else 1)