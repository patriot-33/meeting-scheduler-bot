#!/usr/bin/env python3
"""
ü§ñ TEST BOT LAUNCHER - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—Å–∏–ª–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import sys
import os
import logging
from pathlib import Path
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def setup_enhanced_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–∏–ª–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ª–æ–≥–∞ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    log_filename = f"test_bot_{timestamp}.log"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s - %(name)s - %(levelname)s - %(filename)s:%(lineno)d - %(funcName)s - %(message)s',
        handlers=[
            logging.FileHandler(log_filename, encoding='utf-8'),
            logging.FileHandler('test_session.log', encoding='utf-8'),  # –û–±—â–∏–π —Ñ–∞–π–ª
            logging.StreamHandler(sys.stdout)  # –í –∫–æ–Ω—Å–æ–ª—å
        ],
        force=True  # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    logging.getLogger('telegram').setLevel(logging.INFO)  # –ú–µ–Ω—å—à–µ —à—É–º–∞ –æ—Ç telegram
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('googleapiclient').setLevel(logging.INFO)
    
    # –ù–∞—à–∏ –º–æ–¥—É–ª–∏ - –ø–æ–ª–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
    logging.getLogger('handlers').setLevel(logging.DEBUG)
    logging.getLogger('services').setLevel(logging.DEBUG)
    logging.getLogger('utils').setLevel(logging.DEBUG)
    logging.getLogger('database').setLevel(logging.DEBUG)
    
    logger = logging.getLogger(__name__)
    logger.info(f"üöÄ –¢–ï–°–¢–û–í–ê–Ø –°–ï–°–°–ò–Ø –ë–û–¢–ê –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø")
    logger.info(f"üìã –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {log_filename}")
    logger.info(f"üìã –û–±—â–∏–π –ª–æ–≥: test_session.log")
    logger.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
    logger.info("="*80)
    
    return log_filename

def check_configuration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    logger = logging.getLogger(__name__)
    
    try:
        from config import settings, validate_configuration, print_configuration_summary
        
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        # –í—ã–≤–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print_configuration_summary()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        is_valid, errors = validate_configuration()
        
        if not is_valid:
            logger.error("‚ùå –û–®–ò–ë–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
            for error in errors:
                logger.error(f"   - {error}")
            return False
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def log_system_environment():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
    logger = logging.getLogger(__name__)
    
    logger.info("üñ•Ô∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï:")
    logger.info(f"   Python: {sys.version}")
    logger.info(f"   Platform: {sys.platform}")
    logger.info(f"   Working directory: {os.getcwd()}")
    logger.info(f"   Script path: {__file__}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    important_files = [
        'src/main.py',
        'src/config.py', 
        'src/database.py',
        'meeting_scheduler.db',
        '.env'
    ]
    
    logger.info("üìÅ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í:")
    for file_path in important_files:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            logger.info(f"   ‚úÖ {file_path} ({size} bytes)")
        else:
            logger.info(f"   ‚ùå {file_path} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
    env_vars = [
        'TELEGRAM_BOT_TOKEN',
        'DATABASE_URL', 
        'ENVIRONMENT',
        'DEBUG',
        'GOOGLE_CALENDAR_ENABLED'
    ]
    
    logger.info("üîë –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    for var in env_vars:
        value = os.getenv(var)
        if value:
            if 'TOKEN' in var or 'KEY' in var:
                # –ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
                masked = value[:8] + "..." + value[-4:] if len(value) > 12 else "***"
                logger.info(f"   {var}: {masked}")
            else:
                logger.info(f"   {var}: {value}")
        else:
            logger.info(f"   {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

async def run_test_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    logger = logging.getLogger(__name__)
    
    try:
        logger.info("ü§ñ –ó–ê–ü–£–°–ö TELEGRAM –ë–û–¢–ê...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º main
        from main import main
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º main() —Ñ—É–Ω–∫—Ü–∏—é...")
        await main()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
        logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:")
        logger.error(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        logger.error(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        logger.error(f"   –¢—Ä–µ–π—Å–±–µ–∫:")
        import traceback
        logger.error(traceback.format_exc())
        raise

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    print("üõ°Ô∏è –°–ò–°–¢–ï–ú–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø MEETING-SCHEDULER-BOT")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_file = setup_enhanced_logging()
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    log_system_environment()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not check_configuration():
        print("‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        sys.exit(1)
    
    print("\nü§ñ –ó–ê–ü–£–°–ö –ë–û–¢–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    print(f"üìã –õ–æ–≥–∏: {log_file}")
    print("üìã –û–±—â–∏–π –ª–æ–≥: test_session.log")
    print("üîç –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        asyncio.run(run_test_bot())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        print(f"\nüìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª–∞—Ö:")
        print(f"   - {log_file}")
        print(f"   - test_session.log")
        print("üèÅ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()