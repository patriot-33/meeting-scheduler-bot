import functools
import logging
from telegram import Update
from telegram.ext import ContextTypes

from src.database import get_db, User, UserRole
from src.config import settings

logger = logging.getLogger(__name__)

def require_registration(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    @functools.wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        
        with get_db() as db:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            
            if not user:
                await update.effective_message.reply_text(
                    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )
                return
            
            if user.role == UserRole.PENDING:
                await update.effective_message.reply_text(
                    "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
                return
        
        return await func(update, context, *args, **kwargs)
    return wrapper

def require_owner(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
    @functools.wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
        if user_id not in settings.admin_ids_list:
            await update.effective_message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü
        with get_db() as db:
            user = db.query(User).filter(
                User.telegram_id == user_id,
                User.role == UserRole.OWNER
            ).first()
            
            if not user:
                await update.effective_message.reply_text(
                    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü –≤ —Å–∏—Å—Ç–µ–º–µ."
                )
                return
        
        return await func(update, context, *args, **kwargs)
    return wrapper

def require_manager(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
    @functools.wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        
        with get_db() as db:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            
            if not user:
                await update.effective_message.reply_text(
                    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )
                return
            
            if user.role not in [UserRole.MANAGER, UserRole.OWNER]:
                await update.effective_message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
                )
                return
        
        return await func(update, context, *args, **kwargs)
    return wrapper

def require_admin(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤–ª–∞–¥–µ–ª—å—Ü–∞)"""
    @functools.wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        
        if user_id not in settings.admin_ids_list:
            await update.effective_message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤."
            )
            return
        
        return await func(update, context, *args, **kwargs)
    return wrapper

def log_user_action(action_name: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    def decorator(func):
        @functools.wraps(func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            user_id = update.effective_user.id
            username = update.effective_user.username or "Unknown"
            
            logger.info(f"üë§ User {user_id} (@{username}) performed action: {action_name}")
            
            try:
                result = await func(update, context, *args, **kwargs)
                logger.info(f"‚úÖ Action {action_name} completed successfully for user {user_id}")
                return result
            except Exception as e:
                logger.error(f"‚ùå Action {action_name} failed for user {user_id}: {e}")
                raise
        
        return wrapper
    return decorator