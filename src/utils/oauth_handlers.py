"""
OAuth callback handlers for web endpoints
"""
import logging
from aiohttp import web as aio_web

logger = logging.getLogger(__name__)

async def oauth_callback_handler(request, application):
    """Handle OAuth callback for manager calendar integration."""
    try:
        from services.oauth_service import oauth_service
        
        # Get authorization code and state from query parameters
        code = request.query.get('code')
        state = request.query.get('state')
        error = request.query.get('error')
        
        if error:
            logger.error(f"OAuth error: {error}")
            return aio_web.Response(
                text="üôÅ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                content_type='text/html; charset=utf-8',
                status=400
            )
        
        if not code or not state:
            return aio_web.Response(
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã OAuth",
                content_type='text/html; charset=utf-8',
                status=400
            )
        
        # Handle OAuth callback
        result = oauth_service.handle_oauth_callback(code, state)
        
        if result['success']:
            # Notify user via Telegram
            telegram_id = result['telegram_id']
            email = result['email']
            
            try:
                await application.bot.send_message(
                    chat_id=telegram_id,
                    text=f"‚úÖ **Google Calendar —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!**\\n\\n"
                         f"üìß –ö–∞–ª–µ–Ω–¥–∞—Ä—å: {email}\\n"
                         f"üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏!\\n\\n"
                         f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /schedule –¥–ª—è –Ω–∞—á–∞–ª–∞.",
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Failed to notify user about successful OAuth: {e}")
            
            return aio_web.Response(
                text="‚úÖ <h1>–ö–∞–ª–µ–Ω–¥–∞—Ä—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!</h1><p>–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á.</p>",
                content_type='text/html',
                charset='utf-8'
            )
        else:
            logger.error(f"OAuth callback failed: {result.get('error')}")
            return aio_web.Response(
                text=f"‚ùå <h1>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h1><p>{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}</p>",
                content_type='text/html',
                charset='utf-8',
                status=400
            )
        
    except Exception as e:
        logger.error(f"OAuth callback handler error: {e}")
        return aio_web.Response(
            text="‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            content_type='text/html',
            charset='utf-8',
            status=500
        )