"""
–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏ –±–∏–∑–Ω–µ—Å–∞
"""
import logging
from datetime import datetime, time, timedelta
from typing import List, Dict, Optional
from sqlalchemy.orm import Session
from sqlalchemy import and_, or_

from src.database import get_db, User, UserRole, OwnerAvailability, OwnerBlockedTime
from src.config import settings

logger = logging.getLogger(__name__)

WEEKDAYS = [
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", 
    "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
]

TIME_SLOTS = [
    "09:00", "10:00", "11:00", "12:00", "13:00", 
    "14:00", "15:00", "16:00", "17:00", "18:00"
]

class OwnerService:
    
    @staticmethod
    def is_owner(user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º"""
        return user_id in settings.admin_ids_list
    
    @staticmethod
    def get_owner_by_telegram_id(telegram_id: int) -> Optional[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ Telegram ID"""
        with get_db() as db:
            return db.query(User).filter(
                and_(User.telegram_id == telegram_id, User.role == UserRole.OWNER)
            ).first()
    
    @staticmethod
    def get_all_owners() -> List[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤"""
        with get_db() as db:
            return db.query(User).filter(User.role == UserRole.OWNER).all()
    
    @staticmethod
    def get_owner_availability(owner_id: int) -> List[OwnerAvailability]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"""
        with get_db() as db:
            return db.query(OwnerAvailability).filter(
                and_(
                    OwnerAvailability.owner_id == owner_id,
                    OwnerAvailability.is_active == True
                )
            ).order_by(OwnerAvailability.day_of_week).all()
    
    @staticmethod
    def set_owner_availability(owner_id: int, day_of_week: int, start_time: str, end_time: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
        try:
            with get_db() as db:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
                db.query(OwnerAvailability).filter(
                    and_(
                        OwnerAvailability.owner_id == owner_id,
                        OwnerAvailability.day_of_week == day_of_week
                    )
                ).delete()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                availability = OwnerAvailability(
                    owner_id=owner_id,
                    day_of_week=day_of_week,
                    start_time=start_time,
                    end_time=end_time,
                    is_active=True
                )
                db.add(availability)
                db.commit()
                
                logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id}: {WEEKDAYS[day_of_week]} {start_time}-{end_time}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    @staticmethod
    def remove_owner_availability(owner_id: int, day_of_week: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
        try:
            with get_db() as db:
                db.query(OwnerAvailability).filter(
                    and_(
                        OwnerAvailability.owner_id == owner_id,
                        OwnerAvailability.day_of_week == day_of_week
                    )
                ).delete()
                db.commit()
                
                logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id}: {WEEKDAYS[day_of_week]}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    @staticmethod
    def block_owner_time(owner_id: int, blocked_from: datetime, blocked_to: datetime, reason: str = "") -> bool:
        """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        try:
            with get_db() as db:
                blocked_time = OwnerBlockedTime(
                    owner_id=owner_id,
                    blocked_from=blocked_from,
                    blocked_to=blocked_to,
                    reason=reason
                )
                db.add(blocked_time)
                db.commit()
                
                logger.info(f"‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤—Ä–µ–º—è –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id}: {blocked_from} - {blocked_to}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return False
    
    @staticmethod
    def get_owner_blocked_times(owner_id: int, start_date: datetime, end_date: datetime) -> List[OwnerBlockedTime]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç"""
        with get_db() as db:
            return db.query(OwnerBlockedTime).filter(
                and_(
                    OwnerBlockedTime.owner_id == owner_id,
                    or_(
                        and_(OwnerBlockedTime.blocked_from >= start_date, OwnerBlockedTime.blocked_from <= end_date),
                        and_(OwnerBlockedTime.blocked_to >= start_date, OwnerBlockedTime.blocked_to <= end_date),
                        and_(OwnerBlockedTime.blocked_from <= start_date, OwnerBlockedTime.blocked_to >= end_date)
                    )
                )
            ).all()
    
    @staticmethod
    def are_both_owners_available(slot_datetime: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–≤–æ–±–æ–¥–Ω—ã –ª–∏ –æ–±–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        owners = OwnerService.get_all_owners()
        if len(owners) < 2:
            logger.warning("‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –º–µ–Ω—å—à–µ 2 –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        for owner in owners[:2]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
            if not OwnerService.is_owner_available_at_time(owner.id, slot_datetime):
                return False
        
        return True
    
    @staticmethod
    def is_owner_available_at_time(owner_id: int, slot_datetime: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è"""
        day_of_week = slot_datetime.weekday()  # 0=Monday, 6=Sunday
        slot_time = slot_datetime.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        with get_db() as db:
            availability = db.query(OwnerAvailability).filter(
                and_(
                    OwnerAvailability.owner_id == owner_id,
                    OwnerAvailability.day_of_week == day_of_week,
                    OwnerAvailability.is_active == True
                )
            ).first()
            
            if not availability:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
            start_time = datetime.strptime(availability.start_time, "%H:%M").time()
            end_time = datetime.strptime(availability.end_time, "%H:%M").time()
            
            if not (start_time <= slot_time <= end_time):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            slot_end = slot_datetime + timedelta(hours=1)  # –í—Å—Ç—Ä–µ—á–∞ –¥–ª–∏—Ç—Å—è 1 —á–∞—Å
            blocked_times = OwnerService.get_owner_blocked_times(
                owner_id, slot_datetime, slot_end
            )
            
            if blocked_times:
                return False
            
            return True
    
    @staticmethod
    def get_available_slots_for_both_owners(days_ahead: int = 14) -> List[datetime]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã, –∫–æ–≥–¥–∞ —Å–≤–æ–±–æ–¥–Ω—ã –æ–±–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        available_slots = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
        for day_offset in range(1, days_ahead + 1):
            check_date = datetime.now() + timedelta(days=day_offset)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ø–Ω-–ø—Ç)
            if check_date.weekday() >= 5:  # –°—É–±–±–æ—Ç–∞=5, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=6
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
            for time_slot in TIME_SLOTS:
                slot_datetime = datetime.combine(
                    check_date.date(),
                    datetime.strptime(time_slot, "%H:%M").time()
                )
                
                if OwnerService.are_both_owners_available(slot_datetime):
                    available_slots.append(slot_datetime)
        
        return available_slots
    
    @staticmethod
    def format_availability_text(owner_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        availability = OwnerService.get_owner_availability(owner_id)
        
        if not availability:
            return "‚ùå –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        
        text = "üìÖ –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:\n\n"
        
        for avail in availability:
            day_name = WEEKDAYS[avail.day_of_week]
            text += f"‚Ä¢ {day_name}: {avail.start_time} - {avail.end_time}\n"
        
        return text