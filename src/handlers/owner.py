"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–∏–∑–Ω–µ—Å–∞
"""
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, CallbackQueryHandler, MessageHandler, filters

from src.database import get_db, User, UserRole, Department, UserStatus
from src.services.owner_service import OwnerService, WEEKDAYS, TIME_SLOTS
from src.utils.decorators import require_owner
from src.config import settings

logger = logging.getLogger(__name__)

# States –¥–ª—è conversation handlers
(SET_AVAILABILITY_DAY, SET_AVAILABILITY_START, SET_AVAILABILITY_END,
 BLOCK_TIME_START, BLOCK_TIME_END, BLOCK_TIME_REASON) = range(6)

@require_owner
async def owner_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
    keyboard = [
        [InlineKeyboardButton("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é", callback_data="owner_availability")],
        [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è", callback_data="owner_block_time")],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏", callback_data="owner_managers")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—Ç—Ä–µ—á", callback_data="owner_stats")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="owner_settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = """
üëë <b>–ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å—Ç—Ä–µ—á
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ –≤—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏ –æ—Ç–¥–µ–ª–æ–≤
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
"""
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')

@require_owner
async def show_availability_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é"""
    user = OwnerService.get_owner_by_telegram_id(update.effective_user.id)
    availability_text = OwnerService.format_availability_text(user.id)
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–µ–Ω—å", callback_data="owner_add_day")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å", callback_data="owner_remove_day")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="owner_availability")],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="owner_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""
üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é</b>

{availability_text}

<i>–í—Å—Ç—Ä–µ—á–∏ –≤–æ–∑–º–æ–∂–Ω—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Å–≤–æ–±–æ–¥–Ω—ã –æ–±–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞</i>
"""
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def start_set_availability(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    keyboard = []
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    for i, day in enumerate(WEEKDAYS):
        keyboard.append([InlineKeyboardButton(day, callback_data=f"set_day_{i}")])
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="owner_availability")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:"
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    return SET_AVAILABILITY_DAY

async def set_availability_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    day_index = int(query.data.split('_')[2])
    
    context.user_data['availability_day'] = day_index
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞
    keyboard = []
    row = []
    for i, time_slot in enumerate(TIME_SLOTS):
        row.append(InlineKeyboardButton(time_slot, callback_data=f"start_time_{time_slot}"))
        if len(row) == 3:  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
            keyboard.append(row)
            row = []
    
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="owner_availability")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤ {WEEKDAYS[day_index]}:"
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return SET_AVAILABILITY_START

async def set_availability_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    start_time = query.data.split('_')[2]
    
    context.user_data['availability_start'] = start_time
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞)
    start_hour = int(start_time.split(':')[0])
    available_end_times = [slot for slot in TIME_SLOTS if int(slot.split(':')[0]) > start_hour]
    
    keyboard = []
    row = []
    for time_slot in available_end_times:
        row.append(InlineKeyboardButton(time_slot, callback_data=f"end_time_{time_slot}"))
        if len(row) == 3:
            keyboard.append(row)
            row = []
    
    if row:
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="owner_availability")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    day_name = WEEKDAYS[context.user_data['availability_day']]
    text = f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤ {day_name} (–Ω–∞—á–∞–ª–æ: {start_time}):"
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return SET_AVAILABILITY_END

async def set_availability_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    end_time = query.data.split('_')[2]
    
    user = OwnerService.get_owner_by_telegram_id(update.effective_user.id)
    day_index = context.user_data['availability_day']
    start_time = context.user_data['availability_start']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    success = OwnerService.set_owner_availability(user.id, day_index, start_time, end_time)
    
    if success:
        day_name = WEEKDAYS[day_index]
        text = f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\nüìÖ {day_name}: {start_time} - {end_time}"
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"
    
    keyboard = [[InlineKeyboardButton("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é", callback_data="owner_availability")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    return ConversationHandler.END

async def show_remove_day_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –¥–Ω–µ–π"""
    user = OwnerService.get_owner_by_telegram_id(update.effective_user.id)
    availability = OwnerService.get_owner_availability(user.id)
    
    if not availability:
        keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="owner_availability")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        return
    
    keyboard = []
    for avail in availability:
        day_name = WEEKDAYS[avail.day_of_week]
        keyboard.append([InlineKeyboardButton(
            f"‚ùå {day_name} ({avail.start_time}-{avail.end_time})",
            callback_data=f"remove_day_{avail.day_of_week}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="owner_availability")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

async def remove_availability_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    day_index = int(query.data.split('_')[2])
    
    user = OwnerService.get_owner_by_telegram_id(update.effective_user.id)
    success = OwnerService.remove_owner_availability(user.id, day_index)
    
    if success:
        day_name = WEEKDAYS[day_index]
        text = f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è {day_name}"
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"
    
    keyboard = [[InlineKeyboardButton("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é", callback_data="owner_availability")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

@require_owner
async def show_managers_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏"""
    with get_db() as db:
        pending_managers = db.query(User).filter(User.role == UserRole.PENDING).count()
        approved_managers = db.query(User).filter(User.role == UserRole.MANAGER).count()
    
    keyboard = [
        [InlineKeyboardButton(f"‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è ({pending_managers})", callback_data="owner_pending")],
        [InlineKeyboardButton(f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ ({approved_managers})", callback_data="owner_approved")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º", callback_data="owner_dept_stats")],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="owner_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = """
üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –û–¥–æ–±—Ä–∏—Ç—å –Ω–æ–≤—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç–¥–µ–ª–∞–º
"""
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def show_pending_managers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    with get_db() as db:
        pending_users = db.query(User).filter(User.role == UserRole.PENDING).all()
        
        if not pending_users:
            keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="owner_managers")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            text = "‚úÖ –ù–µ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è"
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
            return
        
        text = "‚è≥ <b>–û–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è:</b>\n\n"
        keyboard = []
        
        for user in pending_users:
            text += f"üë§ <b>{user.first_name} {user.last_name}</b>\n"
            text += f"üè¢ –û—Ç–¥–µ–ª: {user.department.value}\n"
            text += f"üÜî ID: {user.telegram_id}\n"
            if user.telegram_username:
                text += f"üì± @{user.telegram_username}\n"
            text += "\n"
            
            keyboard.append([
                InlineKeyboardButton(f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å {user.first_name}", callback_data=f"owner_approve_{user.id}"),
                InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"owner_reject_{user.id}")
            ])
        
        keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="owner_managers")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def show_approved_managers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    with get_db() as db:
        managers = db.query(User).filter(User.role == UserRole.MANAGER).all()
        
        if not managers:
            keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="owner_managers")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            text = "üìã –ü–æ–∫–∞ –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π"
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
            return
        
        text = "‚úÖ <b>–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏:</b>\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Ç–¥–µ–ª–∞–º
        departments = {}
        for manager in managers:
            dept = manager.department.value
            if dept not in departments:
                departments[dept] = []
            departments[dept].append(manager)
        
        for dept, dept_managers in departments.items():
            text += f"üè¢ <b>{dept}:</b>\n"
            for manager in dept_managers:
                status_emoji = "üü¢" if manager.status == UserStatus.ACTIVE else "üî¥"
                text += f"  {status_emoji} {manager.first_name} {manager.last_name}\n"
            text += "\n"
        
        keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="owner_managers")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def approve_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–¥–æ–±—Ä–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = int(query.data.split('_')[2])
    
    with get_db() as db:
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–¥–æ–±—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.role = UserRole.MANAGER
        db.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                chat_id=user.telegram_id,
                text=f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                     f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–∏–∑–Ω–µ—Å–∞.\n"
                     f"üëë –í—ã —Ç–µ–ø–µ—Ä—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞: <b>{user.department.value}</b>\n\n"
                     f"üìÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /schedule –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á —Å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏",
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"Failed to notify approved user {user.id}: {e}")
        
        await query.edit_message_text(
            f"‚úÖ <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω!</b>\n\n"
            f"üë§ {user.first_name} {user.last_name}\n"
            f"üè¢ –û—Ç–¥–µ–ª: {user.department.value}",
            parse_mode='HTML'
        )

async def reject_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = int(query.data.split('_')[2])
    
    with get_db() as db:
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                chat_id=user.telegram_id,
                text=f"‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                     f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–¥–µ–ª–∞ –Ω–µ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.\n\n"
                     f"üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–∏–∑–Ω–µ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"Failed to notify rejected user {user.id}: {e}")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.delete(user)
        db.commit()
        
        await query.edit_message_text(
            f"‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
            f"üë§ {user.first_name} {user.last_name}\n"
            f"üè¢ –û—Ç–¥–µ–ª: {user.department.value}",
            parse_mode='HTML'
        )

async def handle_owner_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "owner_menu":
        await owner_menu(update, context)
    elif query.data == "owner_availability":
        await show_availability_menu(update, context)
    elif query.data == "owner_add_day":
        return await start_set_availability(update, context)
    elif query.data == "owner_remove_day":
        await show_remove_day_menu(update, context)
    elif query.data.startswith("remove_day_"):
        await remove_availability_day(update, context)
    elif query.data == "owner_managers":
        await show_managers_menu(update, context)
    elif query.data == "owner_pending":
        await show_pending_managers(update, context)
    elif query.data == "owner_approved":
        await show_approved_managers(update, context)
    elif query.data.startswith("owner_approve_"):
        await approve_manager(update, context)
    elif query.data.startswith("owner_reject_"):
        await reject_manager(update, context)
    # –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö callback'–æ–≤ –ø–æ–∑–∂–µ

def get_owner_conversation_handler():
    """–ü–æ–ª—É—á–∏—Ç—å conversation handler –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤"""
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(start_set_availability, pattern="^owner_add_day$")],
        states={
            SET_AVAILABILITY_DAY: [CallbackQueryHandler(set_availability_day, pattern="^set_day_")],
            SET_AVAILABILITY_START: [CallbackQueryHandler(set_availability_start, pattern="^start_time_")],
            SET_AVAILABILITY_END: [CallbackQueryHandler(set_availability_end, pattern="^end_time_")]
        },
        fallbacks=[CallbackQueryHandler(show_availability_menu, pattern="^owner_availability$")],
        per_message=True
    )