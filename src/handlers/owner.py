"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–∏–∑–Ω–µ—Å–∞
"""
import logging
import traceback
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, CallbackQueryHandler, MessageHandler, filters

from database import get_db, User, UserRole, Department, UserStatus
from services.owner_service import OwnerService, WEEKDAYS, TIME_SLOTS
from utils.decorators import require_owner
from config import settings

logger = logging.getLogger(__name__)

# States –¥–ª—è conversation handlers
(SET_AVAILABILITY_START, SET_AVAILABILITY_END, BLOCK_TIME_START, BLOCK_TIME_END, BLOCK_TIME_REASON) = range(5)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ owner_slots
from handlers.owner_slots import (
    ADD_SLOT_DAY, ADD_SLOT_TIME, REMOVE_SLOT_DAY, REMOVE_SLOT_TIME, 
    SETUP_DAY, SETUP_SLOTS
)

@require_owner
async def owner_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
    keyboard = [
        [InlineKeyboardButton("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é", callback_data="owner_availability")],
        [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è", callback_data="owner_block_time")],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏", callback_data="owner_managers")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—Ç—Ä–µ—á", callback_data="owner_stats")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="owner_settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = """
üëë <b>–ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å—Ç—Ä–µ—á
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ –≤—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏ –æ—Ç–¥–µ–ª–æ–≤
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
"""
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')

@require_owner
async def show_availability_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏"""
    user = OwnerService.get_owner_by_telegram_id(update.effective_user.id)
    availability_text = OwnerService.format_availability_text(user.id)
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç", callback_data="owner_add_slot")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç", callback_data="owner_remove_slot")],
        [InlineKeyboardButton("üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–µ–Ω—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data="owner_setup_day")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="owner_availability")],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="owner_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""
üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏</b>

{availability_text}

<i>üí° –ö–∞–∂–¥—ã–π —Å–ª–æ—Ç = 1 —á–∞—Å —Å–æ–∑–≤–æ–Ω–∞
–í—Å—Ç—Ä–µ—á–∏ –≤–æ–∑–º–æ–∂–Ω—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Å–≤–æ–±–æ–¥–Ω—ã –æ–±–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞</i>
"""
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def start_add_slot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞"""
    keyboard = []
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    for i, day in enumerate(WEEKDAYS):
        keyboard.append([InlineKeyboardButton(day, callback_data=f"add_slot_day_{i}")])
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="owner_availability")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞:"
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    return ADD_SLOT_DAY

async def start_remove_slot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞"""
    user = OwnerService.get_owner_by_telegram_id(update.effective_user.id)
    keyboard = []
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–Ω–∏, –≥–¥–µ –µ—Å—Ç—å —Å–ª–æ—Ç—ã
    for i, day in enumerate(WEEKDAYS):
        slots = OwnerService.get_owner_time_slots(user.id, i)
        if slots:
            keyboard.append([InlineKeyboardButton(f"{day} ({', '.join(slots)})", callback_data=f"remove_slot_day_{i}")])
    
    if not keyboard:
        await update.callback_query.edit_message_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="owner_availability")]])
        )
        return ConversationHandler.END
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="owner_availability")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞:",
        reply_markup=reply_markup
    )
    return REMOVE_SLOT_DAY

async def start_setup_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–Ω—è"""
    keyboard = []
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    for i, day in enumerate(WEEKDAYS):
        keyboard.append([InlineKeyboardButton(day, callback_data=f"setup_day_{i}")])
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="owner_availability")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ—Ç–æ–≤:",
        reply_markup=reply_markup
    )
    return SETUP_DAY

async def set_availability_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    day_index = int(query.data.split('_')[2])
    
    context.user_data['availability_day'] = day_index
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞
    keyboard = []
    row = []
    for i, time_slot in enumerate(TIME_SLOTS):
        row.append(InlineKeyboardButton(time_slot, callback_data=f"start_time_{time_slot}"))
        if len(row) == 3:  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
            keyboard.append(row)
            row = []
    
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="owner_availability")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤ {WEEKDAYS[day_index]}:"
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return SET_AVAILABILITY_START

async def set_availability_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    start_time = query.data.split('_')[2]
    
    context.user_data['availability_start'] = start_time
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞)
    start_hour = int(start_time.split(':')[0])
    available_end_times = [slot for slot in TIME_SLOTS if int(slot.split(':')[0]) > start_hour]
    
    keyboard = []
    row = []
    for time_slot in available_end_times:
        row.append(InlineKeyboardButton(time_slot, callback_data=f"end_time_{time_slot}"))
        if len(row) == 3:
            keyboard.append(row)
            row = []
    
    if row:
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="owner_availability")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    day_name = WEEKDAYS[context.user_data['availability_day']]
    text = f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤ {day_name} (–Ω–∞—á–∞–ª–æ: {start_time}):"
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return SET_AVAILABILITY_END

async def set_availability_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    end_time = query.data.split('_')[2]
    
    user = OwnerService.get_owner_by_telegram_id(update.effective_user.id)
    day_index = context.user_data['availability_day']
    start_time = context.user_data['availability_start']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    success = OwnerService.set_owner_availability(user.id, day_index, start_time, end_time)
    
    if success:
        day_name = WEEKDAYS[day_index]
        text = f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\nüìÖ {day_name}: {start_time} - {end_time}"
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"
    
    keyboard = [[InlineKeyboardButton("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é", callback_data="owner_availability")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    return ConversationHandler.END

async def show_remove_day_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –¥–Ω–µ–π"""
    user = OwnerService.get_owner_by_telegram_id(update.effective_user.id)
    availability = OwnerService.get_owner_availability(user.id)
    
    if not availability:
        keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="owner_availability")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        return
    
    keyboard = []
    for avail in availability:
        day_name = WEEKDAYS[avail.day_of_week]
        keyboard.append([InlineKeyboardButton(
            f"‚ùå {day_name} ({avail.start_time}-{avail.end_time})",
            callback_data=f"remove_day_{avail.day_of_week}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="owner_availability")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

async def remove_availability_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    day_index = int(query.data.split('_')[2])
    
    user = OwnerService.get_owner_by_telegram_id(update.effective_user.id)
    success = OwnerService.remove_owner_availability(user.id, day_index)
    
    if success:
        day_name = WEEKDAYS[day_index]
        text = f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è {day_name}"
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"
    
    keyboard = [[InlineKeyboardButton("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é", callback_data="owner_availability")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

@require_owner
async def show_managers_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏"""
    with get_db() as db:
        pending_managers = db.query(User).filter(User.role == UserRole.PENDING).count()
        approved_managers = db.query(User).filter(User.role == UserRole.MANAGER).count()
    
    keyboard = [
        [InlineKeyboardButton(f"‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è ({pending_managers})", callback_data="owner_pending")],
        [InlineKeyboardButton(f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ ({approved_managers})", callback_data="owner_approved")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º", callback_data="owner_dept_stats")],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="owner_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = """
üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –û–¥–æ–±—Ä–∏—Ç—å –Ω–æ–≤—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç–¥–µ–ª–∞–º
"""
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def show_pending_managers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ admin.py"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ admin –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    from handlers.admin import show_pending_users_callback
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –≤–ª–∞–¥–µ–ª—å—Ü–∞
    context.user_data['return_to'] = 'owner_managers'
    await show_pending_users_callback(update, context)

async def show_approved_managers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    with get_db() as db:
        managers = db.query(User).filter(User.role == UserRole.MANAGER).all()
        
        if not managers:
            keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="owner_managers")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            text = "üìã –ü–æ–∫–∞ –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π"
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
            return
        
        text = "‚úÖ <b>–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏:</b>\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Ç–¥–µ–ª–∞–º
        departments = {}
        for manager in managers:
            dept = manager.department.value
            if dept not in departments:
                departments[dept] = []
            departments[dept].append(manager)
        
        for dept, dept_managers in departments.items():
            text += f"üè¢ <b>{dept}:</b>\n"
            for manager in dept_managers:
                status_emoji = "üü¢" if manager.status == UserStatus.ACTIVE else "üî¥"
                text += f"  {status_emoji} {manager.first_name} {manager.last_name}\n"
            text += "\n"
        
        keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="owner_managers")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def approve_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–¥–æ–±—Ä–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = int(query.data.split('_')[2])
    
    with get_db() as db:
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–¥–æ–±—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.role = UserRole.MANAGER
        db.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                chat_id=user.telegram_id,
                text=f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                     f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–∏–∑–Ω–µ—Å–∞.\n"
                     f"üëë –í—ã —Ç–µ–ø–µ—Ä—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞: <b>{user.department.value}</b>\n\n"
                     f"üìÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /schedule –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á —Å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏",
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"Failed to notify approved user {user.id}: {e}")
        
        await query.edit_message_text(
            f"‚úÖ <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω!</b>\n\n"
            f"üë§ {user.first_name} {user.last_name}\n"
            f"üè¢ –û—Ç–¥–µ–ª: {user.department.value}",
            parse_mode='HTML'
        )

async def reject_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ admin.py"""
    from handlers.admin import reject_user_callback
    await reject_user_callback(update, context, int(update.callback_query.data.split('_')[2]))

async def handle_owner_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤"""
    query = update.callback_query
    
    try:
        await query.answer()
        
        if query.data == "owner_menu":
            await owner_menu(update, context)
        elif query.data == "owner_availability":
            await show_availability_menu(update, context)
        elif query.data == "owner_add_slot":
            return await start_add_slot(update, context)
        elif query.data == "owner_remove_slot":
            return await start_remove_slot(update, context)
        elif query.data == "owner_setup_day":
            return await start_setup_day(update, context)
        elif query.data == "owner_remove_day":
            await show_remove_day_menu(update, context)
        elif query.data.startswith("remove_day_"):
            await remove_availability_day(update, context)
        elif query.data == "owner_managers":
            await show_managers_menu(update, context)
        elif query.data == "owner_pending":
            await show_pending_managers(update, context)
        elif query.data == "owner_approved":
            await show_approved_managers(update, context)
        elif query.data.startswith("owner_approve_"):
            await approve_manager(update, context)
        elif query.data.startswith("owner_reject_"):
            await reject_manager(update, context)
        else:
            logger.warning(f"Unhandled owner callback: {query.data}")
            # –û—á–∏—â–∞–µ–º user_data –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            context.user_data.clear()
            await query.answer("‚ö†Ô∏è –£—Å—Ç–∞—Ä–µ–≤—à–∞—è –∫–Ω–æ–ø–∫–∞", show_alert=True)
            try:
                await query.edit_message_text(
                    "üîÑ –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /owner –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üëë –ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞", callback_data="owner_menu")]])
                )
            except:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await update.effective_chat.send_message(
                    "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /owner –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞."
                )
    except Exception as e:
        logger.error(f"Error in owner callback handler: {e}")
        # –û—á–∏—â–∞–µ–º user_data –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
        context.user_data.clear()
        try:
            await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", show_alert=True)
            await update.effective_chat.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /owner –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
            )
        except:
            pass  # –ù–∏—á–µ–≥–æ –Ω–µ –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å

def get_owner_conversation_handler():
    """–ü–æ–ª—É—á–∏—Ç—å conversation handler –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤"""
    from handlers.owner_slots import (
        add_slot_day, add_slot_time, remove_slot_day, remove_slot_time,
        setup_day_select, toggle_slot, save_day_setup, handle_slot_exists,
        add_more_slot_same_day, ADD_SLOT_DAY, ADD_SLOT_TIME, REMOVE_SLOT_DAY, 
        REMOVE_SLOT_TIME, SETUP_DAY, SETUP_SLOTS
    )
    
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_add_slot, pattern="^owner_add_slot$"),
            CallbackQueryHandler(start_remove_slot, pattern="^owner_remove_slot$"),
            CallbackQueryHandler(start_setup_day, pattern="^owner_setup_day$")
        ],
        states={
            ADD_SLOT_DAY: [CallbackQueryHandler(add_slot_day, pattern="^add_slot_day_")],
            ADD_SLOT_TIME: [
                CallbackQueryHandler(add_slot_time, pattern="^add_slot_time_"),
                CallbackQueryHandler(handle_slot_exists, pattern="^slot_exists_"),
                CallbackQueryHandler(add_more_slot_same_day, pattern="^add_more_slot_same_day$")
            ],
            REMOVE_SLOT_DAY: [CallbackQueryHandler(remove_slot_day, pattern="^remove_slot_day_")],
            REMOVE_SLOT_TIME: [
                CallbackQueryHandler(remove_slot_time, pattern="^remove_slot_time_"),
                CallbackQueryHandler(remove_slot_time, pattern="^remove_all_day_slots$")
            ],
            SETUP_DAY: [CallbackQueryHandler(setup_day_select, pattern="^setup_day_")],
            SETUP_SLOTS: [
                CallbackQueryHandler(toggle_slot, pattern="^toggle_slot_"),
                CallbackQueryHandler(save_day_setup, pattern="^save_day_setup$")
            ]
        },
        fallbacks=[
            CallbackQueryHandler(show_availability_menu, pattern="^owner_availability$"),
            CallbackQueryHandler(owner_menu, pattern="^owner_menu$"),
            CallbackQueryHandler(handle_stale_conversation, pattern=".*"),  # –õ–æ–≤–∏—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ callback'–∏
            CommandHandler('owner', cancel_and_redirect_owner),
            CommandHandler('cancel', cancel_conversation),
            CommandHandler('admin', cancel_and_redirect_admin),
            CommandHandler('start', cancel_and_redirect_start),
            CommandHandler('help', cancel_and_redirect_help),
            CommandHandler('schedule', cancel_and_redirect_schedule),
            CommandHandler('my_meetings', cancel_and_redirect_meetings),
            MessageHandler(filters.ALL, handle_stale_conversation)  # –õ–æ–≤–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        ],
        per_chat=True,
        per_user=True,
    )

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π conversation"""
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /owner –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞."
    )
    context.user_data.clear()
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ ConversationHandler
async def cancel_and_redirect_owner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∏—Ç—å conversation –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ /owner"""
    context.user_data.clear()
    await owner_menu(update, context)
    return ConversationHandler.END

async def cancel_and_redirect_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∏—Ç—å conversation –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ /admin"""
    context.user_data.clear()
    from handlers.admin import admin_menu
    await admin_menu(update, context)
    return ConversationHandler.END

async def cancel_and_redirect_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∏—Ç—å conversation –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ /start"""
    context.user_data.clear()
    from handlers.common import start_command
    await start_command(update, context)
    return ConversationHandler.END

async def cancel_and_redirect_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∏—Ç—å conversation –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ /help"""
    context.user_data.clear()
    from handlers.common import help_command
    await help_command(update, context)
    return ConversationHandler.END

async def cancel_and_redirect_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∏—Ç—å conversation –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ /schedule"""
    context.user_data.clear()
    from handlers.manager import show_available_slots
    await show_available_slots(update, context)
    return ConversationHandler.END

async def cancel_and_redirect_meetings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∏—Ç—å conversation –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ /my_meetings"""
    context.user_data.clear()
    from handlers.manager import show_my_meetings
    await show_my_meetings(update, context)
    return ConversationHandler.END

async def handle_stale_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ '–∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö' —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler"""
    context.user_data.clear()
    
    if update.callback_query:
        await update.callback_query.answer(
            "‚ö†Ô∏è –£—Å—Ç–∞—Ä–µ–≤—à–µ–µ –º–µ–Ω—é. –û–±–Ω–æ–≤–ª—è—é...",
            show_alert=True
        )
        try:
            await update.callback_query.edit_message_text(
                "üîÑ –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /owner –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏."
            )
        except:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.effective_chat.send_message(
                "üîÑ –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /owner –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏."
            )
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª–æ—Ç–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /owner –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        )


@require_owner
async def connect_owner_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Calendar –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —á–µ—Ä–µ–∑ OAuth."""
    user_id = update.effective_user.id
    logger.info(f"üîç DEBUG: connect_owner_calendar started for owner {user_id}")
    
    try:
        with get_db() as db:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            
            if user.role != UserRole.OWNER:
                await update.message.reply_text(
                    "‚ùå –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º."
                )
                return
            
            # Check if calendar is already connected
            if user.oauth_credentials and user.google_calendar_id:
                await update.message.reply_text(
                    f"‚úÖ **Google Calendar —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!**\n\n"
                    f"üìß –ö–∞–ª–µ–Ω–¥–∞—Ä—å: {user.email}\n"
                    f"üéâ –í–ª–∞–¥–µ–ª—å—Ü—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏ —Å Google Meet!\n\n"
                    f"–ß—Ç–æ–±—ã –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="reconnect_owner_calendar")],
                        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="owner_menu")]
                    ]),
                    parse_mode='Markdown'
                )
                return
            
            instructions = """
üîó **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Calendar –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞**

–ü–æ–¥–∫–ª—é—á–∏–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:

üéØ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á –≤ –≤–∞—à–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
‚Ä¢ Google Meet —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤—Å—Ç—Ä–µ—á
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—Å—Ç—Ä–µ—á–∞–º–∏

üìã **–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Calendar"
2Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –≤ –≤–∞—à Google –∞–∫–∫–∞—É–Ω—Ç
3Ô∏è‚É£ –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
4Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π OAuth 2.0 Google
‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–æ–∑–≤–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
"""
            
            # Generate OAuth URL
            logger.info(f"üîç DEBUG: Starting OAuth service import for owner {user_id}")
            try:
                from services.oauth_service import oauth_service
                logger.info(f"üîç DEBUG: OAuth service imported successfully")
                logger.info(f"üîç DEBUG: OAuth service is_configured: {oauth_service.is_oauth_configured}")
            
                # Pre-check OAuth configuration 
                if not oauth_service.is_oauth_configured:
                    logger.info(f"üîç DEBUG: OAuth not configured, showing setup instructions")
                    instructions += "\n\n‚ùå **OAuth Client –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω**\n"
                    instructions += "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å:\n"
                    instructions += "‚Ä¢ `GOOGLE_OAUTH_CLIENT_JSON` –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è\n"
                    instructions += "‚Ä¢ –ò–ª–∏ —Ñ–∞–π–ª `oauth_client_key.json`\n\n"
                    instructions += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Google Cloud Console:\n"
                    instructions += "1. APIs & Services -> Credentials\n"
                    instructions += "2. Create OAuth 2.0 Client -> Web Application\n"
                    webhook_url = settings.webhook_url or "YOUR_WEBHOOK_URL"
                    instructions += f"3. Add redirect URI: `{webhook_url}/oauth/callback`"
                    
                    keyboard = [
                        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="owner_menu")]
                    ]
                    logger.info(f"üîç DEBUG: OAuth not configured path - message prepared")
                else:
                    logger.info(f"üîç DEBUG: Generating OAuth URL for owner {user_id}")
                    oauth_url = oauth_service.generate_auth_url(user_id)
                    logger.info(f"üîç DEBUG: OAuth URL result: {'Generated' if oauth_url else 'None'}")
                    
                    if oauth_url:
                        logger.info(f"üîç DEBUG: OAuth URL generated successfully, length: {len(oauth_url)}")
                        keyboard = [
                            [InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Calendar", url=oauth_url)],
                            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="owner_menu")]
                        ]
                        logger.info(f"üîç DEBUG: OAuth configured path - message with URL prepared")
                    else:
                        logger.info(f"üîç DEBUG: OAuth URL generation failed")
                        # OAuth URL generation failed
                        instructions += "\n\n‚ùå **–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ OAuth URL**\n"
                        instructions += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                        instructions += "‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å OAuth Client JSON\n"
                        instructions += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫—É WEBHOOK_URL\n"
                        instructions += "‚Ä¢ Redirect URI –≤ Google Console"
                        keyboard = [
                            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="owner_menu")]
                        ]
                        logger.info(f"üîç DEBUG: OAuth URL failed path - message prepared")
            except Exception as oauth_error:
                logger.error(f"üîç DEBUG: OAuth service error for owner {user_id}: {type(oauth_error).__name__}: {oauth_error}")
                logger.error(f"üîç DEBUG: OAuth traceback: {traceback.format_exc()}")
                instructions += "\n\n‚ùå **–ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π OAuth**\n"
                instructions += "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.\n\n"
                keyboard = [
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="owner_menu")]
                ]
                logger.info(f"üîç DEBUG: OAuth error path - message prepared")
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            logger.info(f"üîç DEBUG: Sending response to owner {user_id}")
            logger.info(f"üîç DEBUG: Message length: {len(instructions)} characters")
            logger.info(f"üîç DEBUG: Keyboard buttons count: {len(keyboard)}")
            
            try:
                await update.message.reply_text(
                    instructions, 
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                logger.info(f"üîç DEBUG: Response sent successfully to owner {user_id}")
            except Exception as send_error:
                logger.error(f"üîç DEBUG: Failed to send message to owner {user_id}: {type(send_error).__name__}: {send_error}")
                # Try sending without markdown formatting but keep the keyboard
                try:
                    clean_instructions = instructions.replace('**', '').replace('`', '').replace('*', '')
                    await update.message.reply_text(
                        clean_instructions,
                        reply_markup=reply_markup
                    )
                    logger.info(f"üîç DEBUG: Response sent without markdown formatting but with keyboard")
                except Exception as fallback_error:
                    logger.error(f"üîç DEBUG: Fallback send also failed: {type(fallback_error).__name__}: {fallback_error}")
                    # Last resort - send without keyboard
                    try:
                        await update.message.reply_text(clean_instructions)
                        logger.info(f"üîç DEBUG: Response sent without markdown and without keyboard")
                    except Exception as final_error:
                        logger.error(f"üîç DEBUG: All send attempts failed: {type(final_error).__name__}: {final_error}")
                        raise send_error
        
    except Exception as main_error:
        error_type = type(main_error).__name__
        logger.error(f"üîç DEBUG: Exception in connect_owner_calendar for owner {user_id}: {error_type}: {main_error}")
        logger.error(f"üîç DEBUG: Traceback: {traceback.format_exc()}")
        
        # Provide user-friendly error message
        try:
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è**\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: `{error_type}`\n\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='Markdown'
            )
        except Exception as reply_error:
            logger.error(f"Failed to send error message to owner {user_id}: {reply_error}")
            raise main_error


async def handle_owner_calendar_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤–ª–∞–¥–µ–ª—å—Ü–∞."""
    from utils.telegram_safe import telegram_safe
    
    query = update.callback_query
    await query.answer()
    
    @telegram_safe(max_retries=1)
    async def safe_edit_message(text, reply_markup=None):
        """Safe wrapper for editing messages."""
        return await query.edit_message_text(text=text, reply_markup=reply_markup)
    
    if query.data == "connect_owner_calendar":
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        fake_update = type('obj', (object,), {
            'effective_user': query.from_user,
            'message': type('obj', (object,), {
                'reply_text': safe_edit_message
            })()
        })()
        await connect_owner_calendar(fake_update, context)
    elif query.data == "reconnect_owner_calendar":
        # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è  
        fake_update = type('obj', (object,), {
            'effective_user': query.from_user,
            'message': type('obj', (object,), {
                'reply_text': safe_edit_message
            })()
        })()
        await connect_owner_calendar(fake_update, context)
    
    return ConversationHandler.END