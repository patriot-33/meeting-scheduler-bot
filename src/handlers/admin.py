from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime, timedelta
import logging
from sqlalchemy import and_

from src.database import get_db, User, Meeting, UserRole, UserStatus, MeetingStatus, Department
from src.config import settings
from src.utils.decorators import require_admin

logger = logging.getLogger(__name__)

@require_admin
async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show admin menu."""
    keyboard = [
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="admin_pending")],
        [InlineKeyboardButton("üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=reply_markup)

@require_admin
async def show_pending_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show users pending approval."""
    with get_db() as db:
        pending_users = db.query(User).filter(User.role == UserRole.PENDING).all()
        
        if not pending_users:
            await update.message.reply_text("‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
            return
        
        message_text = "üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:**\n\n"
        
        for user in pending_users:
            message_text += f"‚Ä¢ {user.first_name} {user.last_name}\n"
            message_text += f"  –û—Ç–¥–µ–ª: {user.department.value}\n"
            message_text += f"  ID: {user.telegram_id}\n\n"
        
        keyboard = []
        for user in pending_users:
            keyboard.append([
                InlineKeyboardButton(f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å {user.first_name}", 
                                   callback_data=f"admin_approve_{user.id}"),
                InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                                   callback_data=f"admin_reject_{user.id}")
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')

@require_admin 
async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """List all users."""
    with get_db() as db:
        users = db.query(User).filter(User.role != UserRole.PENDING).all()
        
        if not users:
            await update.message.reply_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        message_text = "üìã **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
        
        admins = []
        managers = []
        
        for user in users:
            user_info = f"‚Ä¢ {user.first_name} {user.last_name} ({user.department.value})"
            if user.role == UserRole.OWNER:
                admins.append(user_info)
            else:
                managers.append(user_info)
        
        if admins:
            message_text += "üëë **–í–ª–∞–¥–µ–ª—å—Ü—ã –±–∏–∑–Ω–µ—Å–∞:**\n"
            message_text += "\n".join(admins) + "\n\n"
        
        if managers:
            message_text += "üë• **–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –æ—Ç–¥–µ–ª–æ–≤:**\n"
            message_text += "\n".join(managers)
        
        await update.message.reply_text(message_text, parse_mode='Markdown')

@require_admin
async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show bot usage statistics."""
    with get_db() as db:
        total_users = db.query(User).count()
        active_users = db.query(User).filter(User.status == UserStatus.ACTIVE).count()
        pending_users = db.query(User).filter(User.role == UserRole.PENDING).count()
        
        # Meeting statistics
        total_meetings = db.query(Meeting).count()
        scheduled_meetings = db.query(Meeting).filter(Meeting.status == MeetingStatus.SCHEDULED).count()
        completed_meetings = db.query(Meeting).filter(Meeting.status == MeetingStatus.COMPLETED).count()
        
        # Recent activity (last 7 days)
        week_ago = datetime.now() - timedelta(days=7)
        recent_registrations = db.query(User).filter(User.created_at >= week_ago).count()
        recent_meetings = db.query(Meeting).filter(Meeting.created_at >= week_ago).count()
        
        message_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}
‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {pending_users}

üìÖ **–í—Å—Ç—Ä–µ—á–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {total_meetings}
‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {scheduled_meetings}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_meetings}

üìà **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:**
‚Ä¢ –ù–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {recent_registrations}
‚Ä¢ –ù–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á: {recent_meetings}
"""
        
        await update.message.reply_text(message_text, parse_mode='Markdown')

@require_admin
async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Broadcast message to all users."""
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /broadcast –í–Ω–∏–º–∞–Ω–∏–µ! –ó–∞–≤—Ç—Ä–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ."
        )
        return
    
    message = " ".join(context.args)
    
    with get_db() as db:
        users = db.query(User).filter(User.role != UserRole.PENDING).all()
        
        sent_count = 0
        failed_count = 0
        
        for user in users:
            try:
                await context.bot.send_message(
                    chat_id=user.telegram_id,
                    text=f"üì¢ **–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:**\n\n{message}",
                    parse_mode='Markdown'
                )
                sent_count += 1
            except Exception as e:
                logger.error(f"Failed to send broadcast to user {user.id}: {e}")
                failed_count += 1
        
        await update.message.reply_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"–û—à–∏–±–æ–∫: {failed_count}"
        )

@require_admin 
async def toggle_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Toggle notification settings."""
    await update.message.reply_text(
        "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.\n"
        "–í —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n"
        "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö\n" 
        "‚Ä¢ –û—Ç—á–µ—Ç—ã –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö"
    )

async def approve_user(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """Approve user registration."""
    with get_db() as db:
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user.role = UserRole.MANAGER
        db.commit()
        
        # Notify user
        try:
            await context.bot.send_message(
                chat_id=user.telegram_id,
                text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–∏–∑–Ω–µ—Å–∞!\n\n"
                     f"üëë –í—ã —Ç–µ–ø–µ—Ä—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞: {user.department.value}\n"
                     "üìÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /schedule –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á —Å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏"
            )
        except Exception as e:
            logger.error(f"Failed to notify approved user {user.id}: {e}")
        
        await update.callback_query.edit_message_text(
            f"‚úÖ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å {user.first_name} {user.last_name} –æ–¥–æ–±—Ä–µ–Ω!\n"
            f"üè¢ –û—Ç–¥–µ–ª: {user.department.value}"
        )

async def reject_user(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """Reject user registration."""
    with get_db() as db:
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # Notify user
        try:
            await context.bot.send_message(
                chat_id=user.telegram_id,
                text="‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
                     "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            )
        except Exception as e:
            logger.error(f"Failed to notify rejected user {user.id}: {e}")
        
        # Delete user
        db.delete(user)
        db.commit()
        
        await update.callback_query.edit_message_text(
            f"‚ùå –ó–∞—è–≤–∫–∞ {user.first_name} {user.last_name} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
            f"üè¢ –û—Ç–¥–µ–ª: {user.department.value}"
        )

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle admin callback queries."""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "admin_pending":
        await show_pending_users(update, context)
    elif data == "admin_users":
        await list_users(update, context)
    elif data == "admin_stats":
        await show_statistics(update, context)
    elif data == "admin_broadcast":
        await query.edit_message_text(
            "üì¢ –î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/broadcast <–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ>"
        )
    elif data.startswith("admin_approve_"):
        user_id = int(data.split("_")[2])
        await approve_user(update, context, user_id)
    elif data.startswith("admin_reject_"):
        user_id = int(data.split("_")[2])
        await reject_user(update, context, user_id)