"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from src.services.owner_service import OwnerService, WEEKDAYS, TIME_SLOTS
from src.utils.decorators import require_owner

logger = logging.getLogger(__name__)

# States –¥–ª—è conversation handlers —Å–ª–æ—Ç–æ–≤
(ADD_SLOT_DAY, ADD_SLOT_TIME, REMOVE_SLOT_DAY, REMOVE_SLOT_TIME, 
 SETUP_DAY, SETUP_SLOTS) = range(6)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
AVAILABLE_TIME_SLOTS = ["09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00"]

@require_owner
async def add_slot_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞"""
    query = update.callback_query
    day_index = int(query.data.split('_')[3])
    
    context.user_data['slot_day'] = day_index
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    keyboard = []
    
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = OwnerService.get_owner_by_telegram_id(update.effective_user.id)
    existing_slots = OwnerService.get_owner_time_slots(user.id, day_index)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    row = []
    for i, slot in enumerate(AVAILABLE_TIME_SLOTS):
        if slot in existing_slots:
            button_text = f"‚úÖ {slot}"  # –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω
            callback_data = f"slot_exists_{slot.replace(':', '')}"
        else:
            button_text = slot
            callback_data = f"add_slot_time_{slot.replace(':', '')}"
        
        row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
        
        # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        if len(row) == 3:
            keyboard.append(row)
            row = []
    
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="owner_availability")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    day_name = WEEKDAYS[day_index]
    existing_text = f"–£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã: {', '.join(existing_slots)}" if existing_slots else "–°–ª–æ—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    
    text = f"""
‚è∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞ - {day_name}</b>

{existing_text}

–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–≤–æ–Ω–∞:
<i>‚úÖ = —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è</i>
"""
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    return ADD_SLOT_TIME

@require_owner
async def add_slot_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç"""
    query = update.callback_query
    time_data = query.data.split('_')[3]
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    time_slot = f"{time_data[:2]}:{time_data[2:]}"
    day_index = context.user_data.get('slot_day')
    
    if day_index is None:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–µ–Ω—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return ConversationHandler.END
    
    user = OwnerService.get_owner_by_telegram_id(update.effective_user.id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ—Ç
    success = OwnerService.add_owner_time_slot(user.id, day_index, time_slot)
    
    if success:
        day_name = WEEKDAYS[day_index]
        text = f"‚úÖ –°–ª–æ—Ç {time_slot} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è {day_name}"
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞ –∏–ª–∏ —Å–ª–æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–ª–æ—Ç", callback_data="add_more_slot_same_day")],
        [InlineKeyboardButton("‚Üê –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–ª–æ—Ç–∞–º–∏", callback_data="owner_availability")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    
    # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º conversation, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–ª–æ—Ç" —Ä–∞–±–æ—Ç–∞–ª–∞
    # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ADD_SLOT_TIME –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
    return ADD_SLOT_TIME

@require_owner
async def remove_slot_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞"""
    query = update.callback_query
    day_index = int(query.data.split('_')[3])
    
    context.user_data['slot_day'] = day_index
    
    user = OwnerService.get_owner_by_telegram_id(update.effective_user.id)
    existing_slots = OwnerService.get_owner_time_slots(user.id, day_index)
    
    if not existing_slots:
        await query.edit_message_text(
            "‚ùå –í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="owner_availability")]])
        )
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–ª–æ—Ç–∞–º–∏
    keyboard = []
    row = []
    for slot in existing_slots:
        row.append(InlineKeyboardButton(slot, callback_data=f"remove_slot_time_{slot.replace(':', '')}"))
        
        # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        if len(row) == 3:
            keyboard.append(row)
            row = []
    
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ—Ç—ã –¥–Ω—è", callback_data="remove_all_day_slots")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="owner_availability")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    day_name = WEEKDAYS[day_index]
    text = f"""
üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞ - {day_name}</b>

–¢–µ–∫—É—â–∏–µ —Å–ª–æ—Ç—ã: {', '.join(existing_slots)}

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:
"""
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    return REMOVE_SLOT_TIME

@require_owner
async def remove_slot_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç"""
    query = update.callback_query
    
    if query.data == "remove_all_day_slots":
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –¥–Ω—è
        day_index = context.user_data.get('slot_day')
        user = OwnerService.get_owner_by_telegram_id(update.effective_user.id)
        
        success = OwnerService.remove_all_day_slots(user.id, day_index)
        day_name = WEEKDAYS[day_index]
        
        if success:
            text = f"‚úÖ –í—Å–µ —Å–ª–æ—Ç—ã —É–¥–∞–ª–µ–Ω—ã –¥–ª—è {day_name}"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤"
    else:
        # –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ª–æ—Ç
        time_data = query.data.split('_')[3]
        time_slot = f"{time_data[:2]}:{time_data[2:]}"
        day_index = context.user_data.get('slot_day')
        
        if day_index is None:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–µ–Ω—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return ConversationHandler.END
        
        user = OwnerService.get_owner_by_telegram_id(update.effective_user.id)
        success = OwnerService.remove_owner_time_slot(user.id, day_index, time_slot)
        
        day_name = WEEKDAYS[day_index]
        if success:
            text = f"‚úÖ –°–ª–æ—Ç {time_slot} —É–¥–∞–ª–µ–Ω –¥–ª—è {day_name}"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞"
    
    keyboard = [
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –µ—â–µ —Å–ª–æ—Ç", callback_data="owner_remove_slot")],
        [InlineKeyboardButton("‚Üê –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–ª–æ—Ç–∞–º–∏", callback_data="owner_availability")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return ConversationHandler.END

@require_owner
async def setup_day_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    query = update.callback_query
    day_index = int(query.data.split('_')[2])
    
    context.user_data['setup_day'] = day_index
    
    user = OwnerService.get_owner_by_telegram_id(update.effective_user.id)
    existing_slots = OwnerService.get_owner_time_slots(user.id, day_index)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
    keyboard = []
    row = []
    context.user_data['selected_slots'] = existing_slots.copy()  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
    
    for slot in AVAILABLE_TIME_SLOTS:
        if slot in existing_slots:
            button_text = f"‚úÖ {slot}"
            callback_data = f"toggle_slot_{slot.replace(':', '')}"
        else:
            button_text = f"‚¨ú {slot}"
            callback_data = f"toggle_slot_{slot.replace(':', '')}"
        
        row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
        
        # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        if len(row) == 3:
            keyboard.append(row)
            row = []
    
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_day_setup")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="owner_availability")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    day_name = WEEKDAYS[day_index]
    current_text = f"–¢–µ–∫—É—â–∏–µ: {', '.join(existing_slots)}" if existing_slots else "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    
    text = f"""
üìù <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–Ω—è - {day_name}</b>

{current_text}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Å–ª–æ—Ç—ã:
<i>‚úÖ = –≤–∫–ª—é—á–µ–Ω, ‚¨ú = –æ—Ç–∫–ª—é—á–µ–Ω
–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–ª–æ—Ç —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å</i>
"""
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    return SETUP_SLOTS

@require_owner
async def toggle_slot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—ã–±–æ—Ä —Å–ª–æ—Ç–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–Ω—è"""
    query = update.callback_query
    time_data = query.data.split('_')[2]
    time_slot = f"{time_data[:2]}:{time_data[2:]}"
    
    selected_slots = context.user_data.get('selected_slots', [])
    
    if time_slot in selected_slots:
        selected_slots.remove(time_slot)
    else:
        selected_slots.append(time_slot)
        selected_slots.sort()  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    
    context.user_data['selected_slots'] = selected_slots
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    row = []
    
    for slot in AVAILABLE_TIME_SLOTS:
        if slot in selected_slots:
            button_text = f"‚úÖ {slot}"
            callback_data = f"toggle_slot_{slot.replace(':', '')}"
        else:
            button_text = f"‚¨ú {slot}"
            callback_data = f"toggle_slot_{slot.replace(':', '')}"
        
        row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
        
        if len(row) == 3:
            keyboard.append(row)
            row = []
    
    if row:
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_day_setup")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="owner_availability")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    day_index = context.user_data.get('setup_day')
    day_name = WEEKDAYS[day_index]
    selected_text = f"–í—ã–±—Ä–∞–Ω–æ: {', '.join(selected_slots)}" if selected_slots else "–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
    
    text = f"""
üìù <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–Ω—è - {day_name}</b>

{selected_text}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Å–ª–æ—Ç—ã:
<i>‚úÖ = –≤–∫–ª—é—á–µ–Ω, ‚¨ú = –æ—Ç–∫–ª—é—á–µ–Ω
–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–ª–æ—Ç —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å</i>
"""
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    return SETUP_SLOTS

@require_owner
async def save_day_setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–Ω—è"""
    query = update.callback_query
    
    day_index = context.user_data.get('setup_day')
    selected_slots = context.user_data.get('selected_slots', [])
    
    if day_index is None:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–µ–Ω—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return ConversationHandler.END
    
    user = OwnerService.get_owner_by_telegram_id(update.effective_user.id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã (–∑–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
    success = OwnerService.set_owner_time_slots(user.id, day_index, selected_slots)
    
    day_name = WEEKDAYS[day_index]
    if success:
        if selected_slots:
            slots_text = ', '.join(selected_slots)
            text = f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {day_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n{slots_text}"
        else:
            text = f"‚úÖ –í—Å–µ —Å–ª–æ—Ç—ã —É–¥–∞–ª–µ–Ω—ã –¥–ª—è {day_name}"
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
    
    keyboard = [
        [InlineKeyboardButton("üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å", callback_data="owner_setup_day")],
        [InlineKeyboardButton("‚Üê –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–ª–æ—Ç–∞–º–∏", callback_data="owner_availability")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ª–æ—Ç–æ–≤
async def handle_slot_exists(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ—Ç"""
    query = update.callback_query
    await query.answer("üí° –≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω", show_alert=False)
    return ADD_SLOT_TIME  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

async def add_more_slot_same_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Å–ª–æ—Ç –¥–ª—è —Ç–æ–≥–æ –∂–µ –¥–Ω—è"""
    query = update.callback_query
    day_index = context.user_data.get('slot_day')
    
    if day_index is None:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã —Å–Ω–æ–≤–∞
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = OwnerService.get_owner_by_telegram_id(update.effective_user.id)
    existing_slots = OwnerService.get_owner_time_slots(user.id, day_index)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    keyboard = []
    row = []
    for i, slot in enumerate(AVAILABLE_TIME_SLOTS):
        if slot in existing_slots:
            button_text = f"‚úÖ {slot}"  # –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω
            callback_data = f"slot_exists_{slot.replace(':', '')}"
        else:
            button_text = slot
            callback_data = f"add_slot_time_{slot.replace(':', '')}"
        
        row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
        
        # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        if len(row) == 3:
            keyboard.append(row)
            row = []
    
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="owner_availability")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    day_name = WEEKDAYS[day_index]
    existing_text = f"–£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã: {', '.join(existing_slots)}" if existing_slots else "–°–ª–æ—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    
    text = f"""
‚è∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞ - {day_name}</b>

{existing_text}

–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–≤–æ–Ω–∞:
<i>‚úÖ = —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è</i>
"""
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    return ADD_SLOT_TIME