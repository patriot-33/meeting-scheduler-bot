"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Calendar —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏
"""
import logging
import traceback
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import BadRequest

from database import get_db, User, UserRole
from utils.decorators import require_registration
from utils.telegram_safe import safe_send_message, safe_context_send
from config import settings

logger = logging.getLogger(__name__)

# safe_send_message —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ utils.telegram_safe

@require_registration
async def connect_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Calendar —á–µ—Ä–µ–∑ OAuth –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π."""
    user_id = update.effective_user.id
    logger.info(f"üîç DEBUG: connect_calendar started for user {user_id}")
    
    # Defensive fix for UnboundLocalError: ensure get_db is explicitly available
    from database import get_db as db_context_manager
    
    try:
        with db_context_manager() as db:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            logger.info(f"üîç DEBUG: User found - ID: {user.telegram_id}, role: {user.role.value}, calendar: {user.google_calendar_id}")
            
            # Allow both MANAGER and OWNER to connect calendars via OAuth
            if user.role not in [UserRole.MANAGER, UserRole.OWNER]:
                logger.warning(f"‚ùå DEBUG: Access denied - user role is {user.role.value}, expected MANAGER or OWNER")
                await safe_send_message(update, "‚ùå –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º.")
                return
            
            # Check calendar connection status
            calendar_status = "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
            status_icon = "üî¥"
            status_details = ""
            
            if user.oauth_credentials and user.google_calendar_id:
                # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
                from services.google_calendar import google_calendar_service as calendar_service
                calendar_access_test = None
                
                if calendar_service.is_available:
                    try:
                        calendar_access_test = calendar_service.test_calendar_access(user.google_calendar_id)
                    except Exception as e:
                        logger.warning(f"Failed to test calendar access: {e}")
                
                if calendar_access_test and calendar_access_test['success']:
                    calendar_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω"
                    status_icon = "üü¢"
                    status_details = f"\nüìß Email: {user.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\nüìÖ Calendar ID: {user.google_calendar_id[:30]}...\nüé® –ù–∞–∑–≤–∞–Ω–∏–µ: {calendar_access_test.get('summary', 'N/A')}"
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
                    if not user.calendar_connected:
                        user.calendar_connected = True
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (db —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)
                        try:
                            # commit –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ with get_db()
                            pass
                        except:
                            pass
                elif calendar_access_test and not calendar_access_test['success']:
                    calendar_status = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"
                    status_icon = "üî¥"
                    error_msg = calendar_access_test.get('error', 'Unknown error')
                    if 'not found' in error_msg.lower():
                        status_details = f"\nüìß Email: {user.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\nüìÖ Calendar ID: {user.google_calendar_id}\n‚ùå –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø\n\nüí° **–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞:**\n1. –û—Ç–∫—Ä–æ–π—Ç–µ Google Calendar\n2. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º —Å:\n   `meeting-bot-service@meeting-scheduler-bot-467415.iam.gserviceaccount.com`\n3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∞: '–í–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'"
                    else:
                        status_details = f"\nüìß Email: {user.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\nüìÖ Calendar ID: {user.google_calendar_id}\n‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {error_msg}"
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                    if user.calendar_connected:
                        user.calendar_connected = False
                else:
                    calendar_status = "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
                    status_icon = "üü°"
                    status_details = "\n‚ùó –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å"
            elif user.email:
                status_details = f"\nüìß Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {user.email}\n‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ OAuth"
                
            status_message = f"""üìä **–°—Ç–∞—Ç—É—Å Google Calendar**

{status_icon} –°—Ç–∞—Ç—É—Å: {calendar_status}{status_details}

üí° –î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á –Ω–µ–æ–±—Ö–æ–¥–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å."""
            
            # Show different buttons based on REAL connection status
            calendar_really_connected = (calendar_access_test and calendar_access_test['success']) if 'calendar_access_test' in locals() else user.calendar_connected
            
            if calendar_really_connected:
                keyboard = [
                    [InlineKeyboardButton("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É", callback_data="schedule_meeting")],
                    [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="reconnect_calendar")],
                    [InlineKeyboardButton("üóë –û—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="disconnect_calendar")],
                    [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="calendar_faq")]
                ]
                await safe_send_message(
                    update,
                    status_message,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return
            elif user.oauth_credentials:
                # Has credentials but not connected - different options based on problem
                if 'calendar_access_test' in locals() and calendar_access_test and not calendar_access_test['success']:
                    # Calendar exists but no access - sharing problem
                    keyboard = [
                        [InlineKeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–æ—Å—Ç—É–ø–∞", callback_data="calendar_sharing_guide")],
                        [InlineKeyboardButton("üìÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", callback_data="switch_to_simple_calendar")],
                        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ OAuth", callback_data="reconnect_calendar")],
                        [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="disconnect_calendar")]
                    ]
                    extra_message = "\n\n‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é**\n–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
                else:
                    # General reconnection needed
                    keyboard = [
                        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="reconnect_calendar")],
                        [InlineKeyboardButton("üÜï –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="connect_calendar_fresh")],
                        [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="calendar_faq")]
                    ]
                    extra_message = "\n\n‚ö†Ô∏è **–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è**"
                
                await safe_send_message(
                    update,
                    status_message + extra_message,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return
            
            instructions = """
üîó **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Calendar**

–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á –≤ –≤–∞—à–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:

1Ô∏è‚É£ **–ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å"**
   ‚Ä¢ –í—ã –ø–µ—Ä–µ–π–¥–µ—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google
   ‚Ä¢ –í–æ–π–¥–∏—Ç–µ –≤ –≤–∞—à Google –∞–∫–∫–∞—É–Ω—Ç

2Ô∏è‚É£ **–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é**
   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–†–∞–∑—Ä–µ—à–∏—Ç—å" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è

3Ô∏è‚É£ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è**
   ‚Ä¢ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç
   ‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏

üéØ **–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á –≤ –≤–∞—à–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
‚Ä¢ Google Meet —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—Å—Ç—Ä–µ—á–∞–º–∏

üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π OAuth 2.0 Google
‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é, –Ω–∏–∫–∞–∫–∏—Ö –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
"""
            
            # Generate OAuth URL
            logger.info(f"üîç DEBUG: Starting OAuth service import for user {user_id}")
            try:
                from services.oauth_service import oauth_service
                logger.info(f"üîç DEBUG: OAuth service imported successfully")
                logger.info(f"üîç DEBUG: OAuth service is_configured: {oauth_service.is_oauth_configured}")
            
                # Pre-check OAuth configuration 
                if not oauth_service.is_oauth_configured:
                    logger.info(f"üîç DEBUG: OAuth not configured, showing setup instructions")
                    instructions += "\n\n‚ùå **OAuth Client –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω**\n"
                    instructions += "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å:\n"
                    instructions += "‚Ä¢ `GOOGLE_OAUTH_CLIENT_JSON` –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è\n"
                    instructions += "‚Ä¢ –ò–ª–∏ —Ñ–∞–π–ª `oauth_client_key.json`\n\n"
                    instructions += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Google Cloud Console:\n"
                    instructions += "1. APIs & Services -> Credentials\n"
                    instructions += "2. Create OAuth 2.0 Client -> Web Application\n"
                    webhook_url = settings.webhook_url or "YOUR_WEBHOOK_URL"
                    instructions += f"3. Add redirect URI: `{webhook_url}/oauth/callback`"
                    
                    keyboard = [
                        [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="calendar_faq")],
                        [InlineKeyboardButton("üìß –°–æ–æ–±—â–∏—Ç—å email –≤–ª–∞–¥–µ–ª—å—Ü—É", callback_data="send_email_to_owner")],
                        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="nav_main_menu")]
                    ]
                    logger.info(f"üîç DEBUG: OAuth not configured path - message prepared")
                else:
                    logger.info(f"üîç DEBUG: Generating OAuth URL for user {user_id}")
                    oauth_url = oauth_service.generate_auth_url(user_id)
                    logger.info(f"üîç DEBUG: OAuth URL result: {'Generated' if oauth_url else 'None'}")
                    
                    if oauth_url:
                        logger.info(f"üîç DEBUG: OAuth URL generated successfully, length: {len(oauth_url)}")
                        keyboard = [
                            [InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Calendar", url=oauth_url)],
                            [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="calendar_faq")],
                            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="nav_main_menu")]
                        ]
                        logger.info(f"üîç DEBUG: OAuth configured path - message with URL prepared")
                    else:
                        logger.info(f"üîç DEBUG: OAuth URL generation failed")
                        # OAuth URL generation failed
                        instructions += "\n\n‚ùå **–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ OAuth URL**\n"
                        instructions += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                        instructions += "‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å OAuth Client JSON\n"
                        instructions += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫—É WEBHOOK_URL\n"
                        instructions += "‚Ä¢ Redirect URI –≤ Google Console"
                        keyboard = [
                            [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="calendar_faq")],
                            [InlineKeyboardButton("üìß –°–æ–æ–±—â–∏—Ç—å email –≤–ª–∞–¥–µ–ª—å—Ü—É", callback_data="send_email_to_owner")],
                            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="nav_main_menu")]
                        ]
                        logger.info(f"üîç DEBUG: OAuth URL failed path - message prepared")
            except Exception as oauth_error:
                logger.error(f"üîç DEBUG: OAuth service error for user {user_id}: {type(oauth_error).__name__}: {oauth_error}")
                logger.error(f"üîç DEBUG: OAuth traceback: {traceback.format_exc()}")
                instructions += "\n\n‚ùå **–ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π OAuth**\n"
                instructions += "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.\n\n"
                instructions += "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
                instructions += "‚Ä¢ /calendar_simple - –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n"
                instructions += "‚Ä¢ /email –≤–∞—à_email@gmail.com - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é"
                keyboard = [
                    [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="calendar_faq")],
                    [InlineKeyboardButton("üìß –°–æ–æ–±—â–∏—Ç—å email –≤–ª–∞–¥–µ–ª—å—Ü—É", callback_data="send_email_to_owner")],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="nav_main_menu")]
                ]
                logger.info(f"üîç DEBUG: OAuth error path - message prepared")
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            logger.info(f"üîç DEBUG: Sending response to user {user_id}")
            logger.info(f"üîç DEBUG: Message length: {len(instructions)} characters")
            logger.info(f"üîç DEBUG: Keyboard buttons count: {len(keyboard)}")
            
            try:
                await safe_send_message(update,
                    instructions, 
                    reply_markup=reply_markup,
                    parse_mode='Markdown',
                    force_send=True  # Allow duplicate for calendar setup
                )
                logger.info(f"üîç DEBUG: Response sent successfully to user {user_id}")
            except Exception as send_error:
                logger.error(f"üîç DEBUG: Failed to send message to user {user_id}: {type(send_error).__name__}: {send_error}")
                # Try sending without markdown formatting but keep the keyboard
                try:
                    clean_instructions = instructions.replace('**', '').replace('`', '').replace('*', '')
                    await safe_send_message(update,
                        clean_instructions,
                        reply_markup=reply_markup,
                        force_send=True
                    )
                    logger.info(f"üîç DEBUG: Response sent without markdown formatting but with keyboard")
                except Exception as fallback_error:
                    logger.error(f"üîç DEBUG: Fallback send also failed: {type(fallback_error).__name__}: {fallback_error}")
                    # Last resort - send without keyboard
                    try:
                        await safe_send_message(update, clean_instructions, force_send=True)
                        logger.info(f"üîç DEBUG: Response sent without markdown and without keyboard")
                    except Exception as final_error:
                        logger.error(f"üîç DEBUG: All send attempts failed: {type(final_error).__name__}: {final_error}")
                        raise send_error
        
    except Exception as main_error:
        error_type = type(main_error).__name__
        logger.error(f"üîç DEBUG: Exception in connect_calendar for user {user_id}: {error_type}: {main_error}")
        logger.error(f"üîç DEBUG: Traceback: {traceback.format_exc()}")
        
        # Provide user-friendly error message instead of generic network error
        try:
            await safe_send_message(update,
                f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è**\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: `{error_type}`\n\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"‚Ä¢ –ö–æ–º–∞–Ω–¥—É `/calendar_simple` –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
                f"‚Ä¢ –ö–æ–º–∞–Ω–¥—É `/email –≤–∞—à_email@gmail.com` –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
                parse_mode='Markdown'
            )
        except Exception as reply_error:
            logger.error(f"Failed to send error message to user {user_id}: {reply_error}")
            # If we can't send a custom message, let the global error handler take over
            raise main_error

async def handle_calendar_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "connect_calendar":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π update —Å callback_query
        await connect_calendar(update, context)
    elif query.data == "reconnect_calendar":
        # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        await connect_calendar(update, context)
    elif query.data == "send_email_to_owner":
        await send_email_prompt(update, context)
    elif query.data == "calendar_faq":
        await show_calendar_faq(update, context)
    elif query.data == "disconnect_calendar":
        await disconnect_calendar_handler(update, context)
    elif query.data == "connect_calendar_fresh":
        # Same as connect_calendar but force fresh connection
        await connect_calendar(update, context)
    elif query.data == "calendar_sharing_guide":
        await show_calendar_sharing_guide(update, context)
    elif query.data == "switch_to_simple_calendar":
        await switch_to_simple_calendar(update, context)

async def send_email_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É."""
    text = """
üìß **–û—Ç–ø—Ä–∞–≤–∫–∞ email –≤–ª–∞–¥–µ–ª—å—Ü—É**

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Google email –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
`–≤–∞—à–µ_–∏–º—è@gmail.com` –∏–ª–∏ `–≤–∞—à–µ_–∏–º—è@–∫–æ–º–ø–∞–Ω–∏—è.ru`

–í–ª–∞–¥–µ–ª–µ—Ü –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–∏—Ç –≤–∞—Å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`/email –≤–∞—à_email@gmail.com`
"""
    
    keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="connect_calendar")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await safe_send_message(update,
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def save_manager_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å email –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞."""
    if not context.args:
        await safe_send_message(update,
            "‚ùå –£–∫–∞–∂–∏—Ç–µ email –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: `/email john.doe@gmail.com`",
            parse_mode='Markdown'
        )
        return
    
    email = context.args[0]
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
    if '@' not in email or '.' not in email.split('@')[1]:
        await safe_send_message(update,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.\n"
            "–ü—Ä–∏–º–µ—Ä: `john.doe@gmail.com`",
            parse_mode='Markdown'
        )
        return
    
    user_id = update.effective_user.id
    
    # Defensive fix for potential UnboundLocalError
    from database import get_db as db_context_manager
    with db_context_manager() as db:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        
        if not user or user.role != UserRole.MANAGER:
            await safe_send_message(update,"‚ùå –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
        user.email = email
        db.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
        owners = db.query(User).filter(User.role == UserRole.OWNER).all()
        
        notification_text = f"""
üìß **–ù–æ–≤—ã–π email —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è**

üë§ {user.first_name} {user.last_name}
üè¢ –û—Ç–¥–µ–ª: {user.department.value}
üìß Email: {email}

–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Calendar.
–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç email –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤–æ –≤—Å—Ç—Ä–µ—á–∞—Ö.
"""
        
        for owner in owners:
            try:
                await safe_context_send(
                    context,
                    chat_id=owner.telegram_id,
                    text=notification_text,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Failed to notify owner {owner.id}: {e}")
    
    await safe_send_message(update,
        f"‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω: `{email}`\n\n"
        f"–í–ª–∞–¥–µ–ª—å—Ü—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤—è—Ç –≤–∞—Å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.\n"
        f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É.",
        parse_mode='Markdown'
    )

async def show_calendar_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é."""
    faq_text = """
‚ùì **–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ Google Calendar**

**Q: –ù—É–∂–µ–Ω –ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç Google?**
A: –ù–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Gmail.

**Q: –ú–æ–≥—É –ª–∏ —è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É?**
A: –î–∞, –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ Google Workspace.

**Q: –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å email?**
A: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/email –Ω–æ–≤—ã–π_email@gmail.com`

**Q: –ù–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ**
A: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º" –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å email.

**Q: –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞?**
A: –î–∞, —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Google Meet –∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä.

**Q: –ù—É–∂–Ω–∞ –ª–∏ –∫–∞–º–µ—Ä–∞ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏?**
A: –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ú–æ–∂–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º.

**Q: –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤–æ –≤—Å—Ç—Ä–µ—á–µ?**
A: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/my_meetings` –∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –≤—Å—Ç—Ä–µ—á—É.

**Q: –í—Å—Ç—Ä–µ—á–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ**
A: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø–∏—Å—å–º–µ.
"""
    
    keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="connect_calendar")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await safe_send_message(update,
        faq_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def disconnect_calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # Defensive fix for potential UnboundLocalError
    from database import get_db as db_context_manager
    with db_context_manager() as db:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        
        # Allow both MANAGER and OWNER to disconnect calendars
        if user and user.role in [UserRole.MANAGER, UserRole.OWNER]:
            # Clear calendar connection
            user.oauth_credentials = None
            user.google_calendar_id = None
            user.calendar_connected = False
            db.commit()
            
            role_name = "–≤–ª–∞–¥–µ–ª—å—Ü–∞" if user.role == UserRole.OWNER else "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"
            await safe_send_message(update,
                f"‚úÖ **–ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ—Ç–∫–ª—é—á–µ–Ω**\n\n"
                f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ Google Calendar –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –∫–æ–º–∞–Ω–¥–æ–π /calendar",
                parse_mode='Markdown'
            )
        else:
            await safe_send_message(update,"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")

async def show_calendar_sharing_guide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é."""
    from services.google_calendar import google_calendar_service as calendar_service
    service_email = calendar_service.get_service_account_email() or "service-account@example.com"
    
    guide_text = f"""
üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é**

–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞–π–¥–µ–Ω, –Ω–æ —É –±–æ—Ç–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É.

üîß **–ü–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:**

1Ô∏è‚É£ **–û—Ç–∫—Ä–æ–π—Ç–µ Google Calendar**
   ‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://calendar.google.com
   ‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏

2Ô∏è‚É£ **–û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è**
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ 3 —Ç–æ—á–∫–∏ —Ä—è–¥–æ–º —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø"

3Ô∏è‚É£ **–î–æ–±–∞–≤—å—Ç–µ –¥–æ—Å—Ç—É–ø –±–æ—Ç—É**
   ‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "+ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ email –±–æ—Ç–∞:
   
   üìß `{service_email}`
   
   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: **"–í–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"**
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"

4Ô∏è‚É£ **–ü—Ä–æ–≤–µ—Ä–∫–∞**
   ‚Ä¢ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ /calendar –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞

üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –ë–æ—Ç –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
‚Ä¢ –î–æ—Å—Ç—É–ø –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á

‚ùì **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: /calendar_simple
‚Ä¢ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ OAuth –∑–∞–Ω–æ–≤–æ
"""
    
    keyboard = [
        [InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å email –±–æ—Ç–∞", callback_data=f"copy_service_email:{service_email}")],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="connect_calendar")],
        [InlineKeyboardButton("üìÖ –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", callback_data="switch_to_simple_calendar")],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="connect_calendar")]
    ]
    
    await safe_send_message(update, guide_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def switch_to_simple_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    from handlers.manager_calendar_simple import simple_calendar_connect
    
    # –û—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ OAuth –¥–∞–Ω–Ω—ã–µ
    user_id = update.effective_user.id
    
    # Defensive fix for potential UnboundLocalError
    from database import get_db as db_context_manager
    with db_context_manager() as db:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if user:
            user.oauth_credentials = None
            user.calendar_connected = False
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º google_calendar_id –µ—Å–ª–∏ –µ—Å—Ç—å
            db.commit()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await simple_calendar_connect(update, context)