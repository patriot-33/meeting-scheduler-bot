"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Calendar —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏
"""
import logging
import traceback
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database import get_db, User, UserRole
from utils.decorators import require_registration
from config import settings

logger = logging.getLogger(__name__)

@require_registration
async def connect_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Calendar —á–µ—Ä–µ–∑ OAuth –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π."""
    user_id = update.effective_user.id
    logger.info(f"üîç DEBUG: connect_calendar started for user {user_id}")
    
    try:
        with get_db() as db:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            
            if user.role != UserRole.MANAGER:
                await update.message.reply_text(
                    "‚ùå –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º –æ—Ç–¥–µ–ª–æ–≤."
                )
                return
            
            # Check if calendar is already connected
            if user.oauth_credentials and user.google_calendar_id:
                await update.message.reply_text(
                    f"‚úÖ **Google Calendar —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!**\n\n"
                    f"üìß –ö–∞–ª–µ–Ω–¥–∞—Ä—å: {user.email}\n"
                    f"üéâ –í—ã –º–æ–∂–µ—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏ –∫–æ–º–∞–Ω–¥–æ–π /schedule\n\n"
                    f"–ß—Ç–æ–±—ã –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="reconnect_calendar")],
                        [InlineKeyboardButton("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É", callback_data="schedule_meeting")]
                    ]),
                    parse_mode='Markdown'
                )
                return
            
            instructions = """
üîó **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Calendar**

–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á –≤ –≤–∞—à–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:

1Ô∏è‚É£ **–ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å"**
   ‚Ä¢ –í—ã –ø–µ—Ä–µ–π–¥–µ—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google
   ‚Ä¢ –í–æ–π–¥–∏—Ç–µ –≤ –≤–∞—à Google –∞–∫–∫–∞—É–Ω—Ç

2Ô∏è‚É£ **–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é**
   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–†–∞–∑—Ä–µ—à–∏—Ç—å" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è

3Ô∏è‚É£ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è**
   ‚Ä¢ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç
   ‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏

üéØ **–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á –≤ –≤–∞—à–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
‚Ä¢ Google Meet —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—Å—Ç—Ä–µ—á–∞–º–∏

üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π OAuth 2.0 Google
‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é, –Ω–∏–∫–∞–∫–∏—Ö –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
"""
            
            # Generate OAuth URL
            logger.info(f"üîç DEBUG: Starting OAuth service import for user {user_id}")
            try:
                from services.oauth_service import oauth_service
                logger.info(f"üîç DEBUG: OAuth service imported successfully")
                logger.info(f"üîç DEBUG: OAuth service is_configured: {oauth_service.is_oauth_configured}")
            
                # Pre-check OAuth configuration 
                if not oauth_service.is_oauth_configured:
                    logger.info(f"üîç DEBUG: OAuth not configured, showing setup instructions")
                    instructions += "\n\n‚ùå **OAuth Client –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω**\n"
                    instructions += "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å:\n"
                    instructions += "‚Ä¢ `GOOGLE_OAUTH_CLIENT_JSON` –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è\n"
                    instructions += "‚Ä¢ –ò–ª–∏ —Ñ–∞–π–ª `oauth_client_key.json`\n\n"
                    instructions += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Google Cloud Console:\n"
                    instructions += "1. APIs & Services ‚Üí Credentials\n"
                    instructions += "2. Create OAuth 2.0 Client ‚Üí Web Application\n"
                    webhook_url = settings.webhook_url or "YOUR_WEBHOOK_URL"
                    instructions += f"3. Add redirect URI: `{webhook_url}/oauth/callback`"
                    
                    keyboard = [
                        [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="calendar_faq")],
                        [InlineKeyboardButton("üìß –°–æ–æ–±—â–∏—Ç—å email –≤–ª–∞–¥–µ–ª—å—Ü—É", callback_data="send_email_to_owner")],
                        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="nav_main_menu")]
                    ]
                    logger.info(f"üîç DEBUG: OAuth not configured path - message prepared")
                else:
                    logger.info(f"üîç DEBUG: Generating OAuth URL for user {user_id}")
                    oauth_url = oauth_service.generate_auth_url(user_id)
                    logger.info(f"üîç DEBUG: OAuth URL result: {'Generated' if oauth_url else 'None'}")
                    
                    if oauth_url:
                        logger.info(f"üîç DEBUG: OAuth URL generated successfully, length: {len(oauth_url)}")
                        keyboard = [
                            [InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Calendar", url=oauth_url)],
                            [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="calendar_faq")],
                            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="nav_main_menu")]
                        ]
                        logger.info(f"üîç DEBUG: OAuth configured path - message with URL prepared")
                    else:
                        logger.info(f"üîç DEBUG: OAuth URL generation failed")
                        # OAuth URL generation failed
                        instructions += "\n\n‚ùå **–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ OAuth URL**\n"
                        instructions += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                        instructions += "‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å OAuth Client JSON\n"
                        instructions += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫—É WEBHOOK_URL\n"
                        instructions += "‚Ä¢ Redirect URI –≤ Google Console"
                        keyboard = [
                            [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="calendar_faq")],
                            [InlineKeyboardButton("üìß –°–æ–æ–±—â–∏—Ç—å email –≤–ª–∞–¥–µ–ª—å—Ü—É", callback_data="send_email_to_owner")],
                            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="nav_main_menu")]
                        ]
                        logger.info(f"üîç DEBUG: OAuth URL failed path - message prepared")
            except Exception as oauth_error:
                logger.error(f"üîç DEBUG: OAuth service error for user {user_id}: {type(oauth_error).__name__}: {oauth_error}")
                logger.error(f"üîç DEBUG: OAuth traceback: {traceback.format_exc()}")
                instructions += f"\n\n‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ OAuth**\n`{str(oauth_error)}`\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                keyboard = [
                    [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="calendar_faq")],
                    [InlineKeyboardButton("üìß –°–æ–æ–±—â–∏—Ç—å email –≤–ª–∞–¥–µ–ª—å—Ü—É", callback_data="send_email_to_owner")],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="nav_main_menu")]
                ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            logger.info(f"üîç DEBUG: Sending response to user {user_id}")
            logger.info(f"üîç DEBUG: Message length: {len(instructions)} characters")
            logger.info(f"üîç DEBUG: Keyboard buttons count: {len(keyboard)}")
            
            try:
                await update.message.reply_text(
                    instructions, 
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                logger.info(f"üîç DEBUG: Response sent successfully to user {user_id}")
            except Exception as send_error:
                logger.error(f"üîç DEBUG: Failed to send message to user {user_id}: {type(send_error).__name__}: {send_error}")
                # Try sending without markdown formatting
                try:
                    await update.message.reply_text(
                        instructions.replace('**', '').replace('`', ''),
                        reply_markup=reply_markup
                    )
                    logger.info(f"üîç DEBUG: Response sent without markdown formatting")
                except Exception as fallback_error:
                    logger.error(f"üîç DEBUG: Fallback send also failed: {type(fallback_error).__name__}: {fallback_error}")
                    raise send_error
        
    except Exception as main_error:
        error_type = type(main_error).__name__
        logger.error(f"üîç DEBUG: Exception in connect_calendar for user {user_id}: {error_type}: {main_error}")
        logger.error(f"üîç DEBUG: Traceback: {traceback.format_exc()}")
        
        # Provide user-friendly error message instead of generic network error
        try:
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è**\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: `{error_type}`\n\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"‚Ä¢ –ö–æ–º–∞–Ω–¥—É `/calendar_simple` –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
                f"‚Ä¢ –ö–æ–º–∞–Ω–¥—É `/email –≤–∞—à_email@gmail.com` –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
                parse_mode='Markdown'
            )
        except Exception as reply_error:
            logger.error(f"Failed to send error message to user {user_id}: {reply_error}")
            # If we can't send a custom message, let the global error handler take over
            raise main_error

async def handle_calendar_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "connect_calendar":
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update –æ–±—ä–µ–∫—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
        fake_update = type('obj', (object,), {
            'effective_user': query.from_user,
            'message': type('obj', (object,), {
                'reply_text': query.edit_message_text
            })()
        })()
        await connect_calendar(fake_update, context)
    elif query.data == "reconnect_calendar":
        # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        fake_update = type('obj', (object,), {
            'effective_user': query.from_user,
            'message': type('obj', (object,), {
                'reply_text': query.edit_message_text
            })()
        })()
        await connect_calendar(fake_update, context)
    elif query.data == "send_email_to_owner":
        await send_email_prompt(update, context)
    elif query.data == "calendar_faq":
        await show_calendar_faq(update, context)

async def send_email_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É."""
    text = """
üìß **–û—Ç–ø—Ä–∞–≤–∫–∞ email –≤–ª–∞–¥–µ–ª—å—Ü—É**

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Google email –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
`–≤–∞—à–µ_–∏–º—è@gmail.com` –∏–ª–∏ `–≤–∞—à–µ_–∏–º—è@–∫–æ–º–ø–∞–Ω–∏—è.ru`

–í–ª–∞–¥–µ–ª–µ—Ü –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–∏—Ç –≤–∞—Å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`/email –≤–∞—à_email@gmail.com`
"""
    
    keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="connect_calendar")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def save_manager_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å email –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞."""
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ email –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: `/email john.doe@gmail.com`",
            parse_mode='Markdown'
        )
        return
    
    email = context.args[0]
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
    if '@' not in email or '.' not in email.split('@')[1]:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.\n"
            "–ü—Ä–∏–º–µ—Ä: `john.doe@gmail.com`",
            parse_mode='Markdown'
        )
        return
    
    user_id = update.effective_user.id
    
    with get_db() as db:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        
        if not user or user.role != UserRole.MANAGER:
            await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
        user.email = email
        db.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
        owners = db.query(User).filter(User.role == UserRole.OWNER).all()
        
        notification_text = f"""
üìß **–ù–æ–≤—ã–π email —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è**

üë§ {user.first_name} {user.last_name}
üè¢ –û—Ç–¥–µ–ª: {user.department.value}
üìß Email: {email}

–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Calendar.
–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç email –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤–æ –≤—Å—Ç—Ä–µ—á–∞—Ö.
"""
        
        for owner in owners:
            try:
                await context.bot.send_message(
                    chat_id=owner.telegram_id,
                    text=notification_text,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Failed to notify owner {owner.id}: {e}")
    
    await update.message.reply_text(
        f"‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω: `{email}`\n\n"
        f"–í–ª–∞–¥–µ–ª—å—Ü—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤—è—Ç –≤–∞—Å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.\n"
        f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É.",
        parse_mode='Markdown'
    )

async def show_calendar_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é."""
    faq_text = """
‚ùì **–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ Google Calendar**

**Q: –ù—É–∂–µ–Ω –ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç Google?**
A: –ù–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Gmail.

**Q: –ú–æ–≥—É –ª–∏ —è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É?**
A: –î–∞, –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ Google Workspace.

**Q: –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å email?**
A: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/email –Ω–æ–≤—ã–π_email@gmail.com`

**Q: –ù–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ**
A: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º" –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å email.

**Q: –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞?**
A: –î–∞, —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Google Meet –∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä.

**Q: –ù—É–∂–Ω–∞ –ª–∏ –∫–∞–º–µ—Ä–∞ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏?**
A: –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ú–æ–∂–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º.

**Q: –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤–æ –≤—Å—Ç—Ä–µ—á–µ?**
A: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/my_meetings` –∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –≤—Å—Ç—Ä–µ—á—É.

**Q: –í—Å—Ç—Ä–µ—á–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ**
A: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø–∏—Å—å–º–µ.
"""
    
    keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="connect_calendar")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        faq_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )