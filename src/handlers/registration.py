from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters
)
import logging

from src.database import get_db, User, UserRole
from src.config import settings

logger = logging.getLogger(__name__)

# Conversation states
FIRST_NAME, LAST_NAME, DEPARTMENT = range(3)

# Departments list
DEPARTMENTS = [
    "–ü—Ä–æ–¥–∞–∂–∏",
    "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
    "IT",
    "HR",
    "–§–∏–Ω–∞–Ω—Å—ã",
    "–û–ø–µ—Ä–∞—Ü–∏–∏",
    "–õ–æ–≥–∏—Å—Ç–∏–∫–∞",
    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
]

async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start the registration process."""
    user_id = update.effective_user.id
    
    with get_db() as db:
        # Check if user already exists
        existing_user = db.query(User).filter(User.telegram_id == user_id).first()
        
        if existing_user:
            if existing_user.role == UserRole.PENDING:
                await update.message.reply_text(
                    "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
            elif existing_user.role in [UserRole.ADMIN, UserRole.MANAGER]:
                await update.message.reply_text(
                    "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
                )
            return ConversationHandler.END
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏ –æ—Ç–¥–µ–ª–æ–≤.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )
    
    return FIRST_NAME

async def get_first_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Get user's first name."""
    first_name = update.message.text.strip()
    
    if len(first_name) < 2:
        await update.message.reply_text(
            "–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:"
        )
        return FIRST_NAME
    
    context.user_data['first_name'] = first_name
    await update.message.reply_text(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {first_name}!\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:"
    )
    
    return LAST_NAME

async def get_last_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Get user's last name."""
    last_name = update.message.text.strip()
    
    if len(last_name) < 2:
        await update.message.reply_text(
            "–§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Ñ–∞–º–∏–ª–∏—é:"
        )
        return LAST_NAME
    
    context.user_data['last_name'] = last_name
    
    # Create department selection keyboard
    keyboard = []
    for i in range(0, len(DEPARTMENTS), 2):
        row = []
        row.append(InlineKeyboardButton(DEPARTMENTS[i], callback_data=f"dept_{i}"))
        if i + 1 < len(DEPARTMENTS):
            row.append(InlineKeyboardButton(DEPARTMENTS[i + 1], callback_data=f"dept_{i + 1}"))
        keyboard.append(row)
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª:",
        reply_markup=reply_markup
    )
    
    return DEPARTMENT

async def get_department(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Get user's department and complete registration."""
    query = update.callback_query
    await query.answer()
    
    # Parse department index
    dept_index = int(query.data.split('_')[1])
    department = DEPARTMENTS[dept_index]
    
    # Save to database
    user_id = update.effective_user.id
    username = update.effective_user.username
    first_name = context.user_data.get('first_name')
    last_name = context.user_data.get('last_name')
    
    with get_db() as db:
        new_user = User(
            telegram_id=user_id,
            telegram_username=username,
            first_name=first_name,
            last_name=last_name,
            department=department,
            role=UserRole.PENDING
        )
        db.add(new_user)
        db.commit()
    
    await query.edit_message_text(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
        f"=d {first_name} {last_name}\n"
        f"< B45;: {department}\n\n"
        f"‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
        f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞."
    )
    
    # Notify admins
    for admin_id in settings.admin_ids_list:
        try:
            keyboard = [[
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_approve_{user_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{user_id}")
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n\n"
                     f"< {user_id}\n"
                     f"=d {first_name} {last_name}\n"
                     f"= @{username}\n"
                     f"< {department}",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id}: {e}")
    
    # Clear user data
    context.user_data.clear()
    
    return ConversationHandler.END

async def cancel_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel the registration process."""
    await update.message.reply_text(
        "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ."
    )
    context.user_data.clear()
    return ConversationHandler.END

def get_registration_handler():
    """Return the registration conversation handler."""
    return ConversationHandler(
        entry_points=[CommandHandler('register', start_registration)],
        states={
            FIRST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_first_name)],
            LAST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_last_name)],
            DEPARTMENT: [CallbackQueryHandler(get_department, pattern="^dept_")]
        },
        fallbacks=[CommandHandler('cancel', cancel_registration)],
    )