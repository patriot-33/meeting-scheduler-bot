from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime, timedelta
import logging
from sqlalchemy import and_

from src.database import get_db, User, Meeting, UserRole, UserStatus, MeetingStatus, Reminder
from src.services.meeting_service import MeetingService
from src.services.owner_service import OwnerService
from src.services.google_calendar import GoogleCalendarService
from src.services.reminder_service import ReminderService
from src.config import settings
from src.utils.decorators import require_registration

logger = logging.getLogger(__name__)

@require_registration
async def show_available_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show available meeting slots when both owners are free."""
    user_id = update.effective_user.id
    
    with get_db() as db:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        
        if user.role != UserRole.MANAGER:
            await update.message.reply_text(
                "‚ùå –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º –æ—Ç–¥–µ–ª–æ–≤."
            )
            return
            
        if user.status != UserStatus.ACTIVE:
            status_text = {
                UserStatus.VACATION: "–í –æ—Ç–ø—É—Å–∫–µ",
                UserStatus.SICK_LEAVE: "–ù–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º",
                UserStatus.BUSINESS_TRIP: "–í –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–µ"
            }.get(user.status, "–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ")
            
            await update.message.reply_text(
                f"‚ùå –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Å—Ç–∞—Ç—É—Å–µ: {status_text}.\n\n"
                f"–î–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á —Å–Ω–∞—á–∞–ª–∞ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å: /active"
            )
            return
    
    try:
        with get_db() as db:
            meeting_service = MeetingService(db)
            
            # Get available slots when both owners are free
            available_slots = meeting_service.get_available_slots(days_ahead=14)
            
            if not available_slots:
                await update.message.reply_text(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n\n"
                    "üïê –°–ª–æ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Å–≤–æ–±–æ–¥–Ω—ã –æ–±–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–∏–∑–Ω–µ—Å–∞.\n"
                    "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
                return
        
        # Create keyboard with available slots
        keyboard = []
        message_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á:\n\n"
        
        for date_str, slots in available_slots.items():
            if slots:  # Only show dates with available slots
                date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                day_name = date_obj.strftime('%A')
                formatted_date = date_obj.strftime('%d.%m.%Y')
                
                message_text += f"üìÖ **{day_name}, {formatted_date}**\n"
                
                row = []
                for slot in slots:
                    callback_data = f"book_{date_str}_{slot}"
                    row.append(InlineKeyboardButton(slot, callback_data=callback_data))
                    
                    if len(row) == 2:  # Two buttons per row
                        keyboard.append(row)
                        row = []
                
                if row:  # Add remaining buttons
                    keyboard.append(row)
                
                message_text += "\n"
        
        if not keyboard:
            await update.message.reply_text(
                "–ù–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤."
            )
            return
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error getting available slots: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_booking_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle slot booking callback."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    callback_data = query.data  # format: book_2024-01-15_14:00
    
    try:
        _, date_str, time_str = callback_data.split('_')
        
        with get_db() as db:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            
            if not user or user.status != UserStatus.ACTIVE:
                await query.edit_message_text(
                    "–ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ."
                )
                return
            
            # Check if user already has a meeting scheduled for next 2 weeks
            two_weeks_ago = datetime.now() - timedelta(days=14)
            recent_meeting = db.query(Meeting).filter(
                and_(
                    Meeting.manager_id == user.id,
                    Meeting.scheduled_time > two_weeks_ago,
                    Meeting.status == MeetingStatus.SCHEDULED
                )
            ).first()
            
            if recent_meeting:
                next_allowed = recent_meeting.scheduled_time + timedelta(days=14)
                await query.edit_message_text(
                    f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞.\n\n"
                    f"–°–ª–µ–¥—É—é—â—É—é –≤—Å—Ç—Ä–µ—á—É –º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–µ —Ä–∞–Ω–µ–µ {next_allowed.strftime('%d.%m.%Y')}."
                )
                return
        
        # Create meeting
        calendar_service = GoogleCalendarService()
        meeting_date = datetime.strptime(date_str, '%Y-%m-%d')
        
        # Double-check slot availability
        if not calendar_service.check_slot_availability(meeting_date, time_str):
            await query.edit_message_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
            )
            return
        
        # Create meeting in Google Calendar
        event_id, meet_link = calendar_service.create_meeting(
            f"{user.first_name} {user.last_name}",
            user.department.value,  # Convert enum to string
            meeting_date,
            time_str,
            user.email  # Pass manager's email
        )
        
        # Save to database
        hour, minute = map(int, time_str.split(':'))
        scheduled_time = meeting_date.replace(hour=hour, minute=minute)
        
        with get_db() as db:
            meeting = Meeting(
                manager_id=user.id,
                scheduled_time=scheduled_time,
                google_event_id=event_id,
                google_meet_link=meet_link,
                status=MeetingStatus.SCHEDULED
            )
            db.add(meeting)
            db.commit()
            
            # Schedule reminders
            reminder_service = ReminderService()
            await reminder_service.schedule_meeting_reminders(meeting.id)
            await reminder_service.schedule_next_meeting_reminders(user.id, scheduled_time)
        
        # Notify admins
        for admin_id in settings.admin_ids_list:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"üìÖ –ù–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞\n\n"
                         f"üë§ {user.first_name} {user.last_name}\n"
                         f"üè¢ {user.department}\n"
                         f"üìÖ {scheduled_time.strftime('%d.%m.%Y –≤ %H:%M')}\n"
                         f"üîó {meet_link}"
                )
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}: {e}")
        
        await query.edit_message_text(
            f"–í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!\n\n"
            f"üìÖ –î–∞—Ç–∞: {scheduled_time.strftime('%d.%m.%Y')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time_str}\n"
            f"üîó Google Meet: {meet_link}\n\n"
            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å –¥–æ –≤—Å—Ç—Ä–µ—á–∏."
        )
        
    except Exception as e:
        logger.error(f"Error booking meeting: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@require_registration
async def show_my_meetings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show user's scheduled meetings."""
    user_id = update.effective_user.id
    
    with get_db() as db:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        
        meetings = db.query(Meeting).filter(
            and_(
                Meeting.manager_id == user.id,
                Meeting.status == MeetingStatus.SCHEDULED,
                Meeting.scheduled_time > datetime.now()
            )
        ).order_by(Meeting.scheduled_time).all()
        
        if not meetings:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á. –ù–∞–∂–º–∏—Ç–µ /schedule –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏."
            )
            return
        
        message_text = "–í–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏:\n\n"
        
        keyboard = []
        for meeting in meetings:
            time_str = meeting.scheduled_time.strftime('%d.%m.%Y –≤ %H:%M')
            message_text += f"üìÖ {time_str}\n"
            
            # Add cancel button
            keyboard.append([
                InlineKeyboardButton(
                    f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {meeting.scheduled_time.strftime('%d.%m')}",
                    callback_data=f"cancel_{meeting.id}"
                )
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        await update.message.reply_text(message_text, reply_markup=reply_markup)

async def handle_cancel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle meeting cancellation."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    meeting_id = int(query.data.split('_')[1])
    
    with get_db() as db:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        meeting = db.query(Meeting).filter(
            and_(
                Meeting.id == meeting_id,
                Meeting.manager_id == user.id
            )
        ).first()
        
        if not meeting:
            await query.edit_message_text(
                "–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            )
            return
        
        # Cancel in Google Calendar
        try:
            calendar_service = GoogleCalendarService()
            calendar_service.cancel_meeting(meeting.google_event_id)
        except Exception as e:
            logger.error(f"Error canceling Google Calendar event: {e}")
        
        # Update database
        meeting.status = MeetingStatus.CANCELLED
        db.commit()
        
        # Cancel related reminders
        db.query(Reminder).filter(
            Reminder.meeting_id == meeting.id
        ).update({'sent': True})
        db.commit()
        
        await query.edit_message_text(
            f"‚ùå –í—Å—Ç—Ä–µ—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
            f"üìÖ {meeting.scheduled_time.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
            f"–ú–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É —á–µ—Ä–µ–∑ /schedule"
        )

# Status management functions
@require_registration
async def set_vacation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Set user status to vacation."""
    await _set_user_status(update, context, UserStatus.VACATION, "–í –æ—Ç–ø—É—Å–∫–µ")

@require_registration
async def set_sick_leave(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Set user status to sick leave."""
    await _set_user_status(update, context, UserStatus.SICK_LEAVE, "–ù–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º")

@require_registration
async def set_business_trip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Set user status to business trip."""
    await _set_user_status(update, context, UserStatus.BUSINESS_TRIP, "–í –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–µ")

@require_registration
async def set_active(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Set user status to active."""
    await _set_user_status(update, context, UserStatus.ACTIVE, "–ê–∫—Ç–∏–≤–Ω—ã–π")

async def _set_user_status(update: Update, context: ContextTypes.DEFAULT_TYPE, status: UserStatus, status_text: str):
    """Helper function to set user status."""
    user_id = update.effective_user.id
    
    with get_db() as db:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        old_status = user.status
        user.status = status
        db.commit()
        
        await update.message.reply_text(
            f"–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_text}"
        )
        
        # If returning from non-active status, schedule reminder for next meeting
        if old_status != UserStatus.ACTIVE and status == UserStatus.ACTIVE:
            last_meeting = db.query(Meeting).filter(
                and_(
                    Meeting.manager_id == user.id,
                    Meeting.status == MeetingStatus.COMPLETED
                )
            ).order_by(Meeting.scheduled_time.desc()).first()
            
            if last_meeting:
                reminder_service = ReminderService()
                await reminder_service.schedule_next_meeting_reminders(
                    user.id, last_meeting.scheduled_time
                )

@require_registration
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show user profile."""
    user_id = update.effective_user.id
    
    with get_db() as db:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        
        # Get meeting statistics
        total_meetings = db.query(Meeting).filter(Meeting.manager_id == user.id).count()
        completed_meetings = db.query(Meeting).filter(
            and_(
                Meeting.manager_id == user.id,
                Meeting.status == MeetingStatus.COMPLETED
            )
        ).count()
        
        last_meeting = db.query(Meeting).filter(
            Meeting.manager_id == user.id
        ).order_by(Meeting.scheduled_time.desc()).first()
        
        status_emoji = {
            UserStatus.ACTIVE: "‚úÖ",
            UserStatus.VACATION: "üèñÔ∏è",
            UserStatus.SICK_LEAVE: "üè•",
            UserStatus.BUSINESS_TRIP: "‚úàÔ∏è"
        }.get(user.status, "‚ùì")
        
        profile_text = (
            f"üë§ **–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
            f"üìù –ò–º—è: {user.first_name} {user.last_name}\n"
            f"üè¢ –û—Ç–¥–µ–ª: {user.department}\n"
            f"{status_emoji} –°—Ç–∞—Ç—É—Å: {user.status.value}\n\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"üìà –í—Å–µ–≥–æ –≤—Å—Ç—Ä–µ—á: {total_meetings}\n"
            f"‚úÖ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ: {completed_meetings}\n"
        )
        
        if last_meeting:
            profile_text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –≤—Å—Ç—Ä–µ—á–∞: {last_meeting.scheduled_time.strftime('%d.%m.%Y')}\n"
        
        await update.message.reply_text(profile_text, parse_mode='Markdown')