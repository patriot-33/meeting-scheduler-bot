from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from datetime import datetime, timedelta, date
import logging
import traceback

from database import get_db, User, UserRole, UserStatus, Meeting, MeetingStatus
from services.meeting_service import MeetingService
from services.google_calendar import google_calendar_service
from services.reminder_service import ReminderService
from config import settings
from utils.decorators import require_registration

logger = logging.getLogger(__name__)

# MeetingService will be initialized in functions with DB context

async def notify_owners_about_meeting(context: ContextTypes.DEFAULT_TYPE, meeting, manager: User):
    """Send telegram notification to all owners about new meeting."""
    try:
        from services.owner_service import OwnerService
        
        owners = OwnerService.get_all_owners()
        if not owners:
            logger.warning("No owners found to notify")
            return
        
        # Format meeting details
        formatted_date = meeting.scheduled_time.strftime('%d.%m.%Y')
        formatted_time = meeting.scheduled_time.strftime('%H:%M')
        day_name = meeting.scheduled_time.strftime('%A')
        
        # Russian day names
        russian_days = {
            'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '–°—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥', 'Friday': '–ü—è—Ç–Ω–∏—Ü–∞', 'Saturday': '–°—É–±–±–æ—Ç–∞', 'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }
        russian_day = russian_days.get(day_name, day_name)
        
        message = f"""üîî –ù–û–í–ê–Ø –í–°–¢–†–ï–ß–ê –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ê!

üìÖ {russian_day}, {formatted_date}
üïê {formatted_time}
üë§ {manager.first_name} {manager.last_name}
üè¢ {manager.department.value}

ID –≤—Å—Ç—Ä–µ—á–∏: {meeting.id}"""
        
        if meeting.google_meet_link:
            message += f"\nüîó Google Meet: {meeting.google_meet_link}"
        
        # Send notification to all owners
        for owner in owners:
            try:
                await context.bot.send_message(
                    chat_id=owner.telegram_id,
                    text=message,
                    parse_mode='HTML'
                )
                logger.info(f"‚úÖ Notification sent to owner {owner.telegram_id}")
            except Exception as e:
                logger.error(f"Failed to send notification to owner {owner.telegram_id}: {e}")
                
    except Exception as e:
        logger.error(f"Failed to notify owners: {e}")

# –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
RUSSIAN_WEEKDAYS = {
    'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
    'Wednesday': '–°—Ä–µ–¥–∞',
    'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
    'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
    'Saturday': '–°—É–±–±–æ—Ç–∞',
    'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}

@require_registration
async def show_available_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show available dates for meetings."""
    user_id = update.effective_user.id
    
    with get_db() as db:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        
        if user.role != UserRole.MANAGER:
            await update.message.reply_text(
                "‚ùå –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º –æ—Ç–¥–µ–ª–æ–≤."
            )
            return
        
        # Check user status
        if user.status != UserStatus.ACTIVE:
            await update.message.reply_text(
                "‚è∏ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ.\n"
                f"–î–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á —Å–Ω–∞—á–∞–ª–∞ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å: /active"
            )
            return
        
        # CRITICAL: Check if manager has connected Google Calendar
        if not user.email:
            await update.message.reply_text(
                "‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï GOOGLE CALENDAR\n\n"
                "–î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–∞—à Google Calendar.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /calendar –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="connect_calendar")]
                ])
            )
            return
    
    try:
        with get_db() as db:
            meeting_service = MeetingService(db)
            
            # Get available slots when owners are free
            available_slots = meeting_service.get_available_slots(days_ahead=14)
            
            if not available_slots:
                await update.message.reply_text(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n\n"
                    "üïê –°–ª–æ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Å–≤–æ–±–æ–¥–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü—ã –±–∏–∑–Ω–µ—Å–∞.\n"
                    "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
                return
        
        # Create keyboard with available dates (only days, not time slots)
        keyboard = []
        message_text = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:\n\n"
        
        sorted_dates = sorted(available_slots.keys())
        
        for date_str in sorted_dates:
            slots = available_slots[date_str]
            if slots:  # Only show dates with available slots
                date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                english_day = date_obj.strftime('%A')
                russian_day = RUSSIAN_WEEKDAYS.get(english_day, english_day)
                formatted_date = date_obj.strftime('%d.%m.%Y')
                
                # Show day with number of available slots
                button_text = f"{russian_day}, {formatted_date} ({len(slots)} —Å–ª–æ—Ç–æ–≤)"
                callback_data = f"date_{date_str}"
                
                keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        if not keyboard:
            await update.message.reply_text(
                "–ù–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤."
            )
            return
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Error showing available slots: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def show_day_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show available time slots for selected date."""
    query = update.callback_query
    await query.answer()
    
    # Extract date from callback data
    date_str = query.data.replace('date_', '')
    
    try:
        with get_db() as db:
            meeting_service = MeetingService(db)
            available_slots = meeting_service.get_available_slots(days_ahead=14)
            
            if date_str not in available_slots:
                await query.edit_message_text(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Å–ª–æ—Ç—ã –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
                )
                return
            
            slots = available_slots[date_str]
            if not slots:
                await query.edit_message_text(
                    "‚ùå –ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤."
                )
                return
            
            # Format date for display
            date_obj = datetime.strptime(date_str, '%Y-%m-%d')
            english_day = date_obj.strftime('%A')
            russian_day = RUSSIAN_WEEKDAYS.get(english_day, english_day)
            formatted_date = date_obj.strftime('%d.%m.%Y')
            
            # Create keyboard with time slots
            keyboard = []
            message_text = f"üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ {russian_day}, {formatted_date}:\n\n"
            
            # Group slots in rows of 3
            row = []
            for slot in slots:
                callback_data = f"book_{date_str}_{slot}"
                row.append(InlineKeyboardButton(slot, callback_data=callback_data))
                
                if len(row) == 3:  # Three time slots per row
                    keyboard.append(row)
                    row = []
            
            if row:  # Add remaining buttons
                keyboard.append(row)
            
            # Add back button
            keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è", callback_data="back_to_dates")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message_text,
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"Error showing day slots: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def back_to_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Go back to date selection."""
    query = update.callback_query
    await query.answer()
    
    # Get user from database instead of context.user_data
    user = None
    if update.effective_user:
        user_id = update.effective_user.id
        with get_db() as db:
            user = db.query(User).filter(User.telegram_id == user_id).first()
    
    await show_available_slots_inline(query, user)

async def show_available_slots_inline(query, user=None):
    """Helper function to show date selection inline with calendar validation."""
    try:
        # Check calendar requirement if user provided
        if user and not user.email:
            await query.edit_message_text(
                "‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï GOOGLE CALENDAR\n\n"
                "–î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–∞—à Google Calendar.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="connect_calendar")]
                ])
            )
            return
            
        with get_db() as db:
            meeting_service = MeetingService(db)
            available_slots = meeting_service.get_available_slots(days_ahead=14)
            
            if not available_slots:
                await query.edit_message_text(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤."
                )
                return
        
        # Create keyboard with available dates
        keyboard = []
        message_text = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:\n\n"
        
        sorted_dates = sorted(available_slots.keys())
        
        for date_str in sorted_dates:
            slots = available_slots[date_str]
            if slots:
                date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                english_day = date_obj.strftime('%A')
                russian_day = RUSSIAN_WEEKDAYS.get(english_day, english_day)
                formatted_date = date_obj.strftime('%d.%m.%Y')
                
                button_text = f"{russian_day}, {formatted_date} ({len(slots)} —Å–ª–æ—Ç–æ–≤)"
                callback_data = f"date_{date_str}"
                
                keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Error showing available slots inline: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@require_registration
async def show_my_meetings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show user's scheduled meetings with cancellation options."""
    try:
        # Get user from database instead of context.user_data
        user_id = update.effective_user.id
        with get_db() as db:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                error_msg = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                if update.callback_query:
                    await update.callback_query.answer(error_msg)
                else:
                    await update.message.reply_text(error_msg)
                return
            
            # Get user's meetings
            meetings = db.query(Meeting).filter(
                Meeting.manager_id == user.id,
                Meeting.status == MeetingStatus.SCHEDULED,
                Meeting.scheduled_time > datetime.now()
            ).order_by(Meeting.scheduled_time).all()
        
        if not meetings:
            no_meetings_msg = "üìÖ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á"
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="manager_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    no_meetings_msg,
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    no_meetings_msg,
                    reply_markup=reply_markup
                )
            return
        
        # Build meetings list with cancel buttons
        keyboard = []
        text = "üìÖ –í–ê–®–ò –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–ï –í–°–¢–†–ï–ß–ò:\n\n"
        
        for meeting in meetings:
            formatted_date = meeting.scheduled_time.strftime('%d.%m.%Y')
            formatted_time = meeting.scheduled_time.strftime('%H:%M')
            day_name = meeting.scheduled_time.strftime('%A')
            
            # Russian day names
            russian_days = {
                'Monday': '–ü–Ω', 'Tuesday': '–í—Ç', 'Wednesday': '–°—Ä',
                'Thursday': '–ß—Ç', 'Friday': '–ü—Ç', 'Saturday': '–°–±', 'Sunday': '–í—Å'
            }
            russian_day = russian_days.get(day_name, day_name)
            
            text += f"üóì {russian_day} {formatted_date} –≤ {formatted_time}\n"
            text += f"üìã ID: {meeting.id}\n"
            if meeting.google_meet_link:
                text += f"üîó Google Meet\n"
            text += "\n"
            
            # Add cancel button for each meeting
            keyboard.append([
                InlineKeyboardButton(
                    f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É {formatted_date}", 
                    callback_data=f"cancel_meeting_{meeting.id}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="manager_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Handle both callback query and regular message
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                text,
                reply_markup=reply_markup
            )
        
    except Exception as e:
        logger.error(f"Error showing meetings: {e}")
        # Handle error response for both types
        error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å—Ç—Ä–µ—á"
        if update.callback_query:
            await update.callback_query.answer(error_msg)
        else:
            await update.message.reply_text(error_msg)

@require_registration
async def cancel_meeting_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle meeting cancellation."""
    try:
        query = update.callback_query
        if not query:
            await update.message.reply_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é –≤—Å—Ç—Ä–µ—á")
            return
            
        meeting_id = int(query.data.split('_')[2])
        
        # Get user from database instead of context.user_data
        user_id = update.effective_user.id
        with get_db() as db:
            user = db.query(User).filter(User.telegram_id == user_id).first()
        
        if not user:
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # Verify meeting belongs to user
        with get_db() as db:
            meeting = db.query(Meeting).filter(
                Meeting.id == meeting_id,
                Meeting.manager_id == user.id,
                Meeting.status == MeetingStatus.SCHEDULED
            ).first()
            
            if not meeting:
                await query.answer("‚ùå –í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
            
            # Check if meeting is too soon (less than 2 hours)
            time_until_meeting = meeting.scheduled_time - datetime.now()
            if time_until_meeting.total_seconds() < 7200:  # 2 hours
                await query.answer("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 —á–∞—Å–∞")
                return
            
            # Cancel the meeting
            meeting_service = MeetingService(db)
            success = meeting_service.cancel_meeting(meeting.id)
            
            if success:
                # Notify owners about cancellation
                await notify_owners_about_cancellation(context, meeting, user)
                
                await query.answer("‚úÖ –í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                # Refresh the meetings list
                await show_my_meetings(update, context)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Å—Ç—Ä–µ—á–∏")
                
    except Exception as e:
        logger.error(f"Error cancelling meeting: {e}")
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Å—Ç—Ä–µ—á–∏")

async def notify_owners_about_cancellation(context: ContextTypes.DEFAULT_TYPE, meeting, manager: User):
    """Notify owners about meeting cancellation."""
    try:
        from services.owner_service import OwnerService
        
        owners = OwnerService.get_all_owners()
        if not owners:
            return
        
        formatted_date = meeting.scheduled_time.strftime('%d.%m.%Y')
        formatted_time = meeting.scheduled_time.strftime('%H:%M')
        
        message = f"""üö´ –í–°–¢–†–ï–ß–ê –û–¢–ú–ï–ù–ï–ù–ê!

üìÖ {formatted_date} –≤ {formatted_time}
üë§ {manager.first_name} {manager.last_name}
üè¢ {manager.department.value}

ID –≤—Å—Ç—Ä–µ—á–∏: {meeting.id}"""
        
        for owner in owners:
            if owner.telegram_id:
                try:
                    await context.bot.send_message(
                        chat_id=owner.telegram_id,
                        text=message
                    )
                except Exception as e:
                    logger.error(f"Failed to notify owner {owner.id}: {e}")
                    
    except Exception as e:
        logger.error(f"Error notifying owners about cancellation: {e}")

@require_registration
async def show_manager_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show manager main menu."""
    try:
        keyboard = [
            [InlineKeyboardButton("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É", callback_data="schedule_meeting")],
            [InlineKeyboardButton("üóì –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏", callback_data="my_meetings")],
        ]
        
        text = f"üë®‚Äçüíº –ú–ï–ù–Æ –ú–ï–ù–ï–î–ñ–ï–†–ê\n\nüë§ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        # Handle both callback query and regular message
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
    except Exception as e:
        logger.error(f"Error showing manager menu: {e}")
        # Handle error response for both types
        error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é"
        if update.callback_query:
            await update.callback_query.answer(error_msg)
        else:
            await update.message.reply_text(error_msg)

async def show_available_slots_inline_wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Wrapper for show_available_slots_inline that handles user fetching."""
    query = update.callback_query
    if query:
        # Get user from database instead of context.user_data
        user = None
        if update.effective_user:
            user_id = update.effective_user.id
            with get_db() as db:
                user = db.query(User).filter(User.telegram_id == user_id).first()
        await show_available_slots_inline(query, user)

async def book_meeting_slot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Book a specific meeting slot."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # Parse callback data: book_2025-01-15_14:00
    callback_parts = query.data.split('_')
    if len(callback_parts) != 3:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞.")
        return
        
    date_str = callback_parts[1]
    time_str = callback_parts[2]
    
    try:
        with get_db() as db:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            meeting_service = MeetingService(db)
            
            # Parse meeting datetime
            meeting_date = datetime.strptime(date_str, '%Y-%m-%d')
            time_obj = datetime.strptime(time_str, '%H:%M').time()
            meeting_datetime = datetime.combine(meeting_date.date(), time_obj)
            
            # Check if user already has a meeting this week
            week_start = meeting_date - timedelta(days=meeting_date.weekday())
            week_end = week_start + timedelta(days=6)
            
            existing_meeting = db.query(Meeting).filter(
                Meeting.manager_id == user.id,
                Meeting.scheduled_time >= week_start,
                Meeting.scheduled_time <= week_end,
                Meeting.status == MeetingStatus.SCHEDULED
            ).first()
            
            if existing_meeting:
                next_allowed = existing_meeting.scheduled_time + timedelta(days=7)
                await query.edit_message_text(
                    f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é.\n"
                    f"–°–ª–µ–¥—É—é—â—É—é –≤—Å—Ç—Ä–µ—á—É –º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–µ —Ä–∞–Ω–µ–µ {next_allowed.strftime('%d.%m.%Y')}."
                )
                return
        
        # Check slot availability using meeting service
        logger.info(f"üîç DEBUG: Checking slot availability for {meeting_datetime}")
        slot_available = meeting_service.is_slot_available(meeting_datetime)
        logger.info(f"üîç DEBUG: Slot availability result: {slot_available}")
        
        if not slot_available:
            await query.edit_message_text(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
            )
            return
        
        # Create meeting
        try:
            logger.info(f"üîç DEBUG: Starting meeting creation for user {user.id} at {meeting_datetime}")
            meeting = meeting_service.create_meeting(user.id, meeting_datetime)
            logger.info(f"üîç DEBUG: Meeting service returned: {meeting}")
            
            if meeting:
                # CRITICAL FIX: Send telegram notifications to owners
                await notify_owners_about_meeting(context, meeting, user)
                # Format success message
                english_day = meeting_datetime.strftime('%A')
                russian_day = RUSSIAN_WEEKDAYS.get(english_day, english_day)
                formatted_date = meeting_datetime.strftime('%d.%m.%Y')
                
                success_message = (
                    f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                    f"üìÖ {russian_day}, {formatted_date}\n"
                    f"üïê {time_str}\n"
                    f"üë§ {user.first_name} {user.last_name}\n"
                    f"üè¢ {user.department.value}\n\n"
                )
                
                # Add Google Meet link if available
                if meeting.google_meet_link:
                    success_message += f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É]({meeting.google_meet_link})\n\n"
                
                success_message += (
                    "üìß –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.\n"
                    "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∑–∞ 7, 3 –∏ 1 –¥–µ–Ω—å –¥–æ –≤—Å—Ç—Ä–µ—á–∏."
                )
                
                await query.edit_message_text(
                    success_message,
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
                
                logger.info(f"Meeting created successfully: {meeting.id}")
                
            else:
                logger.error(f"üîç DEBUG: Meeting service returned None/False for user {user.id}")
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                
        except Exception as e:
            logger.error(f"üîç DEBUG: Exception creating meeting for user {user.id}: {type(e).__name__}: {e}")
            logger.error(f"üîç DEBUG: Meeting creation traceback: {traceback.format_exc()}")
            
            # Enhanced diagnostics
            try:
                import psutil
                logger.error(f"üîç SYSTEM: CPU {psutil.cpu_percent()}%, Memory {psutil.virtual_memory().percent}%")
                logger.error(f"üîç CONTEXT: User {user.first_name} {user.last_name}, Time {booking_time}")
                logger.error(f"üîç CALENDAR: Service available? {google_calendar_service.is_available}")
            except Exception as diag_error:
                logger.error(f"üîç DIAGNOSTIC ERROR: {diag_error}")
            
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
                
    except Exception as e:
        logger.error(f"Error booking meeting: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# Handler registration
def get_manager_handlers():
    """Return list of manager-related handlers."""
    return [
        CommandHandler('schedule', show_available_slots),
        CallbackQueryHandler(show_day_slots, pattern=r'^date_\d{4}-\d{2}-\d{2}$'),
        CallbackQueryHandler(back_to_dates, pattern='^back_to_dates$'),
        CallbackQueryHandler(book_meeting_slot, pattern=r'^book_\d{4}-\d{2}-\d{2}_\d{2}:\d{2}$'),
        CallbackQueryHandler(show_my_meetings, pattern='^my_meetings$'),
        CallbackQueryHandler(show_manager_menu, pattern='^manager_menu$'),
        CallbackQueryHandler(cancel_meeting_callback, pattern=r'^cancel_meeting_\d+$'),
        CallbackQueryHandler(lambda u, c: show_available_slots(u, c), pattern='^schedule_meeting$'),
        CallbackQueryHandler(lambda u, c: show_available_slots_inline_wrapper(u, c), pattern='^schedule_meeting_inline$'),
    ]