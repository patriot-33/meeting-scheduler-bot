#!/usr/bin/env python3
"""
Data Backup Script for Meeting Scheduler Bot
–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
"""

import sys
import json
import sqlite3
from datetime import datetime

def backup_data():
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ JSON"""
    
    db_path = 'test.db'  # Will use database from current directory
    backup_data = {
        'backup_timestamp': datetime.now().isoformat(),
        'users': [],
        'owner_availability': [],
        'meetings': [],
        'reminders': []
    }
    
    try:
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ dict
        cursor = conn.cursor()
        
        # –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT * FROM users")
        backup_data['users'] = [dict(row) for row in cursor.fetchall()]
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
        cursor.execute("SELECT * FROM owner_availability")
        backup_data['owner_availability'] = [dict(row) for row in cursor.fetchall()]
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤—Å—Ç—Ä–µ—á
        cursor.execute("SELECT * FROM meetings")
        backup_data['meetings'] = [dict(row) for row in cursor.fetchall()]
        
        # –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        cursor.execute("SELECT * FROM reminders")
        backup_data['reminders'] = [dict(row) for row in cursor.fetchall()]
        
        conn.close()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º backup
        backup_filename = f'data_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
        with open(backup_filename, 'w', encoding='utf-8') as f:
            json.dump(backup_data, f, ensure_ascii=False, indent=2, default=str)
            
        print(f"‚úÖ Data backed up to {backup_filename}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_records = sum(len(backup_data[key]) for key in ['users', 'owner_availability', 'meetings', 'reminders'])
        print(f"üìä Backed up {total_records} total records:")
        for table, records in backup_data.items():
            if table != 'backup_timestamp' and records:
                print(f"  - {table}: {len(records)} records")
                
        return backup_filename
        
    except Exception as e:
        print(f"‚ùå Backup failed: {e}")
        return None

if __name__ == "__main__":
    backup_data()
