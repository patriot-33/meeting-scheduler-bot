#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ webhook –¥–ª—è –±–æ—Ç–∞ –Ω–∞ Render
"""
import json
import urllib.request
import urllib.parse
import sys

# –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω —Å—é–¥–∞
BOT_TOKEN = "8318735096:AAHQZ-GJNxr4Jon0T9lR5DD0EJx-s1O_7Ec"

if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
    print("‚ùå –û–®–ò–ë–ö–ê: –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª quick_webhook_fix.py –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
    print("   –°—Ç—Ä–æ–∫–∞ 11: BOT_TOKEN = \"–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å\"")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
WEBHOOK_URL = "https://meeting-scheduler-bot-fkp8.onrender.com/webhook"

def make_request(method, params=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Telegram API"""
    url = f"{API_URL}/{method}"
    if params:
        url += "?" + urllib.parse.urlencode(params)
    
    try:
        with urllib.request.urlopen(url) as response:
            return json.loads(response.read().decode('utf-8'))
    except Exception as e:
        return {"ok": False, "error": str(e)}

print("üîß –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ webhook –¥–ª—è Meeting Scheduler Bot\n")

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞
print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞...")
bot_info = make_request("getMe")
if bot_info.get("ok"):
    bot = bot_info.get("result", {})
    print(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{bot.get('username')}")
else:
    print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É!")
    print(bot_info)
    sys.exit(1)

# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook...")
webhook_info = make_request("getWebhookInfo")
if webhook_info.get("ok"):
    result = webhook_info.get("result", {})
    current_url = result.get("url", "")
    pending = result.get("pending_update_count", 0)
    
    print(f"   –¢–µ–∫—É—â–∏–π URL: {current_url or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"   –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {pending}")
    
    if result.get("last_error_message"):
        print(f"   ‚ùå –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {result.get('last_error_message')}")

# 3. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
print("\n3Ô∏è‚É£ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook...")
delete_result = make_request("deleteWebhook")
if delete_result.get("ok"):
    print("‚úÖ –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω")
else:
    print(f"‚ùå –û—à–∏–±–∫–∞: {delete_result}")

# 4. –û—á–∏—â–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
print("\n4Ô∏è‚É£ –û—á–∏—â–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
updates = make_request("getUpdates")
if updates.get("ok"):
    count = len(updates.get("result", []))
    print(f"‚úÖ –û—á–∏—â–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π")

# 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
print(f"\n5Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: {WEBHOOK_URL}")
set_result = make_request("setWebhook", {"url": WEBHOOK_URL})
if set_result.get("ok"):
    print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
else:
    print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {set_result}")

# 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
print("\n6Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
final_check = make_request("getWebhookInfo")
if final_check.get("ok"):
    result = final_check.get("result", {})
    if result.get("url") == WEBHOOK_URL:
        print("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        print(f"   Webhook: {result.get('url')}")
        print(f"   –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {result.get('pending_update_count', 0)}")
        print("\nüéâ –ì–æ—Ç–æ–≤–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start –±–æ—Ç—É.")
    else:
        print("‚ùå Webhook –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É")
        print(result)

# 7. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
print("\n7Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞...")
commands = [
    {"command": "start", "description": "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"},
    {"command": "help", "description": "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"},
    {"command": "schedule", "description": "–ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É"},
    {"command": "my_meetings", "description": "–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏"},
    {"command": "profile", "description": "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"},
    {"command": "vacation", "description": "–†–µ–∂–∏–º –æ—Ç–ø—É—Å–∫–∞"},
    {"command": "sick", "description": "–ë–æ–ª—å–Ω–∏—á–Ω—ã–π"},
    {"command": "trip", "description": "–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞"},
    {"command": "active", "description": "–ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å"},
    {"command": "admin", "description": "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"},
]

set_commands_result = make_request("setMyCommands", {"commands": json.dumps(commands)})
if set_commands_result.get("ok"):
    print("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
else:
    print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {set_commands_result}")

print("\n‚ú® –í—Å–µ –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã.")