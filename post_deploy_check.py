#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è –Ω–∞ Render.com
"""
import logging
import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.config import settings
from src.database import get_db, User, OwnerAvailability, UserRole, init_db

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def post_deploy_check():
    """–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è...")
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
        logger.info("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–∏–∑–Ω–µ—Å–∞...")
        with get_db() as db:
            owners = db.query(User).filter(User.role == UserRole.OWNER).all()
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤: {len(owners)}")
            
            for owner in owners:
                logger.info(f"   ‚Ä¢ {owner.first_name} {owner.last_name} (Telegram: {owner.telegram_id})")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã
        logger.info("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤...")
        with get_db() as db:
            slots = db.query(OwnerAvailability).filter(OwnerAvailability.is_active == True).all()
            logger.info(f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(slots)}")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
            owner_slots = {}
            for slot in slots:
                if slot.owner_id not in owner_slots:
                    owner_slots[slot.owner_id] = []
                owner_slots[slot.owner_id].append(slot)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            for owner in owners:
                owner_slot_count = len(owner_slots.get(owner.id, []))
                if owner_slot_count == 0:
                    logger.warning(f"‚ö†Ô∏è –£ {owner.first_name} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤!")
                    
                    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–ª–æ—Ç—ã
                    logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è {owner.first_name}...")
                    create_default_slots_for_owner(db, owner.id)
                else:
                    logger.info(f"   ‚Ä¢ {owner.first_name}: {owner_slot_count} —Å–ª–æ—Ç–æ–≤")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º Google Calendar –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        logger.info("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Calendar –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        if settings.google_calendar_id_1 and settings.google_calendar_id_2:
            logger.info("‚úÖ Google Calendar ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        else:
            logger.warning("‚ö†Ô∏è Google Calendar ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        if os.path.exists(settings.google_service_account_file):
            logger.info("‚úÖ Google Service Account —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
        else:
            logger.warning(f"‚ö†Ô∏è Google Service Account —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {settings.google_service_account_file}")
        
        # 5. –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        logger.info("5. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏...")
        create_health_report()
        
        logger.info("üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è: {e}")
        return False

def create_default_slots_for_owner(db, owner_id):
    """–°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
    try:
        # –ë–∞–∑–æ–≤—ã–µ —Å–ª–æ—Ç—ã: –±—É–¥–Ω–∏–µ –¥–Ω–∏ 14:00-17:00
        base_slots = ["14:00", "15:00", "16:00", "17:00"]
        weekdays = [0, 1, 2, 3, 4]  # –ü–Ω-–ü—Ç
        
        created_count = 0
        for day in weekdays:
            for time_slot in base_slots:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–ª–æ—Ç
                existing = db.query(OwnerAvailability).filter(
                    OwnerAvailability.owner_id == owner_id,
                    OwnerAvailability.day_of_week == day,
                    OwnerAvailability.time_slot == time_slot
                ).first()
                
                if not existing:
                    slot = OwnerAvailability(
                        owner_id=owner_id,
                        day_of_week=day,
                        time_slot=time_slot,
                        is_active=True
                    )
                    db.add(slot)
                    created_count += 1
        
        db.commit()
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} –±–∞–∑–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤: {e}")
        db.rollback()

def create_health_report():
    """–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        report = {
            "timestamp": datetime.now().isoformat(),
            "database": {"status": "connected"},
            "owners": [],
            "slots": {"total": 0, "by_owner": {}},
            "config": {
                "google_calendar_configured": bool(settings.google_calendar_id_1 and settings.google_calendar_id_2),
                "service_account_file_exists": os.path.exists(settings.google_service_account_file),
                "timezone": settings.timezone
            }
        }
        
        with get_db() as db:
            # –í–ª–∞–¥–µ–ª—å—Ü—ã
            owners = db.query(User).filter(User.role == UserRole.OWNER).all()
            for owner in owners:
                report["owners"].append({
                    "id": owner.id,
                    "name": f"{owner.first_name} {owner.last_name}",
                    "telegram_id": owner.telegram_id
                })
            
            # –°–ª–æ—Ç—ã
            slots = db.query(OwnerAvailability).filter(OwnerAvailability.is_active == True).all()
            report["slots"]["total"] = len(slots)
            
            for owner in owners:
                owner_slots = [s for s in slots if s.owner_id == owner.id]
                report["slots"]["by_owner"][owner.id] = len(owner_slots)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open('health_report.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        logger.info("‚úÖ –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ health_report.json")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

if __name__ == '__main__':
    success = post_deploy_check()
    sys.exit(0 if success else 1)