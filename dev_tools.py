#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
"""
import os
import sys
import subprocess
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

def restart_bot():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
    try:
        result = subprocess.run(['pgrep', '-f', 'run_local.py'], 
                              capture_output=True, text=True)
        if result.stdout:
            pids = result.stdout.strip().split('\n')
            for pid in pids:
                if pid:
                    print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}")
                    subprocess.run(['kill', pid])
        else:
            print("‚ÑπÔ∏è –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    subprocess.Popen(['python3', 'run_local.py'])

def check_db():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from src.database import SessionLocal, User, Meeting
        from sqlalchemy import text
        
        with SessionLocal() as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            result = db.execute(text("SELECT name FROM sqlite_master WHERE type='table'"))
            tables = [row[0] for row in result.fetchall()]
            print(f"üìã –¢–∞–±–ª–∏—Ü—ã: {', '.join(tables)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_count = db.query(User).count()
            print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—Ç—Ä–µ—á–∏  
            meetings_count = db.query(Meeting).count()
            print(f"ü§ù –í—Å—Ç—Ä–µ—á: {meetings_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã meetings
            result = db.execute(text("PRAGMA table_info(meetings)"))
            columns = [row[1] for row in result.fetchall()]
            print(f"üìä –ö–æ–ª–æ–Ω–∫–∏ meetings: {', '.join(columns)}")
            
            if 'google_calendar_id' in columns:
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ google_calendar_id –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print("‚ùå –ö–æ–ª–æ–Ω–∫–∞ google_calendar_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")

def test_config():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from src.config import settings
        
        print(f"ü§ñ Telegram Token: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.telegram_bot_token else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"üíæ Database URL: {settings.database_url}")
        print(f"üîç Debug: {settings.debug}")
        print(f"üìù Log Level: {settings.log_level}")
        
        # Google Calendar
        has_service_account = bool(settings.google_service_account_json)
        has_oauth_client = bool(settings.google_oauth_client_json)
        
        print(f"üîë Google Service Account: {'‚úÖ' if has_service_account else '‚ùå'}")
        print(f"üîê Google OAuth Client: {'‚úÖ' if has_oauth_client else '‚ùå'}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def show_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    print("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
    print("=" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
    try:
        result = subprocess.run(['pgrep', '-f', 'run_local.py'], 
                              capture_output=True, text=True)
        if result.stdout:
            print("ü§ñ –ë–æ—Ç: ‚úÖ –ó–∞–ø—É—â–µ–Ω")
        else:
            print("ü§ñ –ë–æ—Ç: ‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except:
        print("ü§ñ –ë–æ—Ç: ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    files_to_check = ['.env', 'bot.log', 'meeting_scheduler.db']
    for file in files_to_check:
        path = Path(file)
        status = "‚úÖ" if path.exists() else "‚ùå"
        size = f" ({path.stat().st_size} bytes)" if path.exists() else ""
        print(f"üìÑ {file}: {status}{size}")

def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥—ã
    subparsers.add_parser('restart', help='–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞')
    subparsers.add_parser('check-db', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
    subparsers.add_parser('test-config', help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é')
    subparsers.add_parser('status', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã')
    
    args = parser.parse_args()
    
    if args.command == 'restart':
        restart_bot()
    elif args.command == 'check-db':
        check_db()
    elif args.command == 'test-config':
        test_config()
    elif args.command == 'status':
        show_status()
    else:
        parser.print_help()

if __name__ == "__main__":
    main()