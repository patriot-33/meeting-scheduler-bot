#!/usr/bin/env python3
"""
üõ°Ô∏è HOLISTIC CALENDAR INTEGRATION DIAGNOSTIC SYSTEM v4.0
–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ML –æ–±—É—á–µ–Ω–∏–µ–º
"""
import asyncio
import logging
import sys
from pathlib import Path
from datetime import datetime
import traceback
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "src"))

try:
    from diagnostic_system import create_calendar_ml_system, MandatoryHistoryPersistence
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print("Trying direct import...")
    from src.diagnostic_system.mandatory_history import MandatoryHistoryPersistence
    from src.diagnostic_system.enhanced_ml_predictor import CalendarIntegrationMLPredictor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('calendar_diagnosis.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class CalendarDiagnosticEngine:
    """–î–≤–∏–∂–æ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
    
    def __init__(self, project_path: str):
        self.project_path = Path(project_path)
        self.history = MandatoryHistoryPersistence(str(project_path))
        self.ml_predictor = CalendarIntegrationMLPredictor(self.history)
        self.session_id = None
        
    async def run_full_diagnosis(self, problem_description: str) -> dict:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
        
        logger.info("üöÄ Starting HOLISTIC CALENDAR DIAGNOSTIC SYSTEM v4.0")
        
        # –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        self.session_id = self.history.save_session_start({
            'problem_description': problem_description,
            'project_path': str(self.project_path),
            'diagnostic_version': '4.0'
        })
        
        try:
            results = {
                'session_id': self.session_id,
                'timestamp': datetime.now().isoformat(),
                'problem_description': problem_description
            }
            
            # 1. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            logger.info("üîç Phase 1: Code Analysis")
            code_analysis = await self._analyze_calendar_code()
            results['code_analysis'] = code_analysis
            
            # 2. –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫
            logger.info("üìã Phase 2: Error Log Analysis")
            log_analysis = await self._analyze_error_logs()
            results['log_analysis'] = log_analysis
            
            # 3. ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
            logger.info("ü§ñ Phase 3: ML Prediction")
            ml_prediction = await self._run_ml_prediction(code_analysis, log_analysis)
            results['ml_prediction'] = ml_prediction
            
            # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            logger.info("üîß Phase 4: Fix Generation")
            fixes = await self._generate_fixes(ml_prediction)
            results['suggested_fixes'] = fixes
            
            # 5. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π
            logger.info("üìã Phase 5: Action Plan")
            action_plan = await self._create_action_plan(results)
            results['action_plan'] = action_plan
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.history.save_session_end(self.session_id, results)
            
            return results
            
        except Exception as e:
            logger.error(f"‚ùå Diagnostic failed: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—à–∏–±–∫—É
            self.history.save_bug({
                'session_id': self.session_id,
                'bug_type': 'diagnostic_system_error',
                'severity': 'high',
                'root_cause': str(e),
                'code_features': {}
            })
            
            raise
    
    async def _analyze_calendar_code(self) -> dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        
        calendar_files = [
            'src/services/google_calendar_dual.py',
            'src/services/google_calendar.py', 
            'src/services/meeting_service.py',
            'src/main.py'
        ]
        
        analysis_results = {}
        
        for file_path in calendar_files:
            full_path = self.project_path / file_path
            if full_path.exists():
                logger.info(f"üìÑ Analyzing {file_path}")
                
                with open(full_path, 'r', encoding='utf-8') as f:
                    code_content = f.read()
                
                # –ò–∑–≤–ª–µ—á—å –ø—Ä–∏–∑–Ω–∞–∫–∏
                features = self.ml_predictor.extract_calendar_features(code_content)
                
                analysis_results[file_path] = {
                    'features': features,
                    'lines_of_code': len(code_content.split('\n')),
                    'complexity_score': features.get('cyclomatic_complexity', 0),
                    'oauth_complexity': features.get('oauth_complexity', 0),
                    'service_account_usage': features.get('service_account_usage', 0),
                    'error_handling_ratio': features.get('error_handling_ratio', 0)
                }
                
                # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è ML –æ–±—É—á–µ–Ω–∏—è
                if features.get('api_error_frequency', 0) > 0.5:
                    self.history.save_bug({
                        'session_id': self.session_id,
                        'bug_type': 'high_api_error_frequency',
                        'severity': 'medium',
                        'root_cause': 'High frequency of API errors detected in code',
                        'code_features': features
                    })
        
        return analysis_results
    
    async def _analyze_error_logs(self) -> dict:
        """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫"""
        
        # –ê–Ω–∞–ª–∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∏–∑ –ª–æ–≥–æ–≤ Render
        render_errors = """
        Invalid conference type value
        Service accounts cannot invite attendees
        events not created in calendars
        webhook connection timeout
        """
        
        # –ò–∑–≤–ª–µ—á—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –ª–æ–≥–æ–≤
        log_features = self.ml_predictor.extract_calendar_features("", render_errors)
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏
        error_categories = {
            'oauth_issues': log_features.get('authentication_issues', 0),
            'service_account_issues': log_features.get('permission_issues', 0), 
            'conference_issues': 1.0 if 'Invalid conference type' in render_errors else 0.0,
            'webhook_issues': log_features.get('webhook_issues', 0),
            'api_errors': log_features.get('api_error_frequency', 0)
        }
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        for error_type, severity_score in error_categories.items():
            if severity_score > 0.5:
                self.history.save_bug({
                    'session_id': self.session_id,
                    'bug_type': error_type,
                    'severity': 'high' if severity_score > 0.8 else 'medium',
                    'root_cause': f'Detected from error logs: {error_type}',
                    'code_features': {'error_severity': severity_score}
                })
        
        return {
            'error_categories': error_categories,
            'log_features': log_features,
            'critical_errors': [k for k, v in error_categories.items() if v > 0.5]
        }
    
    async def _run_ml_prediction(self, code_analysis: dict, log_analysis: dict) -> dict:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"""
        
        # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        aggregated_features = {}
        
        for file_data in code_analysis.values():
            features = file_data.get('features', {})
            for key, value in features.items():
                if key in aggregated_features:
                    aggregated_features[key] = max(aggregated_features[key], value)
                else:
                    aggregated_features[key] = value
        
        # –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –ª–æ–≥–æ–≤
        aggregated_features.update(log_analysis.get('log_features', {}))
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = self.ml_predictor.predict_calendar_bug(
            aggregated_features, 
            error_context="Invalid conference type value, Service accounts cannot invite attendees"
        )
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        self.history.save_ml_prediction({
            'session_id': self.session_id,
            'predicted_bug_type': prediction.get('bug_type'),
            'confidence': prediction.get('probability', 0),
            'feature_vector': aggregated_features
        })
        
        logger.info(f"ü§ñ ML Prediction: {prediction.get('bug_type')} "
                   f"(confidence: {prediction.get('probability', 0):.2f})")
        
        return prediction
    
    async def _generate_fixes(self, ml_prediction: dict) -> dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        
        bug_type = ml_prediction.get('bug_type')
        fixes = {}
        
        if bug_type == 'conference_creation_failure':
            fixes['conference_type_fix'] = {
                'file': 'src/services/google_calendar_dual.py',
                'line_range': [96, 98],
                'current_code': "'type': 'eventHangout'",
                'fixed_code': "'type': 'hangoutsMeet'",
                'description': 'Change conference type from eventHangout to hangoutsMeet',
                'confidence': 0.95
            }
        
        if bug_type == 'oauth_authentication_failure':
            fixes['oauth_detection_fix'] = {
                'file': 'src/services/google_calendar_dual.py', 
                'line_range': [292, 301],
                'description': 'Improve OAuth detection with proper refresh_token validation',
                'confidence': 0.85
            }
        
        if bug_type == 'service_account_permission_error':
            fixes['attendee_removal_fix'] = {
                'file': 'src/services/google_calendar_dual.py',
                'description': 'Remove attendee invitations for Service Account calendars',
                'confidence': 0.90
            }
        
        # –î–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
        fixes['error_handling_improvement'] = {
            'description': 'Add comprehensive error handling and logging',
            'confidence': 0.80
        }
        
        fixes['fallback_mechanisms'] = {
            'description': 'Implement fallback strategies for API failures',
            'confidence': 0.75
        }
        
        return fixes
    
    async def _create_action_plan(self, results: dict) -> dict:
        """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π"""
        
        ml_prediction = results.get('ml_prediction', {})
        fixes = results.get('suggested_fixes', {})
        
        action_plan = {
            'priority': 'high',
            'estimated_time': '2-4 hours',
            'steps': []
        }
        
        # –®–∞–≥ 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if 'conference_type_fix' in fixes:
            action_plan['steps'].append({
                'step': 1,
                'action': 'Fix conference type',
                'description': 'Change eventHangout to hangoutsMeet in google_calendar_dual.py',
                'files': ['src/services/google_calendar_dual.py'],
                'risk': 'low',
                'estimated_time': '15 minutes'
            })
        
        # –®–∞–≥ 2: OAuth –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if 'oauth_detection_fix' in fixes:
            action_plan['steps'].append({
                'step': 2,
                'action': 'Improve OAuth detection',
                'description': 'Fix OAuth calendar detection logic',
                'files': ['src/services/google_calendar_dual.py'],
                'risk': 'medium',
                'estimated_time': '30 minutes'
            })
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        action_plan['steps'].append({
            'step': 3,
            'action': 'Test changes',
            'description': 'Deploy and test calendar event creation',
            'risk': 'low',
            'estimated_time': '30 minutes'
        })
        
        # –®–∞–≥ 4: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        action_plan['steps'].append({
            'step': 4,
            'action': 'Monitor results',
            'description': 'Watch logs for 24 hours to confirm fixes',
            'risk': 'low',
            'estimated_time': '24 hours (passive)'
        })
        
        return action_plan


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    project_path = "/Users/evgenii/meeting-scheduler-bot"
    
    problem_description = """
    Telegram –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π:
    1. –°–æ–±—ã—Ç–∏—è –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö Google
    2. –û—à–∏–±–∫–∏ "Invalid conference type value" 
    3. –û—à–∏–±–∫–∏ "Service accounts cannot invite attendees"
    4. Google Meet —Å—Å—ã–ª–∫–∏ –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è
    5. –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º OAuth vs Service Account –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
    
    –ù—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å ML –∞–Ω–∞–ª–∏–∑–æ–º.
    """
    
    try:
        # –°–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–≤–∏–∂–æ–∫
        diagnostic_engine = CalendarDiagnosticEngine(project_path)
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        results = await diagnostic_engine.run_full_diagnosis(problem_description)
        
        # –í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*80)
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("="*80)
        
        print(f"\nüìã –°–µ—Å—Å–∏—è: {results['session_id']}")
        print(f"‚è∞ –í—Ä–µ–º—è: {results['timestamp']}")
        
        ml_prediction = results.get('ml_prediction', {})
        print(f"\nü§ñ ML –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:")
        print(f"   –¢–∏–ø –±–∞–≥–∞: {ml_prediction.get('bug_type', 'unknown')}")
        print(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {ml_prediction.get('probability', 0):.2%}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ml_prediction.get('confidence', 'low')}")
        
        if 'evidence' in ml_prediction:
            print(f"   –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {ml_prediction['evidence']}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if 'immediate_actions' in ml_prediction:
            print(f"\nüîß –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
            for action in ml_prediction['immediate_actions']:
                print(f"   ‚Ä¢ {action}")
        
        if 'fixes' in ml_prediction:
            print(f"\nüõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
            for fix in ml_prediction['fixes']:
                print(f"   ‚Ä¢ {fix}")
        
        # –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
        action_plan = results.get('action_plan', {})
        if action_plan.get('steps'):
            print(f"\nüìã –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:")
            print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {action_plan.get('priority', 'medium')}")
            print(f"   –í—Ä–µ–º—è: {action_plan.get('estimated_time', 'unknown')}")
            
            for step in action_plan['steps']:
                print(f"\n   –®–∞–≥ {step['step']}: {step['action']}")
                print(f"      {step['description']}")
                print(f"      –í—Ä–µ–º—è: {step.get('estimated_time', 'unknown')}")
                print(f"      –†–∏—Å–∫: {step.get('risk', 'unknown')}")
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report_file = Path(project_path) / "calendar_diagnostic_report.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        return results
        
    except Exception as e:
        logger.error(f"‚ùå Diagnostic system failed: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise


if __name__ == "__main__":
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    results = asyncio.run(main())