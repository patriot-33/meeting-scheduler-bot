#!/usr/bin/env python3
"""
üéØ –¢–û–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï v5.0
–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ô –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á
–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ ROOT_CAUSE_ANALYSIS_REPORT.json
"""

import json
import shutil
from pathlib import Path
from datetime import datetime

class PreciseFixImplementation:
    """–¢–æ—á–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        
    def log(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        timestamp = datetime.now().isoformat()
        print(f"üéØ [{timestamp}] {message}")
    
    def create_backup(self, file_path: str) -> str:
        """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø —Ñ–∞–π–ª–∞"""
        backup_id = f"precise_fix_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        backup_dir = self.project_root / "precise_fix_backups" / backup_id
        backup_dir.mkdir(parents=True, exist_ok=True)
        
        if Path(file_path).exists():
            backup_file = backup_dir / Path(file_path).name
            shutil.copy2(file_path, backup_file)
            self.log(f"–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_file}")
            return backup_id
        return None
    
    def fix_meeting_service_duplication(self) -> dict:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –£–±—Ä–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –≤ meeting_service.py"""
        self.log("=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: Meeting Service Duplication ===")
        
        file_path = self.project_root / "src" / "services" / "meeting_service.py"
        backup_id = self.create_backup(str(file_path))
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±—Ä–∞—Ç—å –≤–µ—Å—å fallback –±–ª–æ–∫ –≤ create_meeting
        fallback_block_start = '''# If manager's calendar failed, try owner's calendar as fallback'''
        fallback_block_end = '''else:
                            raise calendar_error'''
        
        if fallback_block_start in content:
            # –ù–∞–π—Ç–∏ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞
            start_idx = content.find(fallback_block_start)
            end_idx = content.find(fallback_block_end, start_idx)
            
            if start_idx != -1 and end_idx != -1:
                # –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å fallback –±–ª–æ–∫
                end_idx += len(fallback_block_end)
                content = content[:start_idx] + content[end_idx:]
                
                self.log("‚úÖ –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π fallback –±–ª–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á")
        
        # –¢–∞–∫–∂–µ —É–±—Ä–∞—Ç—å –ª–æ–≥–∏–∫—É –∫–æ—Ç–æ—Ä–∞—è –¥—É–±–ª–∏—Ä—É–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        old_line = "owner_calendar_id or manager_calendar_id"
        new_line = "owner_calendar_id"
        
        if old_line in content:
            content = content.replace(old_line, new_line)
            self.log("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ owner_calendar_id")
        
        # –ó–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return {
            "status": "fixed",
            "file": str(file_path),
            "backup_id": backup_id,
            "changes": [
                "–£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π fallback –±–ª–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è",
                "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ owner_calendar_id"
            ]
        }
    
    def fix_dual_calendar_fallback(self) -> dict:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –£–ø—Ä–æ—Å—Ç–∏—Ç—å _create_event_with_fallback –¥–æ 1 –≤—ã–∑–æ–≤–∞"""
        self.log("=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: Dual Calendar Fallback ===")
        
        file_path = self.project_root / "src" / "services" / "google_calendar_dual.py"
        backup_id = self.create_backup(str(file_path))
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω–∏—Ç—å –≤–µ—Å—å –º–µ—Ç–æ–¥ _create_event_with_fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é
        new_method = '''    def _create_event_with_fallback(self, calendar_id: str, event_data: dict, calendar_type: str):
        """Create event with OAuth-specific Google Meet conference creation - SINGLE CALL ONLY"""
        
        # Log the attempt for debugging
        has_conference = 'conferenceData' in event_data
        has_attendees = 'attendees' in event_data
        logger.info(f"üìÖ Creating event in {calendar_type}'s calendar: {calendar_id}")
        logger.info(f"üîç Event details: conference={has_conference}, attendees={has_attendees}")
        
        # Detect calendar type: OAuth vs Service Account
        is_oauth_calendar = self._is_oauth_calendar(calendar_id)
        logger.info(f"üîç Calendar type: {'OAuth' if is_oauth_calendar else 'Service Account'}")
        
        # SINGLE ATTEMPT - No multiple fallbacks to prevent duplication
        try:
            if is_oauth_calendar:
                # OAuth calendars work best without conferenceDataVersion
                event = self.calendar_service._service.events().insert(
                    calendarId=calendar_id,
                    body=event_data
                ).execute()
            else:
                # Service Account calendars need conferenceDataVersion
                event = self.calendar_service._service.events().insert(
                    calendarId=calendar_id,
                    body=event_data,
                    conferenceDataVersion=1
                ).execute()
            
            # Check if Google Meet was created
            if event.get('conferenceData') and event.get('conferenceData').get('conferenceId'):
                logger.info(f"‚úÖ SUCCESS: Created event with Google Meet in {calendar_type}'s calendar")
                logger.info(f"üîó Google Meet ID: {event.get('conferenceData').get('conferenceId')}")
            else:
                logger.info(f"‚úÖ SUCCESS: Created event (no Google Meet) in {calendar_type}'s calendar")
            
            return event
            
        except Exception as e:
            logger.error(f"‚ùå Failed to create event in {calendar_type}'s calendar: {e}")
            return None'''
        
        # –ù–∞–π—Ç–∏ –∏ –∑–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
        start_pattern = "def _create_event_with_fallback("
        end_pattern = "def _is_valid_email("
        
        start_idx = content.find(start_pattern)
        end_idx = content.find(end_pattern)
        
        if start_idx != -1 and end_idx != -1:
            content = content[:start_idx] + new_method + "\n\n    " + content[end_idx:]
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            self.log("‚úÖ –ó–∞–º–µ–Ω–µ–Ω –º–µ—Ç–æ–¥ _create_event_with_fallback –Ω–∞ –≤–µ—Ä—Å–∏—é —Å 1 –≤—ã–∑–æ–≤–æ–º")
        
        return {
            "status": "fixed",
            "file": str(file_path),
            "backup_id": backup_id,
            "changes": [
                "–ú–µ—Ç–æ–¥ _create_event_with_fallback —Ç–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ—Ç —Ç–æ–ª—å–∫–æ 1 –≤—ã–∑–æ–≤ events().insert",
                "–£–±—Ä–∞–Ω—ã –≤—Å–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
                "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ OAuth vs Service Account –ª–æ–≥–∏–∫–∞"
            ]
        }
    
    def verify_fixes(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        self.log("=== –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ===")
        
        verification = {
            "meeting_service_calls": 0,
            "dual_calendar_insert_calls": 0,
            "expected_total_events": 0
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å meeting_service.py
        meeting_file = self.project_root / "src" / "services" / "meeting_service.py"
        with open(meeting_file, 'r', encoding='utf-8') as f:
            content = f.read()
            verification["meeting_service_calls"] = content.count("dual_calendar_creator.create_meeting_in_both_calendars")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å google_calendar_dual.py
        dual_file = self.project_root / "src" / "services" / "google_calendar_dual.py"
        with open(dual_file, 'r', encoding='utf-8') as f:
            content = f.read()
            verification["dual_calendar_insert_calls"] = content.count("events().insert")
        
        # –í—ã—á–∏—Å–ª–∏—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
        verification["expected_total_events"] = verification["meeting_service_calls"] * 2 * (verification["dual_calendar_insert_calls"] // 2)
        
        self.log(f"üìä –í—ã–∑–æ–≤–æ–≤ dual_calendar_creator: {verification['meeting_service_calls']}")
        self.log(f"üìä –í—ã–∑–æ–≤–æ–≤ events().insert: {verification['dual_calendar_insert_calls']}")
        self.log(f"üìä –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π: {verification['expected_total_events']}")
        
        # –ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 1 –≤—ã–∑–æ–≤ dual_calendar_creator √ó 2 –∫–∞–ª–µ–Ω–¥–∞—Ä—è √ó 1 events().insert = 2 —Å–æ–±—ã—Ç–∏—è
        verification["is_fixed"] = (
            verification["meeting_service_calls"] == 1 and
            verification["dual_calendar_insert_calls"] <= 2 and
            verification["expected_total_events"] <= 2
        )
        
        return verification
    
    def apply_precise_fixes(self) -> dict:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ —Ç–æ—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        self.log("üéØ === –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –¢–û–ß–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ===")
        
        results = {
            "timestamp": datetime.now().isoformat(),
            "fixes": [],
            "verification": {},
            "success": False
        }
        
        try:
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1: Meeting Service
            fix1 = self.fix_meeting_service_duplication()
            results["fixes"].append(fix1)
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2: Dual Calendar Fallback
            fix2 = self.fix_dual_calendar_fallback()
            results["fixes"].append(fix2)
            
            # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
            verification = self.verify_fixes()
            results["verification"] = verification
            results["success"] = verification["is_fixed"]
            
            if results["success"]:
                self.log("‚úÖ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´ –£–°–ü–ï–®–ù–û")
                self.log(f"üìä –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ {verification['expected_total_events']} —Å–æ–±—ã—Ç–∏–π (–≤–º–µ—Å—Ç–æ 4)")
            else:
                self.log("‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –Ω–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results_file = self.project_root / "PRECISE_FIX_RESULTS.json"
            with open(results_file, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, ensure_ascii=False)
            
            self.log(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
            
        except Exception as e:
            results["error"] = str(e)
            self.log(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        
        return results

if __name__ == "__main__":
    print("üéØ –¢–û–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï v5.0")
    print("=" * 60)
    print("–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ô –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á")
    print("=" * 60)
    
    project_path = "/Users/evgenii/meeting-scheduler-bot"
    fixer = PreciseFixImplementation(project_path)
    
    try:
        results = fixer.apply_precise_fixes()
        
        print("\n" + "=" * 60)
        if results["success"]:
            print("‚úÖ –¢–û–ß–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û")
            print(f"üìä –û–∂–∏–¥–∞–µ—Ç—Å—è: {results['verification']['expected_total_events']} —Å–æ–±—ã—Ç–∏–π –≤–º–µ—Å—Ç–æ 4")
        else:
            print("‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´ –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
        
        print(f"\nüîß –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {len(results['fixes'])}")
        for i, fix in enumerate(results['fixes'], 1):
            print(f"  {i}. {fix['file']}")
            for change in fix['changes']:
                print(f"     - {change}")
        
        verification = results['verification']
        print(f"\nüìä –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø:")
        print(f"   - –í—ã–∑–æ–≤–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è: {verification['meeting_service_calls']}")
        print(f"   - –í—ã–∑–æ–≤–æ–≤ events().insert: {verification['dual_calendar_insert_calls']}")
        print(f"   - –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π: {verification['expected_total_events']}")
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        print(traceback.format_exc())