#!/usr/bin/env python3
"""
üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –û–¢–ö–ê–¢ v5.0
–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø: –ü—Ä–æ–±–ª–µ–º—ã —É—Å—É–≥—É–±–∏–ª–∏—Å—å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç–∫–∞—Ç –∫ —Ä–∞–±–æ—á–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
"""

import json
import os
import shutil
from pathlib import Path
from datetime import datetime
import subprocess

class EmergencyRollbackAndDiagnosis:
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –æ—Ç–∫–∞—Ç"""
    
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.history_root = self.project_root / ".diagnostic_history"
        
    def emergency_log(self, message: str, level: str = "CRITICAL"):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        timestamp = datetime.now().isoformat()
        log_message = f"[{timestamp}] [{level}] {message}"
        print(f"üö® {log_message}")
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ª–æ–≥
        emergency_log = self.project_root / "emergency_diagnosis.log"
        with open(emergency_log, 'a', encoding='utf-8') as f:
            f.write(log_message + "\n")
    
    def analyze_current_damage(self) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —É—â–µ—Ä–±–∞"""
        self.emergency_log("=== –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ì–û –£–©–ï–†–ë–ê ===")
        
        damage_report = {
            "timestamp": datetime.now().isoformat(),
            "problems_detected": [
                "–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ—Ç—Å—è 4 —Å–æ–±—ã—Ç–∏—è (–±—ã–ª–æ 3) - –£–•–£–î–®–ï–ù–ò–ï",
                "–£–¥–∞–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ 1 —Å–æ–±—ã—Ç–∏–µ - –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–û", 
                "Google Meet –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–û",
                "–õ–æ–≥–∏ –≤ Render.com –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –ù–û–í–ê–Ø –ü–†–û–ë–õ–ï–ú–ê"
            ],
            "severity": "CRITICAL - —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å —Ö—É–∂–µ",
            "immediate_action": "–ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –û–¢–ö–ê–¢"
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–ª–æ–º–∞–ª–æ—Å—å
        dual_calendar_analysis = self.analyze_dual_calendar_damage()
        meeting_service_analysis = self.analyze_meeting_service_damage()
        
        damage_report["dual_calendar_issues"] = dual_calendar_analysis
        damage_report["meeting_service_issues"] = meeting_service_analysis
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç
        damage_file = self.project_root / "EMERGENCY_DAMAGE_REPORT.json"
        with open(damage_file, 'w', encoding='utf-8') as f:
            json.dump(damage_report, f, indent=2, ensure_ascii=False)
        
        self.emergency_log(f"–û—Ç—á–µ—Ç –æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {damage_file}")
        return damage_report
    
    def analyze_dual_calendar_damage(self) -> dict:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –≤ google_calendar_dual.py"""
        file_path = self.project_root / "src" / "services" / "google_calendar_dual.py"
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å events().insert –≤—ã–∑–æ–≤—ã
        insert_count = content.count('events().insert')
        
        # –ù–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–µ—Å—Ç–∞
        issues = []
        
        if insert_count > 3:
            issues.append(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ events().insert: {insert_count}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –≤ –æ–±–æ–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö
        if "create_meeting_in_both_calendars" in content:
            lines = content.split('\n')
            in_method = False
            method_issues = []
            
            for i, line in enumerate(lines, 1):
                if "def create_meeting_in_both_calendars" in line:
                    in_method = True
                elif in_method and line.strip().startswith("def "):
                    break
                elif in_method and "events().insert" in line:
                    method_issues.append(f"Line {i}: {line.strip()}")
            
            if len(method_issues) > 2:
                issues.append(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—ã–∑–æ–≤–æ–≤ –≤ create_meeting_in_both_calendars: {method_issues}")
        
        return {
            "file": str(file_path),
            "insert_calls_count": insert_count,
            "issues": issues
        }
    
    def analyze_meeting_service_damage(self) -> dict:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –≤ meeting_service.py"""
        file_path = self.project_root / "src" / "services" / "meeting_service.py"
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–∑–æ–≤—ã —Å–æ–∑–¥–∞–Ω–∏—è
        dual_calls = content.count("dual_calendar_creator.create_meeting_in_both_calendars")
        if dual_calls > 1:
            issues.append(f"–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã dual_calendar_creator: {dual_calls}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è
        if "delete_all_events_for_meeting" in content:
            issues.append("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è - –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π")
        
        return {
            "file": str(file_path),
            "dual_creation_calls": dual_calls,
            "issues": issues
        }
    
    def immediate_rollback_to_working_state(self) -> dict:
        """–ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –û–¢–ö–ê–¢ –∫ —Ä–∞–±–æ—á–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é"""
        self.emergency_log("=== –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –û–¢–ö–ê–¢ ===")
        
        rollback_results = {
            "timestamp": datetime.now().isoformat(),
            "actions": [],
            "success": False
        }
        
        try:
            # 1. –û—Ç–∫–∞—Ç google_calendar_dual.py
            dual_rollback = self.rollback_file(
                "src/services/google_calendar_dual.py",
                "rollback_20250802_100156_f28c5e34"
            )
            rollback_results["actions"].append(dual_rollback)
            
            # 2. –û—Ç–∫–∞—Ç meeting_service.py  
            meeting_rollback = self.rollback_file(
                "src/services/meeting_service.py", 
                "rollback_20250802_100156_64a872dd"
            )
            rollback_results["actions"].append(meeting_rollback)
            
            # 3. –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –º–µ—Ç–æ–¥ delete_all_events_for_meeting
            self.remove_problematic_additions()
            rollback_results["actions"].append("Removed problematic delete_all_events_for_meeting method")
            
            rollback_results["success"] = True
            self.emergency_log("‚úÖ –û–¢–ö–ê–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
            
        except Exception as e:
            rollback_results["error"] = str(e)
            self.emergency_log(f"‚ùå –û–®–ò–ë–ö–ê –û–¢–ö–ê–¢–ê: {e}")
        
        return rollback_results
    
    def rollback_file(self, relative_path: str, rollback_id: str) -> dict:
        """–û—Ç–∫–∞—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª"""
        target_file = self.project_root / relative_path
        backup_file = self.history_root / "rollback_points" / rollback_id / Path(relative_path).name
        
        if backup_file.exists():
            shutil.copy2(backup_file, target_file)
            self.emergency_log(f"‚úÖ –û—Ç–∫–∞—á–µ–Ω —Ñ–∞–π–ª: {relative_path}")
            return {"file": relative_path, "status": "rolled_back", "backup_used": str(backup_file)}
        else:
            self.emergency_log(f"‚ùå –ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_file}")
            return {"file": relative_path, "status": "backup_not_found"}
    
    def remove_problematic_additions(self):
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
        dual_file = self.project_root / "src" / "services" / "google_calendar_dual.py"
        
        with open(dual_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –£–¥–∞–ª–∏—Ç—å –º–µ—Ç–æ–¥ delete_all_events_for_meeting –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        start_marker = "def delete_all_events_for_meeting"
        end_marker = "def _delete_from_calendar"
        
        if start_marker in content:
            start_idx = content.find(start_marker)
            if start_idx != -1:
                # –ù–∞–π—Ç–∏ –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞
                end_idx = content.find(end_marker, start_idx)
                if end_idx != -1:
                    # –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –º–µ—Ç–æ–¥
                    content = content[:start_idx] + content[end_idx:]
                    
                    with open(dual_file, 'w', encoding='utf-8') as f:
                        f.write(content)
                    
                    self.emergency_log("‚úÖ –£–¥–∞–ª–µ–Ω –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –º–µ—Ç–æ–¥ delete_all_events_for_meeting")
    
    def create_simple_working_version(self) -> dict:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é —Ä–∞–±–æ—á—É—é –≤–µ—Ä—Å–∏—é"""
        self.emergency_log("=== –°–û–ó–î–ê–ù–ò–ï –ü–†–û–°–¢–û–ô –†–ê–ë–û–ß–ï–ô –í–ï–†–°–ò–ò ===")
        
        # –£–ø—Ä–æ—Å—Ç–∏—Ç—å google_calendar_dual.py –¥–æ –º–∏–Ω–∏–º—É–º–∞
        dual_file = self.project_root / "src" / "services" / "google_calendar_dual.py"
        
        with open(dual_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞–π—Ç–∏ –∏ —É–ø—Ä–æ—Å—Ç–∏—Ç—å _create_event_with_fallback
        simplified_method = '''    def _create_event_with_fallback(self, calendar_id: str, event_data: dict, calendar_type: str):
        """Simplified event creation - ONE attempt only"""
        logger.info(f"üìÖ Creating event in {calendar_type}'s calendar: {calendar_id}")
        
        try:
            # Single attempt - no complex fallbacks
            event = self.calendar_service._service.events().insert(
                calendarId=calendar_id,
                body=event_data,
                conferenceDataVersion=1
            ).execute()
            
            logger.info(f"‚úÖ SUCCESS: Created event in {calendar_type}'s calendar")
            return event
            
        except Exception as e:
            logger.error(f"‚ùå Failed to create event in {calendar_type}'s calendar: {e}")
            
            # Only fallback: basic event without conference
            try:
                basic_data = event_data.copy()
                basic_data.pop('conferenceData', None)
                basic_data.pop('attendees', None)
                
                event = self.calendar_service._service.events().insert(
                    calendarId=calendar_id,
                    body=basic_data
                ).execute()
                
                logger.info(f"‚úÖ Created basic event in {calendar_type}'s calendar")
                return event
                
            except Exception as basic_error:
                logger.error(f"‚ùå Even basic event failed: {basic_error}")
                return None'''
        
        # –ù–∞–π—Ç–∏ –∏ –∑–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
        start_pattern = "def _create_event_with_fallback("
        end_pattern = "def _is_valid_email("
        
        start_idx = content.find(start_pattern)
        end_idx = content.find(end_pattern)
        
        if start_idx != -1 and end_idx != -1:
            content = content[:start_idx] + simplified_method + "\n\n    " + content[end_idx:]
            
            with open(dual_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            self.emergency_log("‚úÖ –£–ø—Ä–æ—â–µ–Ω –º–µ—Ç–æ–¥ _create_event_with_fallback")
        
        return {"status": "simplified", "file": str(dual_file)}
    
    def run_emergency_protocol(self) -> dict:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª"""
        self.emergency_log("üö® === –ó–ê–ü–£–°–ö –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –ü–†–û–¢–û–ö–û–õ–ê ===")
        
        emergency_results = {
            "protocol_start": datetime.now().isoformat(),
            "steps": []
        }
        
        # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —É—â–µ—Ä–±–∞
        damage_report = self.analyze_current_damage()
        emergency_results["steps"].append({"step": "damage_analysis", "result": damage_report})
        
        # –®–∞–≥ 2: –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–∞—Ç
        rollback_result = self.immediate_rollback_to_working_state()
        emergency_results["steps"].append({"step": "immediate_rollback", "result": rollback_result})
        
        # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –≤–µ—Ä—Å–∏–∏
        simplified_result = self.create_simple_working_version()
        emergency_results["steps"].append({"step": "simplification", "result": simplified_result})
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        emergency_file = self.project_root / "EMERGENCY_PROTOCOL_RESULTS.json"
        with open(emergency_file, 'w', encoding='utf-8') as f:
            json.dump(emergency_results, f, indent=2, ensure_ascii=False)
        
        self.emergency_log("‚úÖ –≠–ö–°–¢–†–ï–ù–ù–´–ô –ü–†–û–¢–û–ö–û–õ –ó–ê–í–ï–†–®–ï–ù")
        self.emergency_log(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {emergency_file}")
        
        return emergency_results

if __name__ == "__main__":
    print("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –û–¢–ö–ê–¢ v5.0")
    print("=" * 60)
    print("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—É–≥—É–±–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã")
    print("–ó–∞–ø—É—Å–∫–∞—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–∞—Ç...")
    print("=" * 60)
    
    project_path = "/Users/evgenii/meeting-scheduler-bot"
    emergency = EmergencyRollbackAndDiagnosis(project_path)
    
    try:
        results = emergency.run_emergency_protocol()
        
        print("\n" + "=" * 60)
        print("üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –ü–†–û–¢–û–ö–û–õ –ó–ê–í–ï–†–®–ï–ù")
        
        if results["steps"][-1]["result"].get("success", False):
            print("‚úÖ –û–¢–ö–ê–¢ –í–´–ü–û–õ–ù–ï–ù –£–°–ü–ï–®–ù–û")
            print("üìã –°–∏—Å—Ç–µ–º–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")
            print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")
        else:
            print("‚ùå –û–¢–ö–ê–¢ –ù–ï –ó–ê–í–ï–†–®–ï–ù")
            print("üìû –¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–û–ï –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û")
        
        print(f"\nüìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã:")
        print(f"   - EMERGENCY_DAMAGE_REPORT.json")
        print(f"   - EMERGENCY_PROTOCOL_RESULTS.json")
        print(f"   - emergency_diagnosis.log")
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –ü–†–û–¢–û–ö–û–õ–ê: {e}")
        import traceback
        print(traceback.format_exc())