#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook - –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""
import os
import sys
import json
import urllib.request
import urllib.parse

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
print("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Bot Webhook\n")
BOT_TOKEN = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()

if not BOT_TOKEN:
    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –≤–≤–µ–¥–µ–Ω. –í—ã—Ö–æ–¥.")
    sys.exit(1)

# Telegram API URL
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
WEBHOOK_URL = "https://meeting-scheduler-bot-fkp8.onrender.com"
WEBHOOK_PATH = "/webhook"

def make_request(method, params=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Telegram API"""
    url = f"{API_URL}/{method}"
    if params:
        url += "?" + urllib.parse.urlencode(params)
    
    try:
        with urllib.request.urlopen(url) as response:
            return json.loads(response.read().decode('utf-8'))
    except Exception as e:
        return {"ok": False, "error": str(e)}

def main():
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞
    bot_info = make_request("getMe")
    if bot_info.get("ok"):
        bot = bot_info.get("result", {})
        print(f"‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: @{bot.get('username', 'Unknown')}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É!")
        print(bot_info.get("error", "Unknown error"))
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
    webhook_info = make_request("getWebhookInfo")
    
    if webhook_info.get("ok"):
        result = webhook_info.get("result", {})
        current_url = result.get("url", "")
        
        print(f"\nüìå –¢–µ–∫—É—â–∏–π webhook URL: {current_url or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"üìä –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {result.get('pending_update_count', 0)}")
        
        if result.get("last_error_message"):
            print(f"\n‚ùå –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {result.get('last_error_message')}")
            print(f"   –í—Ä–µ–º—è: {result.get('last_error_date')}")
    
    # –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    print("\nüìã –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?")
    print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –¥–ª—è Render")
    print("2. –£–¥–∞–ª–∏—Ç—å webhook")
    print("3. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    print("4. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í—ã–±–æ—Ä (1-4): ")
    
    if choice == "1":
        full_url = f"{WEBHOOK_URL}{WEBHOOK_PATH}"
        print(f"\nüîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: {full_url}")
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π
        make_request("deleteWebhook")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π
        result = make_request("setWebhook", {"url": full_url})
        if result.get("ok"):
            print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result}")
    
    elif choice == "2":
        print("\nüîÑ –£–¥–∞–ª—è–µ–º webhook...")
        result = make_request("deleteWebhook")
        if result.get("ok"):
            print("‚úÖ Webhook —É–¥–∞–ª–µ–Ω!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result}")
    
    elif choice == "3":
        print("\nüîÑ –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
        updates = make_request("getUpdates")
        if updates.get("ok"):
            messages = updates.get("result", [])
            print(f"\nüì® –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            
            if messages:
                print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5:")
                for msg in messages[-5:]:
                    m = msg.get("message", {})
                    if m:
                        user = m.get("from", {})
                        print(f"\nüë§ {user.get('first_name', '')} (@{user.get('username', 'Unknown')})")
                        print(f"üí¨ {m.get('text', '')}")
                        print(f"üïê {m.get('date', '')}")

if __name__ == "__main__":
    main()