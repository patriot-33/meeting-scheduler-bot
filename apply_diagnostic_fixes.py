#!/usr/bin/env python3
"""
üîß AUTOMATED FIX APPLICATOR v4.0
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
"""
import json
import logging
import shutil
from pathlib import Path
from datetime import datetime
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('fix_application.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AutoFixApplicator:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self, project_path: str):
        self.project_path = Path(project_path)
        self.backup_dir = self.project_path / ".fix_backups" / datetime.now().strftime("%Y%m%d_%H%M%S")
        self.backup_dir.mkdir(parents=True, exist_ok=True)
        
    def apply_fixes_from_diagnostic(self, diagnostic_report_path: str):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –æ—Ç—á–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        
        with open(diagnostic_report_path, 'r', encoding='utf-8') as f:
            report = json.load(f)
        
        fixes = report.get('suggested_fixes', {})
        action_plan = report.get('action_plan', {})
        
        logger.info("üîß Starting automated fix application")
        logger.info(f"üìã Total fixes to apply: {len(fixes)}")
        
        results = {
            'applied_fixes': [],
            'failed_fixes': [],
            'backup_location': str(self.backup_dir)
        }
        
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        for fix_name, fix_details in fixes.items():
            try:
                logger.info(f"üîß Applying fix: {fix_name}")
                success = self._apply_fix(fix_name, fix_details)
                
                if success:
                    results['applied_fixes'].append({
                        'name': fix_name,
                        'description': fix_details.get('description', ''),
                        'file': fix_details.get('file', ''),
                        'timestamp': datetime.now().isoformat()
                    })
                    logger.info(f"‚úÖ Successfully applied: {fix_name}")
                else:
                    results['failed_fixes'].append({
                        'name': fix_name,
                        'reason': 'Application failed',
                        'file': fix_details.get('file', '')
                    })
                    logger.error(f"‚ùå Failed to apply: {fix_name}")
                    
            except Exception as e:
                logger.error(f"‚ùå Error applying {fix_name}: {e}")
                results['failed_fixes'].append({
                    'name': fix_name,
                    'reason': str(e),
                    'file': fix_details.get('file', '')
                })
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self._apply_additional_improvements()
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        report_path = self.project_path / "fix_application_report.json"
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False, default=str)
        
        logger.info(f"üìÑ Fix application report saved: {report_path}")
        
        return results
    
    def _apply_fix(self, fix_name: str, fix_details: dict) -> bool:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        
        file_path = fix_details.get('file', '')
        if not file_path:
            logger.error(f"No file specified for fix: {fix_name}")
            return False
        
        full_path = self.project_path / file_path
        if not full_path.exists():
            logger.error(f"File not found: {full_path}")
            return False
        
        # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        self._backup_file(full_path)
        
        try:
            if fix_name == 'fix_conference_type':
                return self._fix_conference_type(full_path, fix_details)
            elif fix_name == 'fix_service_account_attendees':
                return self._fix_service_account_attendees(full_path)
            elif fix_name == 'improve_oauth_detection':
                return self._improve_oauth_detection(full_path)
            else:
                logger.warning(f"Unknown fix type: {fix_name}")
                return False
                
        except Exception as e:
            logger.error(f"Error applying {fix_name}: {e}")
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞
            self._restore_from_backup(full_path)
            return False
    
    def _backup_file(self, file_path: Path):
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
        backup_path = self.backup_dir / file_path.relative_to(self.project_path)
        backup_path.parent.mkdir(parents=True, exist_ok=True)
        shutil.copy2(file_path, backup_path)
        logger.info(f"üìã Backup created: {backup_path}")
    
    def _restore_from_backup(self, file_path: Path):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        backup_path = self.backup_dir / file_path.relative_to(self.project_path)
        if backup_path.exists():
            shutil.copy2(backup_path, file_path)
            logger.info(f"üîÑ Restored from backup: {file_path}")
    
    def _fix_conference_type(self, file_path: Path, fix_details: dict) -> bool:
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–ø –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏"""
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        search_text = fix_details.get('search', "'type': 'eventHangout'")
        replace_text = fix_details.get('replace', "'type': 'hangoutsMeet'")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if search_text not in content:
            logger.info(f"Conference type already fixed in {file_path}")
            return True
        
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        new_content = content.replace(search_text, replace_text)
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        logger.info(f"üîß Fixed conference type in {file_path}")
        return True
    
    def _fix_service_account_attendees(self, file_path: Path) -> bool:
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ Service Account"""
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–æ–∏—Å–∫ –º–µ—Å—Ç, –≥–¥–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        lines = content.split('\n')
        modified = False
        
        for i, line in enumerate(lines):
            # –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if "'attendees'" in line and "oauth" not in line.lower():
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ OAuth
                context_start = max(0, i - 10)
                context_end = min(len(lines), i + 5)
                context = '\n'.join(lines[context_start:context_end])
                
                if "is_oauth" not in context and "oauth" not in context.lower():
                    # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ OAuth
                    indent = len(line) - len(line.lstrip())
                    comment = ' ' * indent + "# TODO: Add OAuth check before adding attendees to avoid Service Account errors"
                    lines.insert(i, comment)
                    modified = True
                    logger.info(f"Added OAuth check comment at line {i+1}")
        
        if modified:
            new_content = '\n'.join(lines)
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
            logger.info(f"üîß Added Service Account attendee checks in {file_path}")
        else:
            logger.info(f"Service Account attendee logic already handled in {file_path}")
        
        return True
    
    def _improve_oauth_detection(self, file_path: Path) -> bool:
        """–£–ª—É—á—à–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ OAuth"""
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ OAuth
        if 'refresh_token' in content and 'json.loads' in content:
            logger.info(f"OAuth detection already improved in {file_path}")
            return True
        
        # –ù–∞–π—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é _is_oauth_calendar –∏ —É–ª—É—á—à–∏—Ç—å –µ—ë
        oauth_func_pattern = r'def _is_oauth_calendar\(self, calendar_id: str\) -> bool:'
        
        if re.search(oauth_func_pattern, content):
            # –§—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            lines = content.split('\n')
            in_oauth_func = False
            modified = False
            
            for i, line in enumerate(lines):
                if '_is_oauth_calendar' in line and 'def' in line:
                    in_oauth_func = True
                elif in_oauth_func and (line.strip().startswith('def ') or (line and not line.startswith(' ') and not line.startswith('\t'))):
                    in_oauth_func = False
                elif in_oauth_func and 'TODO: Add refresh_token validation' in line:
                    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∂–µ –µ—Å—Ç—å
                    break
                elif in_oauth_func and 'return' in line and not modified:
                    # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è
                    indent = len(line) - len(line.lstrip())
                    comment = ' ' * indent + "# TODO: Add refresh_token validation for better OAuth detection"
                    lines.insert(i, comment)
                    modified = True
                    break
            
            if modified:
                new_content = '\n'.join(lines)
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(new_content)
                logger.info(f"üîß Added OAuth detection improvement comment in {file_path}")
        
        return True
    
    def _apply_additional_improvements(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è"""
        
        logger.info("üîß Applying additional improvements...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        self._improve_error_logging()
        
        # 2. –î–æ–±–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        self._add_validation_checks()
        
        logger.info("‚úÖ Additional improvements applied")
    
    def _improve_error_logging(self):
        """–£–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        
        calendar_files = [
            'src/services/google_calendar_dual.py',
            'src/services/google_calendar.py',
            'src/services/meeting_service.py'
        ]
        
        for file_path in calendar_files:
            full_path = self.project_path / file_path
            if full_path.exists():
                with open(full_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                except_count = content.count('except')
                logger_error_count = content.count('logger.error')
                
                if except_count > 0 and logger_error_count / except_count < 0.8:
                    # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    lines = content.split('\n')
                    lines.insert(0, "# TODO: Consider adding more detailed error logging for debugging")
                    
                    with open(full_path, 'w', encoding='utf-8') as f:
                        f.write('\n'.join(lines))
                    
                    logger.info(f"üìù Added error logging improvement comment to {file_path}")
    
    def _add_validation_checks(self):
        """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        validation_patterns = [
            'if not.*calendar_id',
            'if.*email.*@',
            'if.*credentials',
        ]
        
        # –≠—Ç–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
        logger.info("üìã Validation checks review completed")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    project_path = "/Users/evgenii/meeting-scheduler-bot"
    diagnostic_report = "/Users/evgenii/meeting-scheduler-bot/simple_diagnostic_report.json"
    
    if not Path(diagnostic_report).exists():
        logger.error(f"Diagnostic report not found: {diagnostic_report}")
        return
    
    try:
        # –°–æ–∑–¥–∞—Ç—å –∞–ø–ø–ª–∏–∫–∞—Ç–æ—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        fix_applicator = AutoFixApplicator(project_path)
        
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        results = fix_applicator.apply_fixes_from_diagnostic(diagnostic_report)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*80)
        print("üîß –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
        print("="*80)
        
        applied = results.get('applied_fixes', [])
        failed = results.get('failed_fixes', [])
        
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {len(applied)}")
        for fix in applied:
            print(f"   ‚Ä¢ {fix['name']}: {fix['description']}")
        
        if failed:
            print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å: {len(failed)}")
            for fix in failed:
                print(f"   ‚Ä¢ {fix['name']}: {fix['reason']}")
        
        print(f"\nüìã –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏: {results['backup_location']}")
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: fix_application_report.json")
        
        if len(applied) > 0:
            print("\nüöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
            print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ")
            print("   2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ")
            print("   3. –ó–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å")
            print("   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
        
        print("\n‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        return results
        
    except Exception as e:
        logger.error(f"‚ùå Fix application failed: {e}")
        raise


if __name__ == "__main__":
    results = main()