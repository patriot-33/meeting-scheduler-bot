#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –±–æ—Ç–æ–º
"""
import json
import urllib.request
import urllib.parse
import time

BOT_TOKEN = "8318735096:AAHQZ-GJNxr4Jon0T9lR5DD0EJx-s1O_7Ec"
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

def make_request(method, params=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Telegram API"""
    url = f"{API_URL}/{method}"
    if params:
        url += "?" + urllib.parse.urlencode(params)
    
    try:
        with urllib.request.urlopen(url) as response:
            return json.loads(response.read().decode('utf-8'))
    except Exception as e:
        return {"ok": False, "error": str(e)}

print("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n")

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
print("1Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:")
webhook_info = make_request("getWebhookInfo")
if webhook_info.get("ok"):
    result = webhook_info.get("result", {})
    print(f"   URL: {result.get('url', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
    print(f"   –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {result.get('pending_update_count', 0)}")
    print(f"   –ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {result.get('max_connections', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
    print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {result.get('allowed_updates', [])}")
    
    if result.get("last_error_message"):
        print(f"\n   ‚ùå –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {result.get('last_error_message')}")
        print(f"   –í—Ä–µ–º—è –æ—à–∏–±–∫–∏: {time.ctime(result.get('last_error_date', 0))}")
    
    if result.get("last_synchronization_error_date"):
        print(f"\n   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {time.ctime(result.get('last_synchronization_error_date'))}")

# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å webhook URL
print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å webhook URL:")
webhook_url = result.get('url', '')
if webhook_url:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        req = urllib.request.Request(webhook_url, method='HEAD')
        with urllib.request.urlopen(req, timeout=5) as response:
            print(f"   ‚úÖ URL –¥–æ—Å—Ç—É–ø–µ–Ω: {response.status} {response.reason}")
            print(f"   –°–µ—Ä–≤–µ—Ä: {response.headers.get('Server', 'Unknown')}")
    except Exception as e:
        print(f"   ‚ùå URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# 3. –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π webhook
print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook –≤—Ä—É—á–Ω—É—é:")
test_update = {
    "update_id": 123456789,
    "message": {
        "message_id": 1,
        "date": int(time.time()),
        "chat": {"id": 1, "type": "private"},
        "text": "/test",
        "from": {"id": 1, "is_bot": False, "first_name": "Test"}
    }
}

if webhook_url:
    try:
        data = json.dumps(test_update).encode('utf-8')
        req = urllib.request.Request(
            webhook_url,
            data=data,
            headers={'Content-Type': 'application/json'}
        )
        with urllib.request.urlopen(req, timeout=10) as response:
            response_data = response.read().decode('utf-8')
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status}")
            print(f"   –û—Ç–≤–µ—Ç: {response_data[:200]}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

# 4. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
print("\n4Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (polling):")
# –í—Ä–µ–º–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º webhook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
make_request("deleteWebhook")
time.sleep(1)

updates = make_request("getUpdates", {"limit": 5})
if updates.get("ok"):
    update_list = updates.get("result", [])
    if update_list:
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(update_list)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:")
        for update in update_list:
            msg = update.get("message", {})
            if msg:
                print(f"\n   –û—Ç: @{msg.get('from', {}).get('username', 'Unknown')}")
                print(f"   –¢–µ–∫—Å—Ç: {msg.get('text', '')}")
                print(f"   –í—Ä–µ–º—è: {time.ctime(msg.get('date', 0))}")
    else:
        print("   –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

# 5. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
print("\n5Ô∏è‚É£ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook...")
if webhook_url:
    result = make_request("setWebhook", {"url": webhook_url})
    if result.get("ok"):
        print("   ‚úÖ Webhook –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {result}")

# 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint:")
health_url = webhook_url.replace('/webhook', '/health')
try:
    with urllib.request.urlopen(health_url, timeout=5) as response:
        health_data = json.loads(response.read().decode('utf-8'))
        print(f"   –°—Ç–∞—Ç—É—Å: {health_data.get('status', 'Unknown')}")
        checks = health_data.get('checks', {})
        if checks:
            print(f"   Database: {checks.get('database', {}).get('message', 'Unknown')}")
            print(f"   Config: {checks.get('config', {}).get('message', 'Unknown')}")
except Exception as e:
    print(f"   ‚ùå Health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

print("\nüîé –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ Render.com Dashboard")
print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_URL —Å–æ–¥–µ—Ä–∂–∏—Ç '-fkp8'")
print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ—Ä—Ç 10000 –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
print("4. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π redeploy –Ω–∞ Render")