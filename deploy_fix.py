#!/usr/bin/env python3
"""
üöÄ DEPLOYMENT FIX for Render.com
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–∏ deploy

–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
column meetings.google_calendar_id does not exist
"""

import os
import sys
import logging

# Setup logging for deployment
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - DEPLOY_FIX - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def run_critical_migration():
    """Run critical migration during deployment"""
    logger.info("üöÄ DEPLOYMENT FIX: Running critical migration")
    
    try:
        # Check if we're in production environment
        environment = os.getenv('ENVIRONMENT', 'development')
        logger.info(f"Environment: {environment}")
        
        # Import and run migration directly
        from migrations.add_google_calendar_id_field import upgrade
        
        logger.info("üîß Applying google_calendar_id migration...")
        success = upgrade()
        
        if success:
            logger.info("‚úÖ Deployment fix successful")
            return True
        else:
            logger.error("‚ùå Deployment fix failed")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Deployment fix error: {e}")
        # Don't fail deployment, just log the error
        logger.warning("‚ö†Ô∏è Continuing deployment despite migration error")
        return False

if __name__ == "__main__":
    # This can be called from main.py during startup
    run_critical_migration()