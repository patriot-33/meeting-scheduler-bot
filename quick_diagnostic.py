#!/usr/bin/env python3
"""
üéØ –ë–´–°–¢–†–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê MEETING-SCHEDULER-BOT
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
"""

import sys
import os
import time
from datetime import datetime

# Add src to path for imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def quick_system_check():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("üéØ –ë–´–°–¢–†–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    try:
        from diagnostics.core_diagnostics import DiagnosticLogger, log_system_state
        from diagnostics.system_monitor import SystemMonitor
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
        logger = DiagnosticLogger("quick_diagnostic", "quick_diagnostic.log")
        
        print("\nüìä –°–ò–°–¢–ï–ú–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
        print("-" * 25)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        log_system_state("QUICK_DIAGNOSTIC_START")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä
        monitor = SystemMonitor(logger)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = monitor.get_current_metrics()
        
        print(f"CPU: {metrics.cpu_percent}%")
        print(f"Memory: {metrics.memory_percent}% ({metrics.memory_used_gb}GB/{metrics.memory_total_gb}GB)")
        print(f"Disk: {metrics.disk_percent}% ({metrics.disk_free_gb}GB —Å–≤–æ–±–æ–¥–Ω–æ)")
        print(f"–°–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {metrics.network_connections}")
        print(f"–ü—Ä–æ—Ü–µ—Å—Å—ã: {metrics.process_count}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        print(f"\nüìà –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        print("-" * 30)
        
        # –î–æ–±–∞–≤–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞
        for i in range(3):
            time.sleep(1)
            metrics = monitor.get_current_metrics()
        
        trends = monitor.analyze_performance_trends(minutes=1)
        
        print(f"CPU - —Ç–µ–∫—É—â–∏–π: {trends['cpu']['current']:.1f}%, —Å—Ä–µ–¥–Ω–∏–π: {trends['cpu']['average']:.1f}%")
        print(f"Memory - —Ç–µ–∫—É—â–∏–π: {trends['memory']['current']:.1f}%, —Å—Ä–µ–¥–Ω–∏–π: {trends['memory']['average']:.1f}%")
        
        if trends.get('alerts'):
            print(f"\nüö® –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for alert in trends['alerts']:
                print(f"   {alert}")
        else:
            print(f"\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\nüóÑÔ∏è  –¢–ï–°–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
    print("-" * 22)
    
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å database –º–æ–¥—É–ª—å
        import database
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ engine
        if hasattr(database, 'engine'):
            engine = database.engine
            print("‚úÖ Database engine –Ω–∞–π–¥–µ–Ω")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            from sqlalchemy import text
            with engine.connect() as conn:
                result = conn.execute(text("SELECT 1"))
                result.fetchone()
            
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º pool info –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if hasattr(engine, 'pool'):
                pool = engine.pool
                print(f"   Connection pool size: {pool.size()}")
                print(f"   Checked out connections: {pool.checkedout()}")
            
            return True
            
        else:
            print("‚ö†Ô∏è  Database engine –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–¥—É–ª–µ database")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_external_services():
    """–¢–µ—Å—Ç –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print(f"\nüåê –¢–ï–°–¢ –í–ù–ï–®–ù–ò–• –°–ï–†–í–ò–°–û–í:")
    print("-" * 27)
    
    try:
        import requests
        
        services = {
            "Google APIs": "https://www.googleapis.com/",
            "Google OAuth": "https://oauth2.googleapis.com/", 
            "Telegram Bot API": "https://api.telegram.org/"
        }
        
        for service_name, url in services.items():
            try:
                start_time = time.time()
                response = requests.get(url, timeout=5)
                response_time = (time.time() - start_time) * 1000
                
                if response.status_code < 500:
                    print(f"‚úÖ {service_name}: {response.status_code} ({response_time:.0f}ms)")
                else:
                    print(f"‚ö†Ô∏è  {service_name}: {response.status_code} ({response_time:.0f}ms)")
                    
            except Exception as e:
                print(f"‚ùå {service_name}: {e}")
        
        return True
        
    except ImportError:
        print("‚ùå requests –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def test_project_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    print(f"\nüìÅ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:")
    print("-" * 21)
    
    critical_files = [
        "src/main.py",
        "src/config.py", 
        "src/database.py",
        "src/handlers/",
        "src/services/",
        "src/utils/",
        "requirements.txt"
    ]
    
    all_good = True
    
    for file_path in critical_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
            all_good = False
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞—à–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    diagnostic_files = [
        "src/diagnostics/",
        "src/diagnostics/core_diagnostics.py",
        "src/diagnostics/system_monitor.py"
    ]
    
    print(f"\nüîß –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
    for file_path in diagnostic_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - –ù–ï –ù–ê–ô–î–ï–ù") 
            all_good = False
    
    return all_good

def run_hypothesis_tests():
    """–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≥–∏–ø–æ—Ç–µ–∑"""
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ò–ü–û–¢–ï–ó:")
    print("-" * 23)
    
    try:
        from diagnostics.hypothesis_testing import HypothesisTester, CommonHypotheses
        from diagnostics.core_diagnostics import DiagnosticLogger
        
        logger = DiagnosticLogger("hypothesis_test")
        tester = HypothesisTester(logger)
        
        # –¢–µ—Å—Ç –≥–∏–ø–æ—Ç–µ–∑—ã –∏—Å—Ç–æ—â–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        print("–¢–µ—Å—Ç–∏—Ä—É—é –≥–∏–ø–æ—Ç–µ–∑—É: –ò—Å—Ç–æ—â–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...")
        conditions = CommonHypotheses.create_resource_exhaustion_hypothesis()
        result = tester.test_hypothesis(
            "Resource Exhaustion Test",
            conditions,
            required_success_rate=1.0
        )
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result.overall_result.value}")
        print(f"–ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: {result.conditions_passed}/{result.conditions_tested}")
        print(f"–ó–∞–∫–ª—é—á–µ–Ω–∏–µ: {result.conclusion}")
        
        if result.recommendations:
            print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for rec in result.recommendations:
                print(f"   ‚Ä¢ {rec}")
        
        return result.overall_result.value == "CONFIRMED"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–∏–ø–æ—Ç–µ–∑: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    start_time = time.time()
    results = {}
    
    print("üöÄ –ó–ê–ü–£–°–ö –ë–´–°–¢–†–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    results['project_structure'] = test_project_structure()
    
    # 2. –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    results['system_check'] = quick_system_check()
    
    # 3. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    results['database'] = test_database_connection()
    
    # 4. –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
    results['external_services'] = test_external_services()
    
    # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑
    results['hypothesis_tests'] = run_hypothesis_tests()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    duration = time.time() - start_time
    
    print(f"\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 20)
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫—É–Ω–¥")
    
    passed_tests = sum(1 for result in results.values() if result)
    total_tests = len(results)
    
    print(f"–¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}/{total_tests}")
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {test_name}: {status}")
    
    if passed_tests == total_tests:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    elif passed_tests >= total_tests * 0.8:
        print(f"\n‚ö†Ô∏è  –°–ò–°–¢–ï–ú–ê –í –†–ê–ë–û–ß–ï–ú –°–û–°–¢–û–Ø–ù–ò–ò")
        print(f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
    else:
        print(f"\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    
    print(f"\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:")
    print("   ‚Ä¢ quick_diagnostic.log")
    
    return passed_tests / total_tests

if __name__ == "__main__":
    try:
        success_rate = main()
        exit(0 if success_rate >= 0.8 else 1)
    except KeyboardInterrupt:
        print(f"\n\n‚ö†Ô∏è  –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        exit(1)
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        exit(1)