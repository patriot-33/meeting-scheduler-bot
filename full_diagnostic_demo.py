#!/usr/bin/env python3
"""
üéØ –ü–û–õ–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö 6 —Ñ–∞–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ
"""

import sys
import os
import time
from datetime import datetime

# Add src to path for imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def simulate_meeting_creation_problem():
    """
    üéØ –ü–û–õ–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–µ—á
    
    –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É: 
    "Meeting creation failing intermittently with Google Calendar timeout"
    """
    
    print("üéØ ULTIMATE DIAGNOSTIC SYSTEM v2.0 - –ü–û–õ–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
    print("=" * 70)
    print("–ü—Ä–æ–±–ª–µ–º–∞: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–∞–¥–∞–µ—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º Google Calendar")
    print("=" * 70)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É
    try:
        import database
        db_engine = database.engine if hasattr(database, 'engine') else None
    except:
        db_engine = None
    
    from diagnostics.diagnostic_orchestrator import UltimateDiagnosticSystem
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
    diagnostic_system = UltimateDiagnosticSystem(
        project_name="meeting-scheduler-bot",
        db_engine=db_engine,
        log_file="full_diagnostic_demo.log"
    )
    
    # =================================================================
    # PHASE 1: –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –¢–†–ò–ê–ñ–ù–ê–Ø –û–¶–ï–ù–ö–ê
    # =================================================================
    print("\nüìã PHASE 1: –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –¢–†–ò–ê–ñ–ù–ê–Ø –û–¶–ï–ù–ö–ê")
    print("=" * 50)
    
    triage_result = diagnostic_system.phase_1_triage(
        problem_description="Meeting creation failing intermittently with Google Calendar",
        error_message="TimeoutError: Google Calendar API request timed out after 30 seconds",
        context={
            "user_reports": 15,
            "failure_rate": "30%", 
            "time_pattern": "peak hours (9-11 AM, 2-4 PM)",
            "affected_users": "all user types",
            "duration": "started 2 days ago",
            "environment": "production"
        }
    )
    
    print(f"üö® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {triage_result['priority']}")
    print(f"üìù –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: {triage_result['problem_type']}")
    print("üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —à–∞–≥–∏:")
    for i, step in enumerate(triage_result['recommended_next_steps'], 1):
        print(f"   {i}. {step}")
    
    # =================================================================
    # PHASE 2: –°–ò–°–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê  
    # =================================================================
    print(f"\nüî¨ PHASE 2: –°–ò–°–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")
    print("=" * 45)
    
    diagnosis_result = diagnostic_system.phase_2_systematic_diagnosis()
    
    print(f"üè• –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {diagnosis_result['sweep_results'].get('overall_health', 'unknown').upper()}")
    print(f"üîç –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ö–æ–¥–∫–∏: {len(diagnosis_result.get('critical_findings', []))}")
    print(f"üìä –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {len(diagnosis_result.get('suspicious_patterns', []))}")
    
    if diagnosis_result.get('critical_findings'):
        print("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        for finding in diagnosis_result['critical_findings']:
            print(f"   ‚Ä¢ {finding}")
    
    if diagnosis_result.get('suspicious_patterns'):
        print("‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
        for pattern in diagnosis_result['suspicious_patterns']:
            print(f"   ‚Ä¢ {pattern}")
    
    print(f"üß™ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    for hypothesis in diagnosis_result.get('recommended_hypotheses', []):
        print(f"   ‚Ä¢ {hypothesis}")
    
    # =================================================================
    # PHASE 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ò–ü–û–¢–ï–ó
    # =================================================================
    print(f"\nüß™ PHASE 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ò–ü–û–¢–ï–ó")
    print("=" * 37)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è –ø—Ä–æ–±–ª–µ–º—ã —Å Google Calendar
    custom_hypotheses = ["external_service_failure", "resource_exhaustion"]
    
    hypothesis_result = diagnostic_system.phase_3_hypothesis_testing(
        custom_hypotheses=custom_hypotheses,
        db_engine=db_engine
    )
    
    print(f"üî¨ –ì–∏–ø–æ—Ç–µ–∑ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {hypothesis_result['hypotheses_tested']}")
    print(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {len(hypothesis_result['confirmed_hypotheses'])} ({hypothesis_result['confirmed_hypotheses']})")
    print(f"‚ùå –û—Ç–≤–µ—Ä–≥–Ω—É—Ç–æ: {len(hypothesis_result['rejected_hypotheses'])} ({hypothesis_result['rejected_hypotheses']})")
    print(f"‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ: {len(hypothesis_result['inconclusive_hypotheses'])} ({hypothesis_result['inconclusive_hypotheses']})")
    
    # =================================================================
    # PHASE 4: –ê–ù–ê–õ–ò–ó –ü–ï–†–í–û–ü–†–ò–ß–ò–ù–´ (5 WHYS)
    # =================================================================
    print(f"\nüéØ PHASE 4: –ê–ù–ê–õ–ò–ó –ü–ï–†–í–û–ü–†–ò–ß–ò–ù–´ (5 WHYS)")
    print("=" * 44)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ 5 "–ø–æ—á–µ–º—É" –¥–ª—è –Ω–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã
    why_answers = [
        "Google Calendar API requests are timing out after 30 seconds",
        "The API server is responding slowly during peak usage hours", 
        "High traffic volume is overwhelming the default request limits",
        "Our application is making too many concurrent requests without proper throttling",
        "Connection pooling and retry logic are not configured for high-load scenarios"
    ]
    
    root_cause_result = diagnostic_system.phase_4_root_cause_analysis(why_answers)
    
    print(f"üéØ –ü–µ—Ä–≤–æ–ø—Ä–∏—á–∏–Ω–∞: {root_cause_result['five_whys_analysis']['root_cause']}")
    print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {root_cause_result['root_cause_confidence']:.2f}/1.0")
    print(f"üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
    for i, solution in enumerate(root_cause_result['recommended_solutions'], 1):
        print(f"   {i}. {solution}")
    
    # =================================================================
    # PHASE 5: –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–®–ï–ù–ò–Ø
    # =================================================================
    print(f"\n‚ö° PHASE 5: –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–®–ï–ù–ò–Ø")
    print("=" * 42)
    
    def implement_google_api_optimization():
        """–°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏—è"""
        print("   üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É—é Google API connection pooling...")
        time.sleep(1)
        
        print("   üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é retry logic —Å exponential backoff...")
        time.sleep(1)
        
        print("   üîß –î–æ–±–∞–≤–ª—è—é rate limiting –¥–ª—è API requests...")
        time.sleep(1)
        
        print("   üîß –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é timeout –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
        time.sleep(0.5)
        
        print("   ‚úÖ –í—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Google API –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    
    def verify_google_api_fix():
        """–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—à–µ–Ω–∏—è"""
        print("   üîç –¢–µ—Å—Ç–∏—Ä—É—é Google Calendar API calls...")
        time.sleep(1)
        
        print("   üîç –ü—Ä–æ–≤–µ—Ä—è—é response times –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π...")
        time.sleep(1)
        
        print("   üîç –í–∞–ª–∏–¥–∏—Ä—É—é error rates...")
        time.sleep(0.5)
        
        print("   ‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - —Ä–µ—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    
    implementation_result = diagnostic_system.phase_5_safe_solution_implementation(
        solution_description="Optimize Google Calendar API configuration with connection pooling, retry logic, and rate limiting",
        implementation_function=implement_google_api_optimization,
        verification_function=verify_google_api_fix,
        files_to_backup=[
            "src/services/google_calendar.py",
            "src/config.py",
            "requirements.txt"
        ]
    )
    
    print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: {implementation_result['implementation_result']['result']}")
    print(f"‚úÖ –£—Å–ø–µ—Ö: {implementation_result['success']}")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {implementation_result['implementation_result']['duration_seconds']:.1f}s")
    print(f"üìã –®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {implementation_result['implementation_result']['steps_completed']}/{implementation_result['implementation_result']['steps_total']}")
    
    # =================================================================
    # PHASE 6: –ü–û–°–¢-–†–ï–®–ï–ù–ò–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì
    # =================================================================
    print(f"\nüìà PHASE 6: –ü–û–°–¢-–†–ï–®–ï–ù–ò–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì")
    print("=" * 37)
    
    # –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    monitoring_result = diagnostic_system.phase_6_post_solution_monitoring(
        monitoring_duration_minutes=1  # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–µ–º–æ
    )
    
    print(f"üè• –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è: {monitoring_result['final_health']['overall_status']}")
    print(f"üö® –í—Å–µ–≥–æ alerts: {monitoring_result['total_alerts']}")
    print(f"üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    for rec in monitoring_result['recommendations']:
        print(f"   ‚Ä¢ {rec}")
    
    # =================================================================
    # –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
    # =================================================================
    print(f"\nüìã –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢")
    print("=" * 38)
    
    final_report = diagnostic_system.generate_comprehensive_report()
    
    session_duration = final_report['session_info']['duration_seconds']
    phases_completed = len(final_report['phases_completed'])
    
    print(f"üïê –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {session_duration/60:.1f} –º–∏–Ω—É—Ç")
    print(f"‚úÖ –§–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {phases_completed}/6")
    print(f"üéØ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞: {final_report['success_metrics']['solution_implemented']}")
    print(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {final_report['success_metrics']['monitoring_completed']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—Ö–∞
    print(f"\nüéñÔ∏è  –ú–ï–¢–†–ò–ö–ò –£–°–ü–ï–•–ê:")
    for metric, value in final_report['success_metrics'].items():
        status = "‚úÖ" if value else "‚ùå"
        metric_name = metric.replace('_', ' ').title()
        print(f"   {status} {metric_name}: {value}")
    
    print(f"\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    print(f"   ‚Ä¢ full_diagnostic_demo.log - –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏")
    print(f"   ‚Ä¢ diagnostic_report_{diagnostic_system.session_id}.json - JSON –æ—Ç—á–µ—Ç")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    success_rate = sum(final_report['success_metrics'].values()) / len(final_report['success_metrics'])
    
    if success_rate >= 0.8:
        print(f"\nüéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print(f"   –°–∏—Å—Ç–µ–º–∞ —Å–ª–µ–¥—É–µ—Ç –≤—Å–µ–º –ø—Ä–∏–Ω—Ü–∏–ø–∞–º BULLETPROOF –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        print(f"   –ü–µ—Ä–≤–æ–ø—Ä–∏—á–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ –≤–Ω–µ–¥—Ä–µ–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ")
    else:
        print(f"\n‚ö†Ô∏è  –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ß–ê–°–¢–ò–ß–ù–û –ó–ê–í–ï–†–®–ï–ù–ê")
        print(f"   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç—Ç–∞–ø—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è")
    
    return final_report

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
        final_report = simulate_meeting_creation_problem()
        
        print(f"\n" + "="*70)
        print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        print("–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑–∞–ª–∞ –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã:")
        print("1. ‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ç—Ä–∏–∞–∂ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è")
        print("2. ‚úÖ –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")  
        print("3. ‚úÖ –ù–∞—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑")
        print("4. ‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–ø—Ä–∏—á–∏–Ω—ã –º–µ—Ç–æ–¥–æ–º 5 Why")
        print("5. ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –∞–≤—Ç–æ–±—ç–∫–∞–ø–æ–º")
        print("6. ‚úÖ –ü–æ—Å—Ç-—Ä–µ—à–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        print("="*70)
        
        return True
        
    except KeyboardInterrupt:
        print(f"\n\n‚ö†Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    except Exception as e:
        print(f"\n\n‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)