#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤
"""
import os
import sys
import time
import subprocess
import signal
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class BotRestartHandler(FileSystemEventHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        self.bot_process = None
        self.last_restart = 0
        self.restart_delay = 2  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
        
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if self.bot_process:
            self.stop_bot()
            
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.bot_process = subprocess.Popen(
            [sys.executable, "run_local.py"],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True
        )
        
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.bot_process:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            self.bot_process.terminate()
            try:
                self.bot_process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                print("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
                self.bot_process.kill()
            self.bot_process = None
            
    def restart_bot(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤"""
        current_time = time.time()
        if current_time - self.last_restart < self.restart_delay:
            return
            
        self.last_restart = current_time
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.start_bot()
        
    def on_modified(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        if event.is_directory:
            return
            
        file_path = Path(event.src_path)
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã
        ignore_patterns = [
            '*.log', '*.db', '*.pyc', '*__pycache__*', 
            '*.git*', '*.env*', 'bot.log'
        ]
        
        for pattern in ignore_patterns:
            if file_path.match(pattern):
                return
                
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è Python —Ñ–∞–π–ª–æ–≤ –≤ src/
        if (file_path.suffix == '.py' and 
            ('src' in file_path.parts or file_path.name.startswith('run_'))):
            print(f"üìù –ò–∑–º–µ–Ω–µ–Ω —Ñ–∞–π–ª: {file_path}")
            self.restart_bot()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"""
    print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö")
    print("=" * 50)
    
    handler = BotRestartHandler()
    observer = Observer()
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ src/
    paths_to_watch = ['.', 'src']
    for path in paths_to_watch:
        if Path(path).exists():
            observer.schedule(handler, path, recursive=True)
            print(f"üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {path}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    handler.start_bot()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    observer.start()
    print("‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
    
    try:
        while True:
            time.sleep(1)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if handler.bot_process and handler.bot_process.poll() is not None:
                print("‚ö†Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
                handler.start_bot()
                
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏...")
        observer.stop()
        handler.stop_bot()
        
    observer.join()
    print("‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    try:
        main()
    except ImportError:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ watchdog:")
        print("pip install watchdog")
        sys.exit(1)